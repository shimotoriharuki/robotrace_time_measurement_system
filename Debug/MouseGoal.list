
MouseGoal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  08006de8  08006de8  00016de8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072a4  080072a4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080072a4  080072a4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080072a4  080072a4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072a4  080072a4  000172a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072a8  080072a8  000172a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080072ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          0000018c  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000036c  2000036c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ecc7  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b76  00000000  00000000  0002eed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c78  00000000  00000000  00030a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bd0  00000000  00000000  000316c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bf35  00000000  00000000  00032298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e8b4  00000000  00000000  0004e1cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a5fb2  00000000  00000000  0005ca81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00102a33  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045a8  00000000  00000000  00102a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006dcc 	.word	0x08006dcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08006dcc 	.word	0x08006dcc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	time += 0.001;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bb6:	a310      	add	r3, pc, #64	; (adr r3, 8000bf8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bbc:	f7ff fb66 	bl	800028c <__adddf3>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	4910      	ldr	r1, [pc, #64]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bc6:	e9c1 2300 	strd	r2, r3, [r1]
	if(time >= 999999) time = 999999;
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bd0:	a30b      	add	r3, pc, #44	; (adr r3, 8000c00 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd6:	f7ff ff95 	bl	8000b04 <__aeabi_dcmpge>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d100      	bne.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0x3a>
}
 8000be0:	e005      	b.n	8000bee <HAL_TIM_PeriodElapsedCallback+0x46>
	if(time >= 999999) time = 999999;
 8000be2:	4909      	ldr	r1, [pc, #36]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000be4:	a306      	add	r3, pc, #24	; (adr r3, 8000c00 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bea:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	d2f1a9fc 	.word	0xd2f1a9fc
 8000bfc:	3f50624d 	.word	0x3f50624d
 8000c00:	00000000 	.word	0x00000000
 8000c04:	412e847e 	.word	0x412e847e
 8000c08:	20000320 	.word	0x20000320

08000c0c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_7 && is_running == RESET){ //START
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	2b80      	cmp	r3, #128	; 0x80
 8000c1a:	d117      	bne.n	8000c4c <HAL_GPIO_EXTI_Callback+0x40>
 8000c1c:	4b33      	ldr	r3, [pc, #204]	; (8000cec <HAL_GPIO_EXTI_Callback+0xe0>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d113      	bne.n	8000c4c <HAL_GPIO_EXTI_Callback+0x40>
		time = 0;
 8000c24:	4932      	ldr	r1, [pc, #200]	; (8000cf0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000c26:	f04f 0200 	mov.w	r2, #0
 8000c2a:	f04f 0300 	mov.w	r3, #0
 8000c2e:	e9c1 2300 	strd	r2, r3, [r1]
		number_of_run++;
 8000c32:	4b30      	ldr	r3, [pc, #192]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b2e      	ldr	r3, [pc, #184]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000c3c:	701a      	strb	r2, [r3, #0]

		is_running = SET;
 8000c3e:	4b2b      	ldr	r3, [pc, #172]	; (8000cec <HAL_GPIO_EXTI_Callback+0xe0>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	701a      	strb	r2, [r3, #0]

		printf("Running...\r\n");
 8000c44:	482c      	ldr	r0, [pc, #176]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000c46:	f003 ff3f 	bl	8004ac8 <puts>
		is_running = RESET;

		printf("%2d, %.4f\r\n", number_of_run, record);
		printf("\r\nWaiting...\r\n");
	}
}
 8000c4a:	e04a      	b.n	8000ce2 <HAL_GPIO_EXTI_Callback+0xd6>
	else if(GPIO_Pin == GPIO_PIN_0 && is_running == SET){ //GOAL
 8000c4c:	88fb      	ldrh	r3, [r7, #6]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d147      	bne.n	8000ce2 <HAL_GPIO_EXTI_Callback+0xd6>
 8000c52:	4b26      	ldr	r3, [pc, #152]	; (8000cec <HAL_GPIO_EXTI_Callback+0xe0>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d143      	bne.n	8000ce2 <HAL_GPIO_EXTI_Callback+0xd6>
		double record = time;
 8000c5a:	4b25      	ldr	r3, [pc, #148]	; (8000cf0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c60:	e9c7 2302 	strd	r2, r3, [r7, #8]
		if(number_of_run == 1){
 8000c64:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d105      	bne.n	8000c78 <HAL_GPIO_EXTI_Callback+0x6c>
			first_time = record;
 8000c6c:	4923      	ldr	r1, [pc, #140]	; (8000cfc <HAL_GPIO_EXTI_Callback+0xf0>)
 8000c6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c72:	e9c1 2300 	strd	r2, r3, [r1]
 8000c76:	e026      	b.n	8000cc6 <HAL_GPIO_EXTI_Callback+0xba>
		else if(number_of_run == 2){
 8000c78:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d105      	bne.n	8000c8c <HAL_GPIO_EXTI_Callback+0x80>
			second_time = record;
 8000c80:	491f      	ldr	r1, [pc, #124]	; (8000d00 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000c82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c86:	e9c1 2300 	strd	r2, r3, [r1]
 8000c8a:	e01c      	b.n	8000cc6 <HAL_GPIO_EXTI_Callback+0xba>
		else if(number_of_run == 3){
 8000c8c:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d105      	bne.n	8000ca0 <HAL_GPIO_EXTI_Callback+0x94>
			third_time = record;
 8000c94:	491b      	ldr	r1, [pc, #108]	; (8000d04 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000c96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c9a:	e9c1 2300 	strd	r2, r3, [r1]
 8000c9e:	e012      	b.n	8000cc6 <HAL_GPIO_EXTI_Callback+0xba>
		else if(number_of_run == 4){
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b04      	cmp	r3, #4
 8000ca6:	d105      	bne.n	8000cb4 <HAL_GPIO_EXTI_Callback+0xa8>
			fourth_time = record;
 8000ca8:	4917      	ldr	r1, [pc, #92]	; (8000d08 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000caa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000cae:	e9c1 2300 	strd	r2, r3, [r1]
 8000cb2:	e008      	b.n	8000cc6 <HAL_GPIO_EXTI_Callback+0xba>
		else if(number_of_run == 5){
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b05      	cmp	r3, #5
 8000cba:	d104      	bne.n	8000cc6 <HAL_GPIO_EXTI_Callback+0xba>
			fifth_time = record;
 8000cbc:	4913      	ldr	r1, [pc, #76]	; (8000d0c <HAL_GPIO_EXTI_Callback+0x100>)
 8000cbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000cc2:	e9c1 2300 	strd	r2, r3, [r1]
		is_running = RESET;
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_GPIO_EXTI_Callback+0xe0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
		printf("%2d, %.4f\r\n", number_of_run, record);
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000cd6:	480e      	ldr	r0, [pc, #56]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x104>)
 8000cd8:	f003 fe70 	bl	80049bc <iprintf>
		printf("\r\nWaiting...\r\n");
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x108>)
 8000cde:	f003 fef3 	bl	8004ac8 <puts>
}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	2000031c 	.word	0x2000031c
 8000cf0:	20000320 	.word	0x20000320
 8000cf4:	20000350 	.word	0x20000350
 8000cf8:	08006de8 	.word	0x08006de8
 8000cfc:	20000328 	.word	0x20000328
 8000d00:	20000330 	.word	0x20000330
 8000d04:	20000338 	.word	0x20000338
 8000d08:	20000340 	.word	0x20000340
 8000d0c:	20000348 	.word	0x20000348
 8000d10:	08006df4 	.word	0x08006df4
 8000d14:	08006e00 	.word	0x08006e00

08000d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout,NULL);
 8000d1c:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <main+0xa8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f003 fed7 	bl	8004ad8 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2a:	f000 fb8b 	bl	8001444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2e:	f000 f869 	bl	8000e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d32:	f000 f95d 	bl	8000ff0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d36:	f000 f92b 	bl	8000f90 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d3a:	f000 f8a5 	bl	8000e88 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000d3e:	f000 f8f1 	bl	8000f24 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000d42:	4820      	ldr	r0, [pc, #128]	; (8000dc4 <main+0xac>)
 8000d44:	f002 f970 	bl	8003028 <HAL_TIM_Base_Start_IT>

  number_of_run = 0;
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <main+0xb0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
  printf("###Program Start###\r\n");
 8000d4e:	481f      	ldr	r0, [pc, #124]	; (8000dcc <main+0xb4>)
 8000d50:	f003 feba 	bl	8004ac8 <puts>

  printf("\r\nWaiting...\r\n");
 8000d54:	481e      	ldr	r0, [pc, #120]	; (8000dd0 <main+0xb8>)
 8000d56:	f003 feb7 	bl	8004ac8 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(number_of_run == 5){
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <main+0xb0>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b05      	cmp	r3, #5
 8000d60:	d129      	bne.n	8000db6 <main+0x9e>
		  printf("----Total Result----\r\n");
 8000d62:	481c      	ldr	r0, [pc, #112]	; (8000dd4 <main+0xbc>)
 8000d64:	f003 feb0 	bl	8004ac8 <puts>
		  printf("01: %.4f\r\n", first_time);
 8000d68:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <main+0xc0>)
 8000d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6e:	481b      	ldr	r0, [pc, #108]	; (8000ddc <main+0xc4>)
 8000d70:	f003 fe24 	bl	80049bc <iprintf>
		  printf("02: %.4f\r\n", second_time);
 8000d74:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <main+0xc8>)
 8000d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7a:	481a      	ldr	r0, [pc, #104]	; (8000de4 <main+0xcc>)
 8000d7c:	f003 fe1e 	bl	80049bc <iprintf>
		  printf("03: %.4f\r\n", third_time);
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <main+0xd0>)
 8000d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d86:	4819      	ldr	r0, [pc, #100]	; (8000dec <main+0xd4>)
 8000d88:	f003 fe18 	bl	80049bc <iprintf>
		  printf("04: %.4f\r\n", fourth_time);
 8000d8c:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <main+0xd8>)
 8000d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d92:	4818      	ldr	r0, [pc, #96]	; (8000df4 <main+0xdc>)
 8000d94:	f003 fe12 	bl	80049bc <iprintf>
		  printf("05: %.4f\r\n", fifth_time);
 8000d98:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <main+0xe0>)
 8000d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9e:	4817      	ldr	r0, [pc, #92]	; (8000dfc <main+0xe4>)
 8000da0:	f003 fe0c 	bl	80049bc <iprintf>
		  printf("--------------------\r\n");
 8000da4:	4816      	ldr	r0, [pc, #88]	; (8000e00 <main+0xe8>)
 8000da6:	f003 fe8f 	bl	8004ac8 <puts>

		  printf("\r\nWaiting...\r\n");
 8000daa:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <main+0xb8>)
 8000dac:	f003 fe8c 	bl	8004ac8 <puts>
		  number_of_run = 0;
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <main+0xb0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_Delay(100);
 8000db6:	2064      	movs	r0, #100	; 0x64
 8000db8:	f000 fbaa 	bl	8001510 <HAL_Delay>
	  if(number_of_run == 5){
 8000dbc:	e7cd      	b.n	8000d5a <main+0x42>
 8000dbe:	bf00      	nop
 8000dc0:	2000000c 	.word	0x2000000c
 8000dc4:	20000248 	.word	0x20000248
 8000dc8:	20000350 	.word	0x20000350
 8000dcc:	08006e10 	.word	0x08006e10
 8000dd0:	08006e00 	.word	0x08006e00
 8000dd4:	08006e28 	.word	0x08006e28
 8000dd8:	20000328 	.word	0x20000328
 8000ddc:	08006e40 	.word	0x08006e40
 8000de0:	20000330 	.word	0x20000330
 8000de4:	08006e4c 	.word	0x08006e4c
 8000de8:	20000338 	.word	0x20000338
 8000dec:	08006e58 	.word	0x08006e58
 8000df0:	20000340 	.word	0x20000340
 8000df4:	08006e64 	.word	0x08006e64
 8000df8:	20000348 	.word	0x20000348
 8000dfc:	08006e70 	.word	0x08006e70
 8000e00:	08006e7c 	.word	0x08006e7c

08000e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b090      	sub	sp, #64	; 0x40
 8000e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0a:	f107 0318 	add.w	r3, r7, #24
 8000e0e:	2228      	movs	r2, #40	; 0x28
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f003 f960 	bl	80040d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e26:	2302      	movs	r3, #2
 8000e28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e2e:	2310      	movs	r3, #16
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e32:	2302      	movs	r3, #2
 8000e34:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e36:	2300      	movs	r3, #0
 8000e38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e3a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e40:	f107 0318 	add.w	r3, r7, #24
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 fe23 	bl	8001a90 <HAL_RCC_OscConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e50:	f000 f92a 	bl	80010a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e54:	230f      	movs	r3, #15
 8000e56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f001 fe4c 	bl	8002b0c <HAL_RCC_ClockConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e7a:	f000 f915 	bl	80010a8 <Error_Handler>
  }
}
 8000e7e:	bf00      	nop
 8000e80:	3740      	adds	r7, #64	; 0x40
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ea6:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <MX_TIM2_Init+0x98>)
 8000ea8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <MX_TIM2_Init+0x98>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <MX_TIM2_Init+0x98>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <MX_TIM2_Init+0x98>)
 8000ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <MX_TIM2_Init+0x98>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <MX_TIM2_Init+0x98>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ece:	4814      	ldr	r0, [pc, #80]	; (8000f20 <MX_TIM2_Init+0x98>)
 8000ed0:	f002 f852 	bl	8002f78 <HAL_TIM_Base_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000eda:	f000 f8e5 	bl	80010a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	4619      	mov	r1, r3
 8000eea:	480d      	ldr	r0, [pc, #52]	; (8000f20 <MX_TIM2_Init+0x98>)
 8000eec:	f002 fa17 	bl	800331e <HAL_TIM_ConfigClockSource>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ef6:	f000 f8d7 	bl	80010a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	4619      	mov	r1, r3
 8000f06:	4806      	ldr	r0, [pc, #24]	; (8000f20 <MX_TIM2_Init+0x98>)
 8000f08:	f002 fc0c 	bl	8003724 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f12:	f000 f8c9 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	3720      	adds	r7, #32
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200001fc 	.word	0x200001fc

08000f24 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_TIM6_Init+0x64>)
 8000f36:	4a15      	ldr	r2, [pc, #84]	; (8000f8c <MX_TIM6_Init+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <MX_TIM6_Init+0x64>)
 8000f3c:	223f      	movs	r2, #63	; 0x3f
 8000f3e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_TIM6_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <MX_TIM6_Init+0x64>)
 8000f48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f4c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_TIM6_Init+0x64>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <MX_TIM6_Init+0x64>)
 8000f56:	f002 f80f 	bl	8002f78 <HAL_TIM_Base_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f60:	f000 f8a2 	bl	80010a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_TIM6_Init+0x64>)
 8000f72:	f002 fbd7 	bl	8003724 <HAL_TIMEx_MasterConfigSynchronization>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f7c:	f000 f894 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000248 	.word	0x20000248
 8000f8c:	40001000 	.word	0x40001000

08000f90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_USART2_UART_Init+0x58>)
 8000f96:	4a15      	ldr	r2, [pc, #84]	; (8000fec <MX_USART2_UART_Init+0x5c>)
 8000f98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <MX_USART2_UART_Init+0x58>)
 8000f9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_USART2_UART_Init+0x58>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_USART2_UART_Init+0x58>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <MX_USART2_UART_Init+0x58>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_USART2_UART_Init+0x58>)
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <MX_USART2_UART_Init+0x58>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_USART2_UART_Init+0x58>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <MX_USART2_UART_Init+0x58>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <MX_USART2_UART_Init+0x58>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_USART2_UART_Init+0x58>)
 8000fd4:	f002 fc32 	bl	800383c <HAL_UART_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fde:	f000 f863 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000294 	.word	0x20000294
 8000fec:	40004400 	.word	0x40004400

08000ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001006:	4b1d      	ldr	r3, [pc, #116]	; (800107c <MX_GPIO_Init+0x8c>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	4a1c      	ldr	r2, [pc, #112]	; (800107c <MX_GPIO_Init+0x8c>)
 800100c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001010:	6153      	str	r3, [r2, #20]
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <MX_GPIO_Init+0x8c>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <MX_GPIO_Init+0x8c>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	4a16      	ldr	r2, [pc, #88]	; (800107c <MX_GPIO_Init+0x8c>)
 8001024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001028:	6153      	str	r3, [r2, #20]
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <MX_GPIO_Init+0x8c>)
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA0 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 8001036:	2381      	movs	r3, #129	; 0x81
 8001038:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800103a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800103e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4619      	mov	r1, r3
 800104a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104e:	f000 fb95 	bl	800177c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	2006      	movs	r0, #6
 8001058:	f000 fb59 	bl	800170e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800105c:	2006      	movs	r0, #6
 800105e:	f000 fb72 	bl	8001746 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2017      	movs	r0, #23
 8001068:	f000 fb51 	bl	800170e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800106c:	2017      	movs	r0, #23
 800106e:	f000 fb6a 	bl	8001746 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001072:	bf00      	nop
 8001074:	3720      	adds	r7, #32
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000

08001080 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len){
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	b29a      	uxth	r2, r3
 8001090:	230a      	movs	r3, #10
 8001092:	68b9      	ldr	r1, [r7, #8]
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <_write+0x24>)
 8001096:	f002 fc1f 	bl	80038d8 <HAL_UART_Transmit>
  return len;
 800109a:	687b      	ldr	r3, [r7, #4]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000294 	.word	0x20000294

080010a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ac:	b672      	cpsid	i
}
 80010ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <Error_Handler+0x8>
	...

080010b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <HAL_MspInit+0x44>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	4a0e      	ldr	r2, [pc, #56]	; (80010f8 <HAL_MspInit+0x44>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6193      	str	r3, [r2, #24]
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <HAL_MspInit+0x44>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <HAL_MspInit+0x44>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <HAL_MspInit+0x44>)
 80010d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010dc:	61d3      	str	r3, [r2, #28]
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_MspInit+0x44>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000

080010fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800110c:	d10c      	bne.n	8001128 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_TIM_Base_MspInit+0x68>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	4a14      	ldr	r2, [pc, #80]	; (8001164 <HAL_TIM_Base_MspInit+0x68>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	61d3      	str	r3, [r2, #28]
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_TIM_Base_MspInit+0x68>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001126:	e018      	b.n	800115a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <HAL_TIM_Base_MspInit+0x6c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d113      	bne.n	800115a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_TIM_Base_MspInit+0x68>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <HAL_TIM_Base_MspInit+0x68>)
 8001138:	f043 0310 	orr.w	r3, r3, #16
 800113c:	61d3      	str	r3, [r2, #28]
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <HAL_TIM_Base_MspInit+0x68>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 0310 	and.w	r3, r3, #16
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	2036      	movs	r0, #54	; 0x36
 8001150:	f000 fadd 	bl	800170e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001154:	2036      	movs	r0, #54	; 0x36
 8001156:	f000 faf6 	bl	8001746 <HAL_NVIC_EnableIRQ>
}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000
 8001168:	40001000 	.word	0x40001000

0800116c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a18      	ldr	r2, [pc, #96]	; (80011ec <HAL_UART_MspInit+0x80>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d129      	bne.n	80011e2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <HAL_UART_MspInit+0x84>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <HAL_UART_MspInit+0x84>)
 8001194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001198:	61d3      	str	r3, [r2, #28]
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <HAL_UART_MspInit+0x84>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_UART_MspInit+0x84>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	4a11      	ldr	r2, [pc, #68]	; (80011f0 <HAL_UART_MspInit+0x84>)
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b0:	6153      	str	r3, [r2, #20]
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <HAL_UART_MspInit+0x84>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80011be:	f248 0304 	movw	r3, #32772	; 0x8004
 80011c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011d0:	2307      	movs	r3, #7
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011de:	f000 facd 	bl	800177c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011e2:	bf00      	nop
 80011e4:	3728      	adds	r7, #40	; 0x28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40004400 	.word	0x40004400
 80011f0:	40021000 	.word	0x40021000

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <NMI_Handler+0x4>

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001240:	f000 f946 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800124c:	2001      	movs	r0, #1
 800124e:	f000 fc07 	bl	8001a60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}

08001256 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800125a:	2080      	movs	r0, #128	; 0x80
 800125c:	f000 fc00 	bl	8001a60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <TIM6_DAC1_IRQHandler+0x10>)
 800126a:	f001 ff39 	bl	80030e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000248 	.word	0x20000248

08001278 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return 1;
 800127c:	2301      	movs	r3, #1
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <_kill>:

int _kill(int pid, int sig)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001292:	f002 fef7 	bl	8004084 <__errno>
 8001296:	4603      	mov	r3, r0
 8001298:	2216      	movs	r2, #22
 800129a:	601a      	str	r2, [r3, #0]
  return -1;
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_exit>:

void _exit (int status)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ffe7 	bl	8001288 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012ba:	e7fe      	b.n	80012ba <_exit+0x12>

080012bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	e00a      	b.n	80012e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012ce:	f3af 8000 	nop.w
 80012d2:	4601      	mov	r1, r0
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	60ba      	str	r2, [r7, #8]
 80012da:	b2ca      	uxtb	r2, r1
 80012dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	3301      	adds	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dbf0      	blt.n	80012ce <_read+0x12>
  }

  return len;
 80012ec:	687b      	ldr	r3, [r7, #4]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800131e:	605a      	str	r2, [r3, #4]
  return 0;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <_isatty>:

int _isatty(int file)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001368:	4a14      	ldr	r2, [pc, #80]	; (80013bc <_sbrk+0x5c>)
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <_sbrk+0x60>)
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d102      	bne.n	8001382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <_sbrk+0x64>)
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <_sbrk+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	429a      	cmp	r2, r3
 800138e:	d207      	bcs.n	80013a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001390:	f002 fe78 	bl	8004084 <__errno>
 8001394:	4603      	mov	r3, r0
 8001396:	220c      	movs	r2, #12
 8001398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	e009      	b.n	80013b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <_sbrk+0x64>)
 80013b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b2:	68fb      	ldr	r3, [r7, #12]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20003000 	.word	0x20003000
 80013c0:	00000400 	.word	0x00000400
 80013c4:	20000354 	.word	0x20000354
 80013c8:	20000370 	.word	0x20000370

080013cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <SystemInit+0x20>)
 80013d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <SystemInit+0x20>)
 80013d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001428 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013f4:	f7ff ffea 	bl	80013cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <LoopForever+0x6>)
  ldr r1, =_edata
 80013fa:	490d      	ldr	r1, [pc, #52]	; (8001430 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013fc:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <LoopForever+0xe>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001410:	4c0a      	ldr	r4, [pc, #40]	; (800143c <LoopForever+0x16>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800141e:	f002 fe37 	bl	8004090 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001422:	f7ff fc79 	bl	8000d18 <main>

08001426 <LoopForever>:

LoopForever:
    b LoopForever
 8001426:	e7fe      	b.n	8001426 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001428:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800142c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001430:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001434:	080072ac 	.word	0x080072ac
  ldr r2, =_sbss
 8001438:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800143c:	2000036c 	.word	0x2000036c

08001440 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001440:	e7fe      	b.n	8001440 <ADC1_2_IRQHandler>
	...

08001444 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <HAL_Init+0x28>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a07      	ldr	r2, [pc, #28]	; (800146c <HAL_Init+0x28>)
 800144e:	f043 0310 	orr.w	r3, r3, #16
 8001452:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001454:	2003      	movs	r0, #3
 8001456:	f000 f94f 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800145a:	2000      	movs	r0, #0
 800145c:	f000 f808 	bl	8001470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001460:	f7ff fe28 	bl	80010b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40022000 	.word	0x40022000

08001470 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_InitTick+0x54>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_InitTick+0x58>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001486:	fbb3 f3f1 	udiv	r3, r3, r1
 800148a:	fbb2 f3f3 	udiv	r3, r2, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f967 	bl	8001762 <HAL_SYSTICK_Config>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e00e      	b.n	80014bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d80a      	bhi.n	80014ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a4:	2200      	movs	r2, #0
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f000 f92f 	bl	800170e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b0:	4a06      	ldr	r2, [pc, #24]	; (80014cc <HAL_InitTick+0x5c>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e000      	b.n	80014bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000000 	.word	0x20000000
 80014c8:	20000008 	.word	0x20000008
 80014cc:	20000004 	.word	0x20000004

080014d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_IncTick+0x20>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x24>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <HAL_IncTick+0x24>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000008 	.word	0x20000008
 80014f4:	20000358 	.word	0x20000358

080014f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000358 	.word	0x20000358

08001510 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff ffee 	bl	80014f8 <HAL_GetTick>
 800151c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001528:	d005      	beq.n	8001536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_Delay+0x44>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001536:	bf00      	nop
 8001538:	f7ff ffde 	bl	80014f8 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	429a      	cmp	r2, r3
 8001546:	d8f7      	bhi.n	8001538 <HAL_Delay+0x28>
  {
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000008 	.word	0x20000008

08001558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001574:	4013      	ands	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158a:	4a04      	ldr	r2, [pc, #16]	; (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	60d3      	str	r3, [r2, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <__NVIC_GetPriorityGrouping+0x18>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	f003 0307 	and.w	r3, r3, #7
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	db0b      	blt.n	80015e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	f003 021f 	and.w	r2, r3, #31
 80015d4:	4907      	ldr	r1, [pc, #28]	; (80015f4 <__NVIC_EnableIRQ+0x38>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	2001      	movs	r0, #1
 80015de:	fa00 f202 	lsl.w	r2, r0, r2
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e100 	.word	0xe000e100

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	; (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	; (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
         );
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	; 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c4:	d301      	bcc.n	80016ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00f      	b.n	80016ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <SysTick_Config+0x40>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d2:	210f      	movs	r1, #15
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f7ff ff8e 	bl	80015f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <SysTick_Config+0x40>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e2:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <SysTick_Config+0x40>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff29 	bl	8001558 <__NVIC_SetPriorityGrouping>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001720:	f7ff ff3e 	bl	80015a0 <__NVIC_GetPriorityGrouping>
 8001724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff ff8e 	bl	800164c <NVIC_EncodePriority>
 8001730:	4602      	mov	r2, r0
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff5d 	bl	80015f8 <__NVIC_SetPriority>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff31 	bl	80015bc <__NVIC_EnableIRQ>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffa2 	bl	80016b4 <SysTick_Config>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800177c:	b480      	push	{r7}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178a:	e14e      	b.n	8001a2a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2101      	movs	r1, #1
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	4013      	ands	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 8140 	beq.w	8001a24 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d005      	beq.n	80017bc <HAL_GPIO_Init+0x40>
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d130      	bne.n	800181e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	2203      	movs	r2, #3
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f2:	2201      	movs	r2, #1
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	091b      	lsrs	r3, r3, #4
 8001808:	f003 0201 	and.w	r2, r3, #1
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	2b03      	cmp	r3, #3
 8001828:	d017      	beq.n	800185a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d123      	bne.n	80018ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	08da      	lsrs	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3208      	adds	r2, #8
 800186e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	220f      	movs	r2, #15
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	691a      	ldr	r2, [r3, #16]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	08da      	lsrs	r2, r3, #3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3208      	adds	r2, #8
 80018a8:	6939      	ldr	r1, [r7, #16]
 80018aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	2203      	movs	r2, #3
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0203 	and.w	r2, r3, #3
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 809a 	beq.w	8001a24 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f0:	4b55      	ldr	r3, [pc, #340]	; (8001a48 <HAL_GPIO_Init+0x2cc>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a54      	ldr	r2, [pc, #336]	; (8001a48 <HAL_GPIO_Init+0x2cc>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b52      	ldr	r3, [pc, #328]	; (8001a48 <HAL_GPIO_Init+0x2cc>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001908:	4a50      	ldr	r2, [pc, #320]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	089b      	lsrs	r3, r3, #2
 800190e:	3302      	adds	r3, #2
 8001910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	220f      	movs	r2, #15
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001932:	d013      	beq.n	800195c <HAL_GPIO_Init+0x1e0>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a46      	ldr	r2, [pc, #280]	; (8001a50 <HAL_GPIO_Init+0x2d4>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d00d      	beq.n	8001958 <HAL_GPIO_Init+0x1dc>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a45      	ldr	r2, [pc, #276]	; (8001a54 <HAL_GPIO_Init+0x2d8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d007      	beq.n	8001954 <HAL_GPIO_Init+0x1d8>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a44      	ldr	r2, [pc, #272]	; (8001a58 <HAL_GPIO_Init+0x2dc>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d101      	bne.n	8001950 <HAL_GPIO_Init+0x1d4>
 800194c:	2303      	movs	r3, #3
 800194e:	e006      	b.n	800195e <HAL_GPIO_Init+0x1e2>
 8001950:	2305      	movs	r3, #5
 8001952:	e004      	b.n	800195e <HAL_GPIO_Init+0x1e2>
 8001954:	2302      	movs	r3, #2
 8001956:	e002      	b.n	800195e <HAL_GPIO_Init+0x1e2>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <HAL_GPIO_Init+0x1e2>
 800195c:	2300      	movs	r3, #0
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	f002 0203 	and.w	r2, r2, #3
 8001964:	0092      	lsls	r2, r2, #2
 8001966:	4093      	lsls	r3, r2
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800196e:	4937      	ldr	r1, [pc, #220]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	3302      	adds	r3, #2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800197c:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <HAL_GPIO_Init+0x2e0>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019a0:	4a2e      	ldr	r2, [pc, #184]	; (8001a5c <HAL_GPIO_Init+0x2e0>)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a6:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <HAL_GPIO_Init+0x2e0>)
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019ca:	4a24      	ldr	r2, [pc, #144]	; (8001a5c <HAL_GPIO_Init+0x2e0>)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019d0:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <HAL_GPIO_Init+0x2e0>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019f4:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <HAL_GPIO_Init+0x2e0>)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <HAL_GPIO_Init+0x2e0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a1e:	4a0f      	ldr	r2, [pc, #60]	; (8001a5c <HAL_GPIO_Init+0x2e0>)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	3301      	adds	r3, #1
 8001a28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f47f aea9 	bne.w	800178c <HAL_GPIO_Init+0x10>
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	bf00      	nop
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010000 	.word	0x40010000
 8001a50:	48000400 	.word	0x48000400
 8001a54:	48000800 	.word	0x48000800
 8001a58:	48000c00 	.word	0x48000c00
 8001a5c:	40010400 	.word	0x40010400

08001a60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a6c:	695a      	ldr	r2, [r3, #20]
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d006      	beq.n	8001a84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff f8c4 	bl	8000c0c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40010400 	.word	0x40010400

08001a90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aa0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d102      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f001 b823 	b.w	8002afc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 817d 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001acc:	4bbc      	ldr	r3, [pc, #752]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d00c      	beq.n	8001af2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ad8:	4bb9      	ldr	r3, [pc, #740]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 030c 	and.w	r3, r3, #12
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d15c      	bne.n	8001b9e <HAL_RCC_OscConfig+0x10e>
 8001ae4:	4bb6      	ldr	r3, [pc, #728]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af0:	d155      	bne.n	8001b9e <HAL_RCC_OscConfig+0x10e>
 8001af2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001af6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001afe:	fa93 f3a3 	rbit	r3, r3
 8001b02:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b06:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	095b      	lsrs	r3, r3, #5
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d102      	bne.n	8001b24 <HAL_RCC_OscConfig+0x94>
 8001b1e:	4ba8      	ldr	r3, [pc, #672]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	e015      	b.n	8001b50 <HAL_RCC_OscConfig+0xc0>
 8001b24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b28:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b3c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b40:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001b4c:	4b9c      	ldr	r3, [pc, #624]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b54:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001b58:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b5c:	fa92 f2a2 	rbit	r2, r2
 8001b60:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001b64:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001b68:	fab2 f282 	clz	r2, r2
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	f042 0220 	orr.w	r2, r2, #32
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	f002 021f 	and.w	r2, r2, #31
 8001b78:	2101      	movs	r1, #1
 8001b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 811f 	beq.w	8001dc4 <HAL_RCC_OscConfig+0x334>
 8001b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f040 8116 	bne.w	8001dc4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	f000 bfaf 	b.w	8002afc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bae:	d106      	bne.n	8001bbe <HAL_RCC_OscConfig+0x12e>
 8001bb0:	4b83      	ldr	r3, [pc, #524]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a82      	ldr	r2, [pc, #520]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	e036      	b.n	8001c2c <HAL_RCC_OscConfig+0x19c>
 8001bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x158>
 8001bce:	4b7c      	ldr	r3, [pc, #496]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a7b      	ldr	r2, [pc, #492]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b79      	ldr	r3, [pc, #484]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a78      	ldr	r2, [pc, #480]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001be0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e021      	b.n	8001c2c <HAL_RCC_OscConfig+0x19c>
 8001be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x184>
 8001bfa:	4b71      	ldr	r3, [pc, #452]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a70      	ldr	r2, [pc, #448]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	4b6e      	ldr	r3, [pc, #440]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a6d      	ldr	r2, [pc, #436]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e00b      	b.n	8001c2c <HAL_RCC_OscConfig+0x19c>
 8001c14:	4b6a      	ldr	r3, [pc, #424]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a69      	ldr	r2, [pc, #420]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b67      	ldr	r3, [pc, #412]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a66      	ldr	r2, [pc, #408]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c2c:	4b64      	ldr	r3, [pc, #400]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	f023 020f 	bic.w	r2, r3, #15
 8001c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	495f      	ldr	r1, [pc, #380]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d059      	beq.n	8001d0a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7ff fc4f 	bl	80014f8 <HAL_GetTick>
 8001c5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	e00a      	b.n	8001c76 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c60:	f7ff fc4a 	bl	80014f8 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b64      	cmp	r3, #100	; 0x64
 8001c6e:	d902      	bls.n	8001c76 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	f000 bf43 	b.w	8002afc <HAL_RCC_OscConfig+0x106c>
 8001c76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c7a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001c8a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	095b      	lsrs	r3, r3, #5
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d102      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x218>
 8001ca2:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	e015      	b.n	8001cd4 <HAL_RCC_OscConfig+0x244>
 8001ca8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cac:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001cbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cc0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001cc4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001cd0:	4b3b      	ldr	r3, [pc, #236]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cd8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001cdc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ce0:	fa92 f2a2 	rbit	r2, r2
 8001ce4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001ce8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001cec:	fab2 f282 	clz	r2, r2
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	f042 0220 	orr.w	r2, r2, #32
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	f002 021f 	and.w	r2, r2, #31
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0ab      	beq.n	8001c60 <HAL_RCC_OscConfig+0x1d0>
 8001d08:	e05d      	b.n	8001dc6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0a:	f7ff fbf5 	bl	80014f8 <HAL_GetTick>
 8001d0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d12:	e00a      	b.n	8001d2a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff fbf0 	bl	80014f8 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b64      	cmp	r3, #100	; 0x64
 8001d22:	d902      	bls.n	8001d2a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	f000 bee9 	b.w	8002afc <HAL_RCC_OscConfig+0x106c>
 8001d2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d2e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001d3e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d42:	fab3 f383 	clz	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	095b      	lsrs	r3, r3, #5
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d102      	bne.n	8001d5c <HAL_RCC_OscConfig+0x2cc>
 8001d56:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	e015      	b.n	8001d88 <HAL_RCC_OscConfig+0x2f8>
 8001d5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d60:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001d68:	fa93 f3a3 	rbit	r3, r3
 8001d6c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d74:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d78:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001d7c:	fa93 f3a3 	rbit	r3, r3
 8001d80:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001d84:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <HAL_RCC_OscConfig+0x330>)
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d8c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001d90:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d94:	fa92 f2a2 	rbit	r2, r2
 8001d98:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001d9c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001da0:	fab2 f282 	clz	r2, r2
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	f042 0220 	orr.w	r2, r2, #32
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	f002 021f 	and.w	r2, r2, #31
 8001db0:	2101      	movs	r1, #1
 8001db2:	fa01 f202 	lsl.w	r2, r1, r2
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1ab      	bne.n	8001d14 <HAL_RCC_OscConfig+0x284>
 8001dbc:	e003      	b.n	8001dc6 <HAL_RCC_OscConfig+0x336>
 8001dbe:	bf00      	nop
 8001dc0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 817d 	beq.w	80020d6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ddc:	4ba6      	ldr	r3, [pc, #664]	; (8002078 <HAL_RCC_OscConfig+0x5e8>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00b      	beq.n	8001e00 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001de8:	4ba3      	ldr	r3, [pc, #652]	; (8002078 <HAL_RCC_OscConfig+0x5e8>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 030c 	and.w	r3, r3, #12
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d172      	bne.n	8001eda <HAL_RCC_OscConfig+0x44a>
 8001df4:	4ba0      	ldr	r3, [pc, #640]	; (8002078 <HAL_RCC_OscConfig+0x5e8>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d16c      	bne.n	8001eda <HAL_RCC_OscConfig+0x44a>
 8001e00:	2302      	movs	r3, #2
 8001e02:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001e12:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e16:	fab3 f383 	clz	r3, r3
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	095b      	lsrs	r3, r3, #5
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d102      	bne.n	8001e30 <HAL_RCC_OscConfig+0x3a0>
 8001e2a:	4b93      	ldr	r3, [pc, #588]	; (8002078 <HAL_RCC_OscConfig+0x5e8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	e013      	b.n	8001e58 <HAL_RCC_OscConfig+0x3c8>
 8001e30:	2302      	movs	r3, #2
 8001e32:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001e3a:	fa93 f3a3 	rbit	r3, r3
 8001e3e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e42:	2302      	movs	r3, #2
 8001e44:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e48:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001e54:	4b88      	ldr	r3, [pc, #544]	; (8002078 <HAL_RCC_OscConfig+0x5e8>)
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	2202      	movs	r2, #2
 8001e5a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001e5e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e62:	fa92 f2a2 	rbit	r2, r2
 8001e66:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001e6a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001e6e:	fab2 f282 	clz	r2, r2
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	f042 0220 	orr.w	r2, r2, #32
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	f002 021f 	and.w	r2, r2, #31
 8001e7e:	2101      	movs	r1, #1
 8001e80:	fa01 f202 	lsl.w	r2, r1, r2
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00a      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x410>
 8001e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d002      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	f000 be2e 	b.w	8002afc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea0:	4b75      	ldr	r3, [pc, #468]	; (8002078 <HAL_RCC_OscConfig+0x5e8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	21f8      	movs	r1, #248	; 0xf8
 8001eb6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ebe:	fa91 f1a1 	rbit	r1, r1
 8001ec2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001ec6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001eca:	fab1 f181 	clz	r1, r1
 8001ece:	b2c9      	uxtb	r1, r1
 8001ed0:	408b      	lsls	r3, r1
 8001ed2:	4969      	ldr	r1, [pc, #420]	; (8002078 <HAL_RCC_OscConfig+0x5e8>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed8:	e0fd      	b.n	80020d6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ede:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 8088 	beq.w	8001ffc <HAL_RCC_OscConfig+0x56c>
 8001eec:	2301      	movs	r3, #1
 8001eee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001efe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	461a      	mov	r2, r3
 8001f14:	2301      	movs	r3, #1
 8001f16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7ff faee 	bl	80014f8 <HAL_GetTick>
 8001f1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f20:	e00a      	b.n	8001f38 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f22:	f7ff fae9 	bl	80014f8 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d902      	bls.n	8001f38 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	f000 bde2 	b.w	8002afc <HAL_RCC_OscConfig+0x106c>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001f42:	fa93 f3a3 	rbit	r3, r3
 8001f46:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001f4a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	095b      	lsrs	r3, r3, #5
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d102      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4d8>
 8001f62:	4b45      	ldr	r3, [pc, #276]	; (8002078 <HAL_RCC_OscConfig+0x5e8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	e013      	b.n	8001f90 <HAL_RCC_OscConfig+0x500>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f80:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001f84:	fa93 f3a3 	rbit	r3, r3
 8001f88:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001f8c:	4b3a      	ldr	r3, [pc, #232]	; (8002078 <HAL_RCC_OscConfig+0x5e8>)
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	2202      	movs	r2, #2
 8001f92:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001f96:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f9a:	fa92 f2a2 	rbit	r2, r2
 8001f9e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001fa2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001fa6:	fab2 f282 	clz	r2, r2
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	f042 0220 	orr.w	r2, r2, #32
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	f002 021f 	and.w	r2, r2, #31
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0af      	beq.n	8001f22 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc2:	4b2d      	ldr	r3, [pc, #180]	; (8002078 <HAL_RCC_OscConfig+0x5e8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	21f8      	movs	r1, #248	; 0xf8
 8001fd8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001fe0:	fa91 f1a1 	rbit	r1, r1
 8001fe4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001fe8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001fec:	fab1 f181 	clz	r1, r1
 8001ff0:	b2c9      	uxtb	r1, r1
 8001ff2:	408b      	lsls	r3, r1
 8001ff4:	4920      	ldr	r1, [pc, #128]	; (8002078 <HAL_RCC_OscConfig+0x5e8>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]
 8001ffa:	e06c      	b.n	80020d6 <HAL_RCC_OscConfig+0x646>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002006:	fa93 f3a3 	rbit	r3, r3
 800200a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800200e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800201c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	461a      	mov	r2, r3
 8002024:	2300      	movs	r3, #0
 8002026:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7ff fa66 	bl	80014f8 <HAL_GetTick>
 800202c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002030:	e00a      	b.n	8002048 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002032:	f7ff fa61 	bl	80014f8 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d902      	bls.n	8002048 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	f000 bd5a 	b.w	8002afc <HAL_RCC_OscConfig+0x106c>
 8002048:	2302      	movs	r3, #2
 800204a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002052:	fa93 f3a3 	rbit	r3, r3
 8002056:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800205a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	095b      	lsrs	r3, r3, #5
 8002066:	b2db      	uxtb	r3, r3
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b01      	cmp	r3, #1
 8002070:	d104      	bne.n	800207c <HAL_RCC_OscConfig+0x5ec>
 8002072:	4b01      	ldr	r3, [pc, #4]	; (8002078 <HAL_RCC_OscConfig+0x5e8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	e015      	b.n	80020a4 <HAL_RCC_OscConfig+0x614>
 8002078:	40021000 	.word	0x40021000
 800207c:	2302      	movs	r3, #2
 800207e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800208e:	2302      	movs	r3, #2
 8002090:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002094:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002098:	fa93 f3a3 	rbit	r3, r3
 800209c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80020a0:	4bc8      	ldr	r3, [pc, #800]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	2202      	movs	r2, #2
 80020a6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80020aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80020ae:	fa92 f2a2 	rbit	r2, r2
 80020b2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80020b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80020ba:	fab2 f282 	clz	r2, r2
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	f042 0220 	orr.w	r2, r2, #32
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	f002 021f 	and.w	r2, r2, #31
 80020ca:	2101      	movs	r1, #1
 80020cc:	fa01 f202 	lsl.w	r2, r1, r2
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1ad      	bne.n	8002032 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 8110 	beq.w	800230c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d079      	beq.n	80021f0 <HAL_RCC_OscConfig+0x760>
 80020fc:	2301      	movs	r3, #1
 80020fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002102:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002106:	fa93 f3a3 	rbit	r3, r3
 800210a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800210e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002112:	fab3 f383 	clz	r3, r3
 8002116:	b2db      	uxtb	r3, r3
 8002118:	461a      	mov	r2, r3
 800211a:	4bab      	ldr	r3, [pc, #684]	; (80023c8 <HAL_RCC_OscConfig+0x938>)
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	461a      	mov	r2, r3
 8002122:	2301      	movs	r3, #1
 8002124:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002126:	f7ff f9e7 	bl	80014f8 <HAL_GetTick>
 800212a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212e:	e00a      	b.n	8002146 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002130:	f7ff f9e2 	bl	80014f8 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d902      	bls.n	8002146 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	f000 bcdb 	b.w	8002afc <HAL_RCC_OscConfig+0x106c>
 8002146:	2302      	movs	r3, #2
 8002148:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002160:	2202      	movs	r2, #2
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002168:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	fa93 f2a3 	rbit	r2, r3
 8002172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002184:	2202      	movs	r2, #2
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	fa93 f2a3 	rbit	r2, r3
 8002196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800219e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a0:	4b88      	ldr	r3, [pc, #544]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 80021a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021ac:	2102      	movs	r1, #2
 80021ae:	6019      	str	r1, [r3, #0]
 80021b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	fa93 f1a3 	rbit	r1, r3
 80021be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80021c6:	6019      	str	r1, [r3, #0]
  return result;
 80021c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	f003 031f 	and.w	r3, r3, #31
 80021e2:	2101      	movs	r1, #1
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0a0      	beq.n	8002130 <HAL_RCC_OscConfig+0x6a0>
 80021ee:	e08d      	b.n	800230c <HAL_RCC_OscConfig+0x87c>
 80021f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021f8:	2201      	movs	r2, #1
 80021fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002200:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	fa93 f2a3 	rbit	r2, r3
 800220a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002212:	601a      	str	r2, [r3, #0]
  return result;
 8002214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002218:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800221c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	461a      	mov	r2, r3
 8002226:	4b68      	ldr	r3, [pc, #416]	; (80023c8 <HAL_RCC_OscConfig+0x938>)
 8002228:	4413      	add	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	461a      	mov	r2, r3
 800222e:	2300      	movs	r3, #0
 8002230:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002232:	f7ff f961 	bl	80014f8 <HAL_GetTick>
 8002236:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223a:	e00a      	b.n	8002252 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800223c:	f7ff f95c 	bl	80014f8 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d902      	bls.n	8002252 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	f000 bc55 	b.w	8002afc <HAL_RCC_OscConfig+0x106c>
 8002252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002256:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800225a:	2202      	movs	r2, #2
 800225c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002262:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	fa93 f2a3 	rbit	r2, r3
 800226c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002270:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800227e:	2202      	movs	r2, #2
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002286:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	fa93 f2a3 	rbit	r2, r3
 8002290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002294:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80022a2:	2202      	movs	r2, #2
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f2a3 	rbit	r2, r3
 80022b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80022bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022be:	4b41      	ldr	r3, [pc, #260]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 80022c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80022ca:	2102      	movs	r1, #2
 80022cc:	6019      	str	r1, [r3, #0]
 80022ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	fa93 f1a3 	rbit	r1, r3
 80022dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80022e4:	6019      	str	r1, [r3, #0]
  return result;
 80022e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ea:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	fab3 f383 	clz	r3, r3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	2101      	movs	r1, #1
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d197      	bne.n	800223c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800230c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002310:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 81a1 	beq.w	8002664 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002322:	2300      	movs	r3, #0
 8002324:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002328:	4b26      	ldr	r3, [pc, #152]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d116      	bne.n	8002362 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002334:	4b23      	ldr	r3, [pc, #140]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	4a22      	ldr	r2, [pc, #136]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 800233a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233e:	61d3      	str	r3, [r2, #28]
 8002340:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002356:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800235a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800235c:	2301      	movs	r3, #1
 800235e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002362:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <HAL_RCC_OscConfig+0x93c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236a:	2b00      	cmp	r3, #0
 800236c:	d11a      	bne.n	80023a4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236e:	4b17      	ldr	r3, [pc, #92]	; (80023cc <HAL_RCC_OscConfig+0x93c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a16      	ldr	r2, [pc, #88]	; (80023cc <HAL_RCC_OscConfig+0x93c>)
 8002374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002378:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237a:	f7ff f8bd 	bl	80014f8 <HAL_GetTick>
 800237e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002382:	e009      	b.n	8002398 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002384:	f7ff f8b8 	bl	80014f8 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b64      	cmp	r3, #100	; 0x64
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e3b1      	b.n	8002afc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <HAL_RCC_OscConfig+0x93c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0ef      	beq.n	8002384 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d10d      	bne.n	80023d0 <HAL_RCC_OscConfig+0x940>
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4a02      	ldr	r2, [pc, #8]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6213      	str	r3, [r2, #32]
 80023c0:	e03c      	b.n	800243c <HAL_RCC_OscConfig+0x9ac>
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	10908120 	.word	0x10908120
 80023cc:	40007000 	.word	0x40007000
 80023d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10c      	bne.n	80023fa <HAL_RCC_OscConfig+0x96a>
 80023e0:	4bc1      	ldr	r3, [pc, #772]	; (80026e8 <HAL_RCC_OscConfig+0xc58>)
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4ac0      	ldr	r2, [pc, #768]	; (80026e8 <HAL_RCC_OscConfig+0xc58>)
 80023e6:	f023 0301 	bic.w	r3, r3, #1
 80023ea:	6213      	str	r3, [r2, #32]
 80023ec:	4bbe      	ldr	r3, [pc, #760]	; (80026e8 <HAL_RCC_OscConfig+0xc58>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4abd      	ldr	r2, [pc, #756]	; (80026e8 <HAL_RCC_OscConfig+0xc58>)
 80023f2:	f023 0304 	bic.w	r3, r3, #4
 80023f6:	6213      	str	r3, [r2, #32]
 80023f8:	e020      	b.n	800243c <HAL_RCC_OscConfig+0x9ac>
 80023fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2b05      	cmp	r3, #5
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x994>
 800240a:	4bb7      	ldr	r3, [pc, #732]	; (80026e8 <HAL_RCC_OscConfig+0xc58>)
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4ab6      	ldr	r2, [pc, #728]	; (80026e8 <HAL_RCC_OscConfig+0xc58>)
 8002410:	f043 0304 	orr.w	r3, r3, #4
 8002414:	6213      	str	r3, [r2, #32]
 8002416:	4bb4      	ldr	r3, [pc, #720]	; (80026e8 <HAL_RCC_OscConfig+0xc58>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	4ab3      	ldr	r2, [pc, #716]	; (80026e8 <HAL_RCC_OscConfig+0xc58>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6213      	str	r3, [r2, #32]
 8002422:	e00b      	b.n	800243c <HAL_RCC_OscConfig+0x9ac>
 8002424:	4bb0      	ldr	r3, [pc, #704]	; (80026e8 <HAL_RCC_OscConfig+0xc58>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	4aaf      	ldr	r2, [pc, #700]	; (80026e8 <HAL_RCC_OscConfig+0xc58>)
 800242a:	f023 0301 	bic.w	r3, r3, #1
 800242e:	6213      	str	r3, [r2, #32]
 8002430:	4bad      	ldr	r3, [pc, #692]	; (80026e8 <HAL_RCC_OscConfig+0xc58>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	4aac      	ldr	r2, [pc, #688]	; (80026e8 <HAL_RCC_OscConfig+0xc58>)
 8002436:	f023 0304 	bic.w	r3, r3, #4
 800243a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800243c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002440:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 8081 	beq.w	8002550 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244e:	f7ff f853 	bl	80014f8 <HAL_GetTick>
 8002452:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002456:	e00b      	b.n	8002470 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002458:	f7ff f84e 	bl	80014f8 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	f241 3288 	movw	r2, #5000	; 0x1388
 8002468:	4293      	cmp	r3, r2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e345      	b.n	8002afc <HAL_RCC_OscConfig+0x106c>
 8002470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002474:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002478:	2202      	movs	r2, #2
 800247a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002480:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	fa93 f2a3 	rbit	r2, r3
 800248a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002498:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800249c:	2202      	movs	r2, #2
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	fa93 f2a3 	rbit	r2, r3
 80024ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80024b6:	601a      	str	r2, [r3, #0]
  return result;
 80024b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024bc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80024c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	095b      	lsrs	r3, r3, #5
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f043 0302 	orr.w	r3, r3, #2
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d102      	bne.n	80024dc <HAL_RCC_OscConfig+0xa4c>
 80024d6:	4b84      	ldr	r3, [pc, #528]	; (80026e8 <HAL_RCC_OscConfig+0xc58>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	e013      	b.n	8002504 <HAL_RCC_OscConfig+0xa74>
 80024dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80024e4:	2202      	movs	r2, #2
 80024e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	fa93 f2a3 	rbit	r2, r3
 80024f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	4b79      	ldr	r3, [pc, #484]	; (80026e8 <HAL_RCC_OscConfig+0xc58>)
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002508:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800250c:	2102      	movs	r1, #2
 800250e:	6011      	str	r1, [r2, #0]
 8002510:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002514:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	fa92 f1a2 	rbit	r1, r2
 800251e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002522:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002526:	6011      	str	r1, [r2, #0]
  return result;
 8002528:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800252c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002530:	6812      	ldr	r2, [r2, #0]
 8002532:	fab2 f282 	clz	r2, r2
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	f002 021f 	and.w	r2, r2, #31
 8002542:	2101      	movs	r1, #1
 8002544:	fa01 f202 	lsl.w	r2, r1, r2
 8002548:	4013      	ands	r3, r2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d084      	beq.n	8002458 <HAL_RCC_OscConfig+0x9c8>
 800254e:	e07f      	b.n	8002650 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002550:	f7fe ffd2 	bl	80014f8 <HAL_GetTick>
 8002554:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002558:	e00b      	b.n	8002572 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800255a:	f7fe ffcd 	bl	80014f8 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	f241 3288 	movw	r2, #5000	; 0x1388
 800256a:	4293      	cmp	r3, r2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e2c4      	b.n	8002afc <HAL_RCC_OscConfig+0x106c>
 8002572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002576:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800257a:	2202      	movs	r2, #2
 800257c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002582:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	fa93 f2a3 	rbit	r2, r3
 800258c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002590:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800259e:	2202      	movs	r2, #2
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	fa93 f2a3 	rbit	r2, r3
 80025b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80025b8:	601a      	str	r2, [r3, #0]
  return result;
 80025ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025be:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80025c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	f043 0302 	orr.w	r3, r3, #2
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d102      	bne.n	80025de <HAL_RCC_OscConfig+0xb4e>
 80025d8:	4b43      	ldr	r3, [pc, #268]	; (80026e8 <HAL_RCC_OscConfig+0xc58>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	e013      	b.n	8002606 <HAL_RCC_OscConfig+0xb76>
 80025de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80025e6:	2202      	movs	r2, #2
 80025e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	fa93 f2a3 	rbit	r2, r3
 80025f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	4b39      	ldr	r3, [pc, #228]	; (80026e8 <HAL_RCC_OscConfig+0xc58>)
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800260a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800260e:	2102      	movs	r1, #2
 8002610:	6011      	str	r1, [r2, #0]
 8002612:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002616:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	fa92 f1a2 	rbit	r1, r2
 8002620:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002624:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002628:	6011      	str	r1, [r2, #0]
  return result;
 800262a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800262e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	fab2 f282 	clz	r2, r2
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	f002 021f 	and.w	r2, r2, #31
 8002644:	2101      	movs	r1, #1
 8002646:	fa01 f202 	lsl.w	r2, r1, r2
 800264a:	4013      	ands	r3, r2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d184      	bne.n	800255a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002650:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002654:	2b01      	cmp	r3, #1
 8002656:	d105      	bne.n	8002664 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002658:	4b23      	ldr	r3, [pc, #140]	; (80026e8 <HAL_RCC_OscConfig+0xc58>)
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	4a22      	ldr	r2, [pc, #136]	; (80026e8 <HAL_RCC_OscConfig+0xc58>)
 800265e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002662:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002668:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8242 	beq.w	8002afa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002676:	4b1c      	ldr	r3, [pc, #112]	; (80026e8 <HAL_RCC_OscConfig+0xc58>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b08      	cmp	r3, #8
 8002680:	f000 8213 	beq.w	8002aaa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002688:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	2b02      	cmp	r3, #2
 8002692:	f040 8162 	bne.w	800295a <HAL_RCC_OscConfig+0xeca>
 8002696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800269e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	fa93 f2a3 	rbit	r2, r3
 80026b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80026ba:	601a      	str	r2, [r3, #0]
  return result;
 80026bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80026c4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c6:	fab3 f383 	clz	r3, r3
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	461a      	mov	r2, r3
 80026d8:	2300      	movs	r3, #0
 80026da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7fe ff0c 	bl	80014f8 <HAL_GetTick>
 80026e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e4:	e00c      	b.n	8002700 <HAL_RCC_OscConfig+0xc70>
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ec:	f7fe ff04 	bl	80014f8 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e1fd      	b.n	8002afc <HAL_RCC_OscConfig+0x106c>
 8002700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002704:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002708:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800270c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002712:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	fa93 f2a3 	rbit	r2, r3
 800271c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002720:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002724:	601a      	str	r2, [r3, #0]
  return result;
 8002726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800272e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002730:	fab3 f383 	clz	r3, r3
 8002734:	b2db      	uxtb	r3, r3
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b01      	cmp	r3, #1
 8002742:	d102      	bne.n	800274a <HAL_RCC_OscConfig+0xcba>
 8002744:	4bb0      	ldr	r3, [pc, #704]	; (8002a08 <HAL_RCC_OscConfig+0xf78>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	e027      	b.n	800279a <HAL_RCC_OscConfig+0xd0a>
 800274a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002752:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002756:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	fa93 f2a3 	rbit	r2, r3
 8002766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002774:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002778:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002782:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	fa93 f2a3 	rbit	r2, r3
 800278c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002790:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	4b9c      	ldr	r3, [pc, #624]	; (8002a08 <HAL_RCC_OscConfig+0xf78>)
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800279e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80027a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027a6:	6011      	str	r1, [r2, #0]
 80027a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ac:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	fa92 f1a2 	rbit	r1, r2
 80027b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ba:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80027be:	6011      	str	r1, [r2, #0]
  return result;
 80027c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027c4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80027c8:	6812      	ldr	r2, [r2, #0]
 80027ca:	fab2 f282 	clz	r2, r2
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	f042 0220 	orr.w	r2, r2, #32
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	f002 021f 	and.w	r2, r2, #31
 80027da:	2101      	movs	r1, #1
 80027dc:	fa01 f202 	lsl.w	r2, r1, r2
 80027e0:	4013      	ands	r3, r2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d182      	bne.n	80026ec <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027e6:	4b88      	ldr	r3, [pc, #544]	; (8002a08 <HAL_RCC_OscConfig+0xf78>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80027fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	430b      	orrs	r3, r1
 8002808:	497f      	ldr	r1, [pc, #508]	; (8002a08 <HAL_RCC_OscConfig+0xf78>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]
 800280e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002812:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002816:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800281a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002820:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	fa93 f2a3 	rbit	r2, r3
 800282a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002832:	601a      	str	r2, [r3, #0]
  return result;
 8002834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002838:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800283c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002848:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	461a      	mov	r2, r3
 8002850:	2301      	movs	r3, #1
 8002852:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe fe50 	bl	80014f8 <HAL_GetTick>
 8002858:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800285c:	e009      	b.n	8002872 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe fe4b 	bl	80014f8 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e144      	b.n	8002afc <HAL_RCC_OscConfig+0x106c>
 8002872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002876:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800287a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800287e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002884:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	fa93 f2a3 	rbit	r2, r3
 800288e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002892:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002896:	601a      	str	r2, [r3, #0]
  return result;
 8002898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80028a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d102      	bne.n	80028bc <HAL_RCC_OscConfig+0xe2c>
 80028b6:	4b54      	ldr	r3, [pc, #336]	; (8002a08 <HAL_RCC_OscConfig+0xf78>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	e027      	b.n	800290c <HAL_RCC_OscConfig+0xe7c>
 80028bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80028c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ce:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	fa93 f2a3 	rbit	r2, r3
 80028d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028dc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80028ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	fa93 f2a3 	rbit	r2, r3
 80028fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002902:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	4b3f      	ldr	r3, [pc, #252]	; (8002a08 <HAL_RCC_OscConfig+0xf78>)
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002910:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002914:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002918:	6011      	str	r1, [r2, #0]
 800291a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800291e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	fa92 f1a2 	rbit	r1, r2
 8002928:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800292c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002930:	6011      	str	r1, [r2, #0]
  return result;
 8002932:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002936:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	fab2 f282 	clz	r2, r2
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	f042 0220 	orr.w	r2, r2, #32
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	f002 021f 	and.w	r2, r2, #31
 800294c:	2101      	movs	r1, #1
 800294e:	fa01 f202 	lsl.w	r2, r1, r2
 8002952:	4013      	ands	r3, r2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d082      	beq.n	800285e <HAL_RCC_OscConfig+0xdce>
 8002958:	e0cf      	b.n	8002afa <HAL_RCC_OscConfig+0x106a>
 800295a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002962:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002966:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	fa93 f2a3 	rbit	r2, r3
 8002976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800297e:	601a      	str	r2, [r3, #0]
  return result;
 8002980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002984:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002988:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298a:	fab3 f383 	clz	r3, r3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002994:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	461a      	mov	r2, r3
 800299c:	2300      	movs	r3, #0
 800299e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7fe fdaa 	bl	80014f8 <HAL_GetTick>
 80029a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a8:	e009      	b.n	80029be <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029aa:	f7fe fda5 	bl	80014f8 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e09e      	b.n	8002afc <HAL_RCC_OscConfig+0x106c>
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80029c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	fa93 f2a3 	rbit	r2, r3
 80029da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029de:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80029e2:	601a      	str	r2, [r3, #0]
  return result;
 80029e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80029ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ee:	fab3 f383 	clz	r3, r3
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	095b      	lsrs	r3, r3, #5
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d104      	bne.n	8002a0c <HAL_RCC_OscConfig+0xf7c>
 8002a02:	4b01      	ldr	r3, [pc, #4]	; (8002a08 <HAL_RCC_OscConfig+0xf78>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	e029      	b.n	8002a5c <HAL_RCC_OscConfig+0xfcc>
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a10:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	fa93 f2a3 	rbit	r2, r3
 8002a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a36:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a44:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	fa93 f2a3 	rbit	r2, r3
 8002a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a52:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <HAL_RCC_OscConfig+0x1078>)
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a60:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a68:	6011      	str	r1, [r2, #0]
 8002a6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a6e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	fa92 f1a2 	rbit	r1, r2
 8002a78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a7c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a80:	6011      	str	r1, [r2, #0]
  return result;
 8002a82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a86:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	fab2 f282 	clz	r2, r2
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	f042 0220 	orr.w	r2, r2, #32
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	f002 021f 	and.w	r2, r2, #31
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d180      	bne.n	80029aa <HAL_RCC_OscConfig+0xf1a>
 8002aa8:	e027      	b.n	8002afa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e01e      	b.n	8002afc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002abe:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <HAL_RCC_OscConfig+0x1078>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ac6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002aca:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d10b      	bne.n	8002af6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002ade:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ae2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d001      	beq.n	8002afa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000

08002b0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b09e      	sub	sp, #120	; 0x78
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e162      	b.n	8002dea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b24:	4b90      	ldr	r3, [pc, #576]	; (8002d68 <HAL_RCC_ClockConfig+0x25c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d910      	bls.n	8002b54 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b32:	4b8d      	ldr	r3, [pc, #564]	; (8002d68 <HAL_RCC_ClockConfig+0x25c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 0207 	bic.w	r2, r3, #7
 8002b3a:	498b      	ldr	r1, [pc, #556]	; (8002d68 <HAL_RCC_ClockConfig+0x25c>)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b42:	4b89      	ldr	r3, [pc, #548]	; (8002d68 <HAL_RCC_ClockConfig+0x25c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e14a      	b.n	8002dea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b60:	4b82      	ldr	r3, [pc, #520]	; (8002d6c <HAL_RCC_ClockConfig+0x260>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	497f      	ldr	r1, [pc, #508]	; (8002d6c <HAL_RCC_ClockConfig+0x260>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 80dc 	beq.w	8002d38 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d13c      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xf6>
 8002b88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b8c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b98:	fab3 f383 	clz	r3, r3
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d102      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0xa6>
 8002bac:	4b6f      	ldr	r3, [pc, #444]	; (8002d6c <HAL_RCC_ClockConfig+0x260>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	e00f      	b.n	8002bd2 <HAL_RCC_ClockConfig+0xc6>
 8002bb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bb6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bba:	fa93 f3a3 	rbit	r3, r3
 8002bbe:	667b      	str	r3, [r7, #100]	; 0x64
 8002bc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bc4:	663b      	str	r3, [r7, #96]	; 0x60
 8002bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bce:	4b67      	ldr	r3, [pc, #412]	; (8002d6c <HAL_RCC_ClockConfig+0x260>)
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bd6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bda:	fa92 f2a2 	rbit	r2, r2
 8002bde:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002be0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002be2:	fab2 f282 	clz	r2, r2
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	f042 0220 	orr.w	r2, r2, #32
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	f002 021f 	and.w	r2, r2, #31
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d17b      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e0f3      	b.n	8002dea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d13c      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x178>
 8002c0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c12:	fa93 f3a3 	rbit	r3, r3
 8002c16:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d102      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x128>
 8002c2e:	4b4f      	ldr	r3, [pc, #316]	; (8002d6c <HAL_RCC_ClockConfig+0x260>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	e00f      	b.n	8002c54 <HAL_RCC_ClockConfig+0x148>
 8002c34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c38:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c3c:	fa93 f3a3 	rbit	r3, r3
 8002c40:	647b      	str	r3, [r7, #68]	; 0x44
 8002c42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c46:	643b      	str	r3, [r7, #64]	; 0x40
 8002c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c4a:	fa93 f3a3 	rbit	r3, r3
 8002c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c50:	4b46      	ldr	r3, [pc, #280]	; (8002d6c <HAL_RCC_ClockConfig+0x260>)
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c58:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c5c:	fa92 f2a2 	rbit	r2, r2
 8002c60:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c64:	fab2 f282 	clz	r2, r2
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	f042 0220 	orr.w	r2, r2, #32
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	f002 021f 	and.w	r2, r2, #31
 8002c74:	2101      	movs	r1, #1
 8002c76:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d13a      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0b2      	b.n	8002dea <HAL_RCC_ClockConfig+0x2de>
 8002c84:	2302      	movs	r3, #2
 8002c86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	095b      	lsrs	r3, r3, #5
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d102      	bne.n	8002cac <HAL_RCC_ClockConfig+0x1a0>
 8002ca6:	4b31      	ldr	r3, [pc, #196]	; (8002d6c <HAL_RCC_ClockConfig+0x260>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	e00d      	b.n	8002cc8 <HAL_RCC_ClockConfig+0x1bc>
 8002cac:	2302      	movs	r3, #2
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb2:	fa93 f3a3 	rbit	r3, r3
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb8:	2302      	movs	r3, #2
 8002cba:	623b      	str	r3, [r7, #32]
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	fa93 f3a3 	rbit	r3, r3
 8002cc2:	61fb      	str	r3, [r7, #28]
 8002cc4:	4b29      	ldr	r3, [pc, #164]	; (8002d6c <HAL_RCC_ClockConfig+0x260>)
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	2202      	movs	r2, #2
 8002cca:	61ba      	str	r2, [r7, #24]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	fa92 f2a2 	rbit	r2, r2
 8002cd2:	617a      	str	r2, [r7, #20]
  return result;
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	fab2 f282 	clz	r2, r2
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	f042 0220 	orr.w	r2, r2, #32
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	f002 021f 	and.w	r2, r2, #31
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e079      	b.n	8002dea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <HAL_RCC_ClockConfig+0x260>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f023 0203 	bic.w	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	491a      	ldr	r1, [pc, #104]	; (8002d6c <HAL_RCC_ClockConfig+0x260>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d08:	f7fe fbf6 	bl	80014f8 <HAL_GetTick>
 8002d0c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0e:	e00a      	b.n	8002d26 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d10:	f7fe fbf2 	bl	80014f8 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e061      	b.n	8002dea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <HAL_RCC_ClockConfig+0x260>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 020c 	and.w	r2, r3, #12
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d1eb      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_RCC_ClockConfig+0x25c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d214      	bcs.n	8002d70 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <HAL_RCC_ClockConfig+0x25c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 0207 	bic.w	r2, r3, #7
 8002d4e:	4906      	ldr	r1, [pc, #24]	; (8002d68 <HAL_RCC_ClockConfig+0x25c>)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <HAL_RCC_ClockConfig+0x25c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e040      	b.n	8002dea <HAL_RCC_ClockConfig+0x2de>
 8002d68:	40022000 	.word	0x40022000
 8002d6c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d7c:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <HAL_RCC_ClockConfig+0x2e8>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	491a      	ldr	r1, [pc, #104]	; (8002df4 <HAL_RCC_ClockConfig+0x2e8>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d009      	beq.n	8002dae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d9a:	4b16      	ldr	r3, [pc, #88]	; (8002df4 <HAL_RCC_ClockConfig+0x2e8>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4912      	ldr	r1, [pc, #72]	; (8002df4 <HAL_RCC_ClockConfig+0x2e8>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002dae:	f000 f829 	bl	8002e04 <HAL_RCC_GetSysClockFreq>
 8002db2:	4601      	mov	r1, r0
 8002db4:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <HAL_RCC_ClockConfig+0x2e8>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dbc:	22f0      	movs	r2, #240	; 0xf0
 8002dbe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	fa92 f2a2 	rbit	r2, r2
 8002dc6:	60fa      	str	r2, [r7, #12]
  return result;
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	fab2 f282 	clz	r2, r2
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	40d3      	lsrs	r3, r2
 8002dd2:	4a09      	ldr	r2, [pc, #36]	; (8002df8 <HAL_RCC_ClockConfig+0x2ec>)
 8002dd4:	5cd3      	ldrb	r3, [r2, r3]
 8002dd6:	fa21 f303 	lsr.w	r3, r1, r3
 8002dda:	4a08      	ldr	r2, [pc, #32]	; (8002dfc <HAL_RCC_ClockConfig+0x2f0>)
 8002ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002dde:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <HAL_RCC_ClockConfig+0x2f4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe fb44 	bl	8001470 <HAL_InitTick>
  
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3778      	adds	r7, #120	; 0x78
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000
 8002df8:	08006e94 	.word	0x08006e94
 8002dfc:	20000000 	.word	0x20000000
 8002e00:	20000004 	.word	0x20000004

08002e04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b08b      	sub	sp, #44	; 0x2c
 8002e08:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61fb      	str	r3, [r7, #28]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61bb      	str	r3, [r7, #24]
 8002e12:	2300      	movs	r3, #0
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002e1e:	4b29      	ldr	r3, [pc, #164]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f003 030c 	and.w	r3, r3, #12
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d002      	beq.n	8002e34 <HAL_RCC_GetSysClockFreq+0x30>
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d003      	beq.n	8002e3a <HAL_RCC_GetSysClockFreq+0x36>
 8002e32:	e03c      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e34:	4b24      	ldr	r3, [pc, #144]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e36:	623b      	str	r3, [r7, #32]
      break;
 8002e38:	e03c      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e40:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002e44:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	fa92 f2a2 	rbit	r2, r2
 8002e4c:	607a      	str	r2, [r7, #4]
  return result;
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	fab2 f282 	clz	r2, r2
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	40d3      	lsrs	r3, r2
 8002e58:	4a1c      	ldr	r2, [pc, #112]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e5a:	5cd3      	ldrb	r3, [r2, r3]
 8002e5c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e5e:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	220f      	movs	r2, #15
 8002e68:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	fa92 f2a2 	rbit	r2, r2
 8002e70:	60fa      	str	r2, [r7, #12]
  return result;
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	fab2 f282 	clz	r2, r2
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	40d3      	lsrs	r3, r2
 8002e7c:	4a14      	ldr	r2, [pc, #80]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e7e:	5cd3      	ldrb	r3, [r2, r3]
 8002e80:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e8c:	4a0e      	ldr	r2, [pc, #56]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	fb02 f303 	mul.w	r3, r2, r3
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e9c:	e004      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	4a0c      	ldr	r2, [pc, #48]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ea2:	fb02 f303 	mul.w	r3, r2, r3
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	623b      	str	r3, [r7, #32]
      break;
 8002eac:	e002      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002eb0:	623b      	str	r3, [r7, #32]
      break;
 8002eb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	372c      	adds	r7, #44	; 0x2c
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	007a1200 	.word	0x007a1200
 8002ecc:	08006eac 	.word	0x08006eac
 8002ed0:	08006ebc 	.word	0x08006ebc
 8002ed4:	003d0900 	.word	0x003d0900

08002ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <HAL_RCC_GetHCLKFreq+0x14>)
 8002ede:	681b      	ldr	r3, [r3, #0]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	20000000 	.word	0x20000000

08002ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002ef6:	f7ff ffef 	bl	8002ed8 <HAL_RCC_GetHCLKFreq>
 8002efa:	4601      	mov	r1, r0
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f04:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f08:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	fa92 f2a2 	rbit	r2, r2
 8002f10:	603a      	str	r2, [r7, #0]
  return result;
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	fab2 f282 	clz	r2, r2
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	40d3      	lsrs	r3, r2
 8002f1c:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f1e:	5cd3      	ldrb	r3, [r2, r3]
 8002f20:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	08006ea4 	.word	0x08006ea4

08002f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f3a:	f7ff ffcd 	bl	8002ed8 <HAL_RCC_GetHCLKFreq>
 8002f3e:	4601      	mov	r1, r0
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002f48:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002f4c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	fa92 f2a2 	rbit	r2, r2
 8002f54:	603a      	str	r2, [r7, #0]
  return result;
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	fab2 f282 	clz	r2, r2
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	40d3      	lsrs	r3, r2
 8002f60:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f62:	5cd3      	ldrb	r3, [r2, r3]
 8002f64:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000
 8002f74:	08006ea4 	.word	0x08006ea4

08002f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e049      	b.n	800301e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fe f8ac 	bl	80010fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	f000 faa2 	bl	8003500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b01      	cmp	r3, #1
 800303a:	d001      	beq.n	8003040 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e040      	b.n	80030c2 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a1c      	ldr	r2, [pc, #112]	; (80030d0 <HAL_TIM_Base_Start_IT+0xa8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00e      	beq.n	8003080 <HAL_TIM_Base_Start_IT+0x58>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306a:	d009      	beq.n	8003080 <HAL_TIM_Base_Start_IT+0x58>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a18      	ldr	r2, [pc, #96]	; (80030d4 <HAL_TIM_Base_Start_IT+0xac>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d004      	beq.n	8003080 <HAL_TIM_Base_Start_IT+0x58>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a17      	ldr	r2, [pc, #92]	; (80030d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d115      	bne.n	80030ac <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	4b15      	ldr	r3, [pc, #84]	; (80030dc <HAL_TIM_Base_Start_IT+0xb4>)
 8003088:	4013      	ands	r3, r2
 800308a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b06      	cmp	r3, #6
 8003090:	d015      	beq.n	80030be <HAL_TIM_Base_Start_IT+0x96>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003098:	d011      	beq.n	80030be <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030aa:	e008      	b.n	80030be <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	e000      	b.n	80030c0 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40012c00 	.word	0x40012c00
 80030d4:	40000400 	.word	0x40000400
 80030d8:	40014000 	.word	0x40014000
 80030dc:	00010007 	.word	0x00010007

080030e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d122      	bne.n	800313c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b02      	cmp	r3, #2
 8003102:	d11b      	bne.n	800313c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f06f 0202 	mvn.w	r2, #2
 800310c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f9ce 	bl	80034c4 <HAL_TIM_IC_CaptureCallback>
 8003128:	e005      	b.n	8003136 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f9c0 	bl	80034b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f9d1 	bl	80034d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b04      	cmp	r3, #4
 8003148:	d122      	bne.n	8003190 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b04      	cmp	r3, #4
 8003156:	d11b      	bne.n	8003190 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0204 	mvn.w	r2, #4
 8003160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2202      	movs	r2, #2
 8003166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f9a4 	bl	80034c4 <HAL_TIM_IC_CaptureCallback>
 800317c:	e005      	b.n	800318a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f996 	bl	80034b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f9a7 	bl	80034d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b08      	cmp	r3, #8
 800319c:	d122      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d11b      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f06f 0208 	mvn.w	r2, #8
 80031b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2204      	movs	r2, #4
 80031ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f97a 	bl	80034c4 <HAL_TIM_IC_CaptureCallback>
 80031d0:	e005      	b.n	80031de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f96c 	bl	80034b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f97d 	bl	80034d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0310 	and.w	r3, r3, #16
 80031ee:	2b10      	cmp	r3, #16
 80031f0:	d122      	bne.n	8003238 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	2b10      	cmp	r3, #16
 80031fe:	d11b      	bne.n	8003238 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f06f 0210 	mvn.w	r2, #16
 8003208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2208      	movs	r2, #8
 800320e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f950 	bl	80034c4 <HAL_TIM_IC_CaptureCallback>
 8003224:	e005      	b.n	8003232 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f942 	bl	80034b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f953 	bl	80034d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b01      	cmp	r3, #1
 8003244:	d10e      	bne.n	8003264 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b01      	cmp	r3, #1
 8003252:	d107      	bne.n	8003264 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f06f 0201 	mvn.w	r2, #1
 800325c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7fd fca2 	bl	8000ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326e:	2b80      	cmp	r3, #128	; 0x80
 8003270:	d10e      	bne.n	8003290 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327c:	2b80      	cmp	r3, #128	; 0x80
 800327e:	d107      	bne.n	8003290 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fac2 	bl	8003814 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800329e:	d10e      	bne.n	80032be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032aa:	2b80      	cmp	r3, #128	; 0x80
 80032ac:	d107      	bne.n	80032be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fab5 	bl	8003828 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c8:	2b40      	cmp	r3, #64	; 0x40
 80032ca:	d10e      	bne.n	80032ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d6:	2b40      	cmp	r3, #64	; 0x40
 80032d8:	d107      	bne.n	80032ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f901 	bl	80034ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b20      	cmp	r3, #32
 80032f6:	d10e      	bne.n	8003316 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f003 0320 	and.w	r3, r3, #32
 8003302:	2b20      	cmp	r3, #32
 8003304:	d107      	bne.n	8003316 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f06f 0220 	mvn.w	r2, #32
 800330e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 fa75 	bl	8003800 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003332:	2b01      	cmp	r3, #1
 8003334:	d101      	bne.n	800333a <HAL_TIM_ConfigClockSource+0x1c>
 8003336:	2302      	movs	r3, #2
 8003338:	e0b6      	b.n	80034a8 <HAL_TIM_ConfigClockSource+0x18a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2202      	movs	r2, #2
 8003346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003358:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800335c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003364:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003376:	d03e      	beq.n	80033f6 <HAL_TIM_ConfigClockSource+0xd8>
 8003378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800337c:	f200 8087 	bhi.w	800348e <HAL_TIM_ConfigClockSource+0x170>
 8003380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003384:	f000 8086 	beq.w	8003494 <HAL_TIM_ConfigClockSource+0x176>
 8003388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338c:	d87f      	bhi.n	800348e <HAL_TIM_ConfigClockSource+0x170>
 800338e:	2b70      	cmp	r3, #112	; 0x70
 8003390:	d01a      	beq.n	80033c8 <HAL_TIM_ConfigClockSource+0xaa>
 8003392:	2b70      	cmp	r3, #112	; 0x70
 8003394:	d87b      	bhi.n	800348e <HAL_TIM_ConfigClockSource+0x170>
 8003396:	2b60      	cmp	r3, #96	; 0x60
 8003398:	d050      	beq.n	800343c <HAL_TIM_ConfigClockSource+0x11e>
 800339a:	2b60      	cmp	r3, #96	; 0x60
 800339c:	d877      	bhi.n	800348e <HAL_TIM_ConfigClockSource+0x170>
 800339e:	2b50      	cmp	r3, #80	; 0x50
 80033a0:	d03c      	beq.n	800341c <HAL_TIM_ConfigClockSource+0xfe>
 80033a2:	2b50      	cmp	r3, #80	; 0x50
 80033a4:	d873      	bhi.n	800348e <HAL_TIM_ConfigClockSource+0x170>
 80033a6:	2b40      	cmp	r3, #64	; 0x40
 80033a8:	d058      	beq.n	800345c <HAL_TIM_ConfigClockSource+0x13e>
 80033aa:	2b40      	cmp	r3, #64	; 0x40
 80033ac:	d86f      	bhi.n	800348e <HAL_TIM_ConfigClockSource+0x170>
 80033ae:	2b30      	cmp	r3, #48	; 0x30
 80033b0:	d064      	beq.n	800347c <HAL_TIM_ConfigClockSource+0x15e>
 80033b2:	2b30      	cmp	r3, #48	; 0x30
 80033b4:	d86b      	bhi.n	800348e <HAL_TIM_ConfigClockSource+0x170>
 80033b6:	2b20      	cmp	r3, #32
 80033b8:	d060      	beq.n	800347c <HAL_TIM_ConfigClockSource+0x15e>
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d867      	bhi.n	800348e <HAL_TIM_ConfigClockSource+0x170>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d05c      	beq.n	800347c <HAL_TIM_ConfigClockSource+0x15e>
 80033c2:	2b10      	cmp	r3, #16
 80033c4:	d05a      	beq.n	800347c <HAL_TIM_ConfigClockSource+0x15e>
 80033c6:	e062      	b.n	800348e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	6899      	ldr	r1, [r3, #8]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f000 f984 	bl	80036e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033ea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	609a      	str	r2, [r3, #8]
      break;
 80033f4:	e04f      	b.n	8003496 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	6899      	ldr	r1, [r3, #8]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f000 f96d 	bl	80036e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003418:	609a      	str	r2, [r3, #8]
      break;
 800341a:	e03c      	b.n	8003496 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	461a      	mov	r2, r3
 800342a:	f000 f8e1 	bl	80035f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2150      	movs	r1, #80	; 0x50
 8003434:	4618      	mov	r0, r3
 8003436:	f000 f93a 	bl	80036ae <TIM_ITRx_SetConfig>
      break;
 800343a:	e02c      	b.n	8003496 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6818      	ldr	r0, [r3, #0]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	6859      	ldr	r1, [r3, #4]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	461a      	mov	r2, r3
 800344a:	f000 f900 	bl	800364e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2160      	movs	r1, #96	; 0x60
 8003454:	4618      	mov	r0, r3
 8003456:	f000 f92a 	bl	80036ae <TIM_ITRx_SetConfig>
      break;
 800345a:	e01c      	b.n	8003496 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6818      	ldr	r0, [r3, #0]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	6859      	ldr	r1, [r3, #4]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	461a      	mov	r2, r3
 800346a:	f000 f8c1 	bl	80035f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2140      	movs	r1, #64	; 0x40
 8003474:	4618      	mov	r0, r3
 8003476:	f000 f91a 	bl	80036ae <TIM_ITRx_SetConfig>
      break;
 800347a:	e00c      	b.n	8003496 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4619      	mov	r1, r3
 8003486:	4610      	mov	r0, r2
 8003488:	f000 f911 	bl	80036ae <TIM_ITRx_SetConfig>
      break;
 800348c:	e003      	b.n	8003496 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	73fb      	strb	r3, [r7, #15]
      break;
 8003492:	e000      	b.n	8003496 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003494:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a32      	ldr	r2, [pc, #200]	; (80035dc <TIM_Base_SetConfig+0xdc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d007      	beq.n	8003528 <TIM_Base_SetConfig+0x28>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800351e:	d003      	beq.n	8003528 <TIM_Base_SetConfig+0x28>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a2f      	ldr	r2, [pc, #188]	; (80035e0 <TIM_Base_SetConfig+0xe0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d108      	bne.n	800353a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a27      	ldr	r2, [pc, #156]	; (80035dc <TIM_Base_SetConfig+0xdc>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d013      	beq.n	800356a <TIM_Base_SetConfig+0x6a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003548:	d00f      	beq.n	800356a <TIM_Base_SetConfig+0x6a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a24      	ldr	r2, [pc, #144]	; (80035e0 <TIM_Base_SetConfig+0xe0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00b      	beq.n	800356a <TIM_Base_SetConfig+0x6a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a23      	ldr	r2, [pc, #140]	; (80035e4 <TIM_Base_SetConfig+0xe4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d007      	beq.n	800356a <TIM_Base_SetConfig+0x6a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a22      	ldr	r2, [pc, #136]	; (80035e8 <TIM_Base_SetConfig+0xe8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d003      	beq.n	800356a <TIM_Base_SetConfig+0x6a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a21      	ldr	r2, [pc, #132]	; (80035ec <TIM_Base_SetConfig+0xec>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d108      	bne.n	800357c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a0e      	ldr	r2, [pc, #56]	; (80035dc <TIM_Base_SetConfig+0xdc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00b      	beq.n	80035c0 <TIM_Base_SetConfig+0xc0>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a0e      	ldr	r2, [pc, #56]	; (80035e4 <TIM_Base_SetConfig+0xe4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d007      	beq.n	80035c0 <TIM_Base_SetConfig+0xc0>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a0d      	ldr	r2, [pc, #52]	; (80035e8 <TIM_Base_SetConfig+0xe8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d003      	beq.n	80035c0 <TIM_Base_SetConfig+0xc0>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a0c      	ldr	r2, [pc, #48]	; (80035ec <TIM_Base_SetConfig+0xec>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d103      	bne.n	80035c8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	615a      	str	r2, [r3, #20]
}
 80035ce:	bf00      	nop
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40012c00 	.word	0x40012c00
 80035e0:	40000400 	.word	0x40000400
 80035e4:	40014000 	.word	0x40014000
 80035e8:	40014400 	.word	0x40014400
 80035ec:	40014800 	.word	0x40014800

080035f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	f023 0201 	bic.w	r2, r3, #1
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800361a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f023 030a 	bic.w	r3, r3, #10
 800362c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4313      	orrs	r3, r2
 8003634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	621a      	str	r2, [r3, #32]
}
 8003642:	bf00      	nop
 8003644:	371c      	adds	r7, #28
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800364e:	b480      	push	{r7}
 8003650:	b087      	sub	sp, #28
 8003652:	af00      	add	r7, sp, #0
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	f023 0210 	bic.w	r2, r3, #16
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003678:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	031b      	lsls	r3, r3, #12
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	4313      	orrs	r3, r2
 8003682:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800368a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	621a      	str	r2, [r3, #32]
}
 80036a2:	bf00      	nop
 80036a4:	371c      	adds	r7, #28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b085      	sub	sp, #20
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f043 0307 	orr.w	r3, r3, #7
 80036d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	609a      	str	r2, [r3, #8]
}
 80036d8:	bf00      	nop
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	021a      	lsls	r2, r3, #8
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	431a      	orrs	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4313      	orrs	r3, r2
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	609a      	str	r2, [r3, #8]
}
 8003718:	bf00      	nop
 800371a:	371c      	adds	r7, #28
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003738:	2302      	movs	r3, #2
 800373a:	e054      	b.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a24      	ldr	r2, [pc, #144]	; (80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d108      	bne.n	8003778 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800376c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	4313      	orrs	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a17      	ldr	r2, [pc, #92]	; (80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d00e      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a4:	d009      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a13      	ldr	r2, [pc, #76]	; (80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d004      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a11      	ldr	r2, [pc, #68]	; (80037fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d10c      	bne.n	80037d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40012c00 	.word	0x40012c00
 80037f8:	40000400 	.word	0x40000400
 80037fc:	40014000 	.word	0x40014000

08003800 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e040      	b.n	80038d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fd fc84 	bl	800116c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2224      	movs	r2, #36	; 0x24
 8003868:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0201 	bic.w	r2, r2, #1
 8003878:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f8b6 	bl	80039ec <UART_SetConfig>
 8003880:	4603      	mov	r3, r0
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e022      	b.n	80038d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f9e0 	bl	8003c58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 fa67 	bl	8003d9c <UART_CheckIdleState>
 80038ce:	4603      	mov	r3, r0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08a      	sub	sp, #40	; 0x28
 80038dc:	af02      	add	r7, sp, #8
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	4613      	mov	r3, r2
 80038e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	d178      	bne.n	80039e2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <HAL_UART_Transmit+0x24>
 80038f6:	88fb      	ldrh	r3, [r7, #6]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e071      	b.n	80039e4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2221      	movs	r2, #33	; 0x21
 800390c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800390e:	f7fd fdf3 	bl	80014f8 <HAL_GetTick>
 8003912:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	88fa      	ldrh	r2, [r7, #6]
 8003918:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	88fa      	ldrh	r2, [r7, #6]
 8003920:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392c:	d108      	bne.n	8003940 <HAL_UART_Transmit+0x68>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d104      	bne.n	8003940 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	61bb      	str	r3, [r7, #24]
 800393e:	e003      	b.n	8003948 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003944:	2300      	movs	r3, #0
 8003946:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003948:	e030      	b.n	80039ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2200      	movs	r2, #0
 8003952:	2180      	movs	r1, #128	; 0x80
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 fac9 	bl	8003eec <UART_WaitOnFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d004      	beq.n	800396a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2220      	movs	r2, #32
 8003964:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e03c      	b.n	80039e4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10b      	bne.n	8003988 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	881a      	ldrh	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800397c:	b292      	uxth	r2, r2
 800397e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	3302      	adds	r3, #2
 8003984:	61bb      	str	r3, [r7, #24]
 8003986:	e008      	b.n	800399a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	781a      	ldrb	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	b292      	uxth	r2, r2
 8003992:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	3301      	adds	r3, #1
 8003998:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1c8      	bne.n	800394a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2200      	movs	r2, #0
 80039c0:	2140      	movs	r1, #64	; 0x40
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 fa92 	bl	8003eec <UART_WaitOnFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d004      	beq.n	80039d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e005      	b.n	80039e4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2220      	movs	r2, #32
 80039dc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	e000      	b.n	80039e4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80039e2:	2302      	movs	r3, #2
  }
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3720      	adds	r7, #32
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4b8a      	ldr	r3, [pc, #552]	; (8003c40 <UART_SetConfig+0x254>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6812      	ldr	r2, [r2, #0]
 8003a1e:	6979      	ldr	r1, [r7, #20]
 8003a20:	430b      	orrs	r3, r1
 8003a22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a78      	ldr	r2, [pc, #480]	; (8003c44 <UART_SetConfig+0x258>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d120      	bne.n	8003aaa <UART_SetConfig+0xbe>
 8003a68:	4b77      	ldr	r3, [pc, #476]	; (8003c48 <UART_SetConfig+0x25c>)
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d817      	bhi.n	8003aa4 <UART_SetConfig+0xb8>
 8003a74:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <UART_SetConfig+0x90>)
 8003a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7a:	bf00      	nop
 8003a7c:	08003a8d 	.word	0x08003a8d
 8003a80:	08003a99 	.word	0x08003a99
 8003a84:	08003a9f 	.word	0x08003a9f
 8003a88:	08003a93 	.word	0x08003a93
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	77fb      	strb	r3, [r7, #31]
 8003a90:	e01d      	b.n	8003ace <UART_SetConfig+0xe2>
 8003a92:	2302      	movs	r3, #2
 8003a94:	77fb      	strb	r3, [r7, #31]
 8003a96:	e01a      	b.n	8003ace <UART_SetConfig+0xe2>
 8003a98:	2304      	movs	r3, #4
 8003a9a:	77fb      	strb	r3, [r7, #31]
 8003a9c:	e017      	b.n	8003ace <UART_SetConfig+0xe2>
 8003a9e:	2308      	movs	r3, #8
 8003aa0:	77fb      	strb	r3, [r7, #31]
 8003aa2:	e014      	b.n	8003ace <UART_SetConfig+0xe2>
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	77fb      	strb	r3, [r7, #31]
 8003aa8:	e011      	b.n	8003ace <UART_SetConfig+0xe2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a67      	ldr	r2, [pc, #412]	; (8003c4c <UART_SetConfig+0x260>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d102      	bne.n	8003aba <UART_SetConfig+0xce>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	77fb      	strb	r3, [r7, #31]
 8003ab8:	e009      	b.n	8003ace <UART_SetConfig+0xe2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a64      	ldr	r2, [pc, #400]	; (8003c50 <UART_SetConfig+0x264>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d102      	bne.n	8003aca <UART_SetConfig+0xde>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	77fb      	strb	r3, [r7, #31]
 8003ac8:	e001      	b.n	8003ace <UART_SetConfig+0xe2>
 8003aca:	2310      	movs	r3, #16
 8003acc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad6:	d15a      	bne.n	8003b8e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003ad8:	7ffb      	ldrb	r3, [r7, #31]
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d827      	bhi.n	8003b2e <UART_SetConfig+0x142>
 8003ade:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <UART_SetConfig+0xf8>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003b09 	.word	0x08003b09
 8003ae8:	08003b11 	.word	0x08003b11
 8003aec:	08003b19 	.word	0x08003b19
 8003af0:	08003b2f 	.word	0x08003b2f
 8003af4:	08003b1f 	.word	0x08003b1f
 8003af8:	08003b2f 	.word	0x08003b2f
 8003afc:	08003b2f 	.word	0x08003b2f
 8003b00:	08003b2f 	.word	0x08003b2f
 8003b04:	08003b27 	.word	0x08003b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b08:	f7ff f9f2 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 8003b0c:	61b8      	str	r0, [r7, #24]
        break;
 8003b0e:	e013      	b.n	8003b38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b10:	f7ff fa10 	bl	8002f34 <HAL_RCC_GetPCLK2Freq>
 8003b14:	61b8      	str	r0, [r7, #24]
        break;
 8003b16:	e00f      	b.n	8003b38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b18:	4b4e      	ldr	r3, [pc, #312]	; (8003c54 <UART_SetConfig+0x268>)
 8003b1a:	61bb      	str	r3, [r7, #24]
        break;
 8003b1c:	e00c      	b.n	8003b38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b1e:	f7ff f971 	bl	8002e04 <HAL_RCC_GetSysClockFreq>
 8003b22:	61b8      	str	r0, [r7, #24]
        break;
 8003b24:	e008      	b.n	8003b38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b2a:	61bb      	str	r3, [r7, #24]
        break;
 8003b2c:	e004      	b.n	8003b38 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	77bb      	strb	r3, [r7, #30]
        break;
 8003b36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d074      	beq.n	8003c28 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	005a      	lsls	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	085b      	lsrs	r3, r3, #1
 8003b48:	441a      	add	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	2b0f      	cmp	r3, #15
 8003b58:	d916      	bls.n	8003b88 <UART_SetConfig+0x19c>
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b60:	d212      	bcs.n	8003b88 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	f023 030f 	bic.w	r3, r3, #15
 8003b6a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	085b      	lsrs	r3, r3, #1
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	89fb      	ldrh	r3, [r7, #14]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	89fa      	ldrh	r2, [r7, #14]
 8003b84:	60da      	str	r2, [r3, #12]
 8003b86:	e04f      	b.n	8003c28 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	77bb      	strb	r3, [r7, #30]
 8003b8c:	e04c      	b.n	8003c28 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b8e:	7ffb      	ldrb	r3, [r7, #31]
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d828      	bhi.n	8003be6 <UART_SetConfig+0x1fa>
 8003b94:	a201      	add	r2, pc, #4	; (adr r2, 8003b9c <UART_SetConfig+0x1b0>)
 8003b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9a:	bf00      	nop
 8003b9c:	08003bc1 	.word	0x08003bc1
 8003ba0:	08003bc9 	.word	0x08003bc9
 8003ba4:	08003bd1 	.word	0x08003bd1
 8003ba8:	08003be7 	.word	0x08003be7
 8003bac:	08003bd7 	.word	0x08003bd7
 8003bb0:	08003be7 	.word	0x08003be7
 8003bb4:	08003be7 	.word	0x08003be7
 8003bb8:	08003be7 	.word	0x08003be7
 8003bbc:	08003bdf 	.word	0x08003bdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bc0:	f7ff f996 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 8003bc4:	61b8      	str	r0, [r7, #24]
        break;
 8003bc6:	e013      	b.n	8003bf0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bc8:	f7ff f9b4 	bl	8002f34 <HAL_RCC_GetPCLK2Freq>
 8003bcc:	61b8      	str	r0, [r7, #24]
        break;
 8003bce:	e00f      	b.n	8003bf0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bd0:	4b20      	ldr	r3, [pc, #128]	; (8003c54 <UART_SetConfig+0x268>)
 8003bd2:	61bb      	str	r3, [r7, #24]
        break;
 8003bd4:	e00c      	b.n	8003bf0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bd6:	f7ff f915 	bl	8002e04 <HAL_RCC_GetSysClockFreq>
 8003bda:	61b8      	str	r0, [r7, #24]
        break;
 8003bdc:	e008      	b.n	8003bf0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003be2:	61bb      	str	r3, [r7, #24]
        break;
 8003be4:	e004      	b.n	8003bf0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	77bb      	strb	r3, [r7, #30]
        break;
 8003bee:	bf00      	nop
    }

    if (pclk != 0U)
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d018      	beq.n	8003c28 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	085a      	lsrs	r2, r3, #1
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	441a      	add	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b0f      	cmp	r3, #15
 8003c0e:	d909      	bls.n	8003c24 <UART_SetConfig+0x238>
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c16:	d205      	bcs.n	8003c24 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60da      	str	r2, [r3, #12]
 8003c22:	e001      	b.n	8003c28 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003c34:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3720      	adds	r7, #32
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	efff69f3 	.word	0xefff69f3
 8003c44:	40013800 	.word	0x40013800
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40004400 	.word	0x40004400
 8003c50:	40004800 	.word	0x40004800
 8003c54:	007a1200 	.word	0x007a1200

08003c58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d01a      	beq.n	8003d6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d56:	d10a      	bne.n	8003d6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	605a      	str	r2, [r3, #4]
  }
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b098      	sub	sp, #96	; 0x60
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dac:	f7fd fba4 	bl	80014f8 <HAL_GetTick>
 8003db0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d12e      	bne.n	8003e1e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f88c 	bl	8003eec <UART_WaitOnFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d021      	beq.n	8003e1e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de2:	e853 3f00 	ldrex	r3, [r3]
 8003de6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dee:	653b      	str	r3, [r7, #80]	; 0x50
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	461a      	mov	r2, r3
 8003df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003df8:	647b      	str	r3, [r7, #68]	; 0x44
 8003dfa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e00:	e841 2300 	strex	r3, r2, [r1]
 8003e04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e6      	bne.n	8003dda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e062      	b.n	8003ee4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d149      	bne.n	8003ec0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e34:	2200      	movs	r2, #0
 8003e36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f856 	bl	8003eec <UART_WaitOnFlagUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d03c      	beq.n	8003ec0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	e853 3f00 	ldrex	r3, [r3]
 8003e52:	623b      	str	r3, [r7, #32]
   return(result);
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e64:	633b      	str	r3, [r7, #48]	; 0x30
 8003e66:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e6c:	e841 2300 	strex	r3, r2, [r1]
 8003e70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1e6      	bne.n	8003e46 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3308      	adds	r3, #8
 8003e7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	e853 3f00 	ldrex	r3, [r3]
 8003e86:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3308      	adds	r3, #8
 8003e96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e98:	61fa      	str	r2, [r7, #28]
 8003e9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	69b9      	ldr	r1, [r7, #24]
 8003e9e:	69fa      	ldr	r2, [r7, #28]
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e5      	bne.n	8003e78 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e011      	b.n	8003ee4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3758      	adds	r7, #88	; 0x58
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003efc:	e049      	b.n	8003f92 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f04:	d045      	beq.n	8003f92 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f06:	f7fd faf7 	bl	80014f8 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d302      	bcc.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e048      	b.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d031      	beq.n	8003f92 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d110      	bne.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2208      	movs	r2, #8
 8003f42:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 f838 	bl	8003fba <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2208      	movs	r2, #8
 8003f4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e029      	b.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f6c:	d111      	bne.n	8003f92 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 f81e 	bl	8003fba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e00f      	b.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	69da      	ldr	r2, [r3, #28]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	bf0c      	ite	eq
 8003fa2:	2301      	moveq	r3, #1
 8003fa4:	2300      	movne	r3, #0
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	461a      	mov	r2, r3
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d0a6      	beq.n	8003efe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b095      	sub	sp, #84	; 0x54
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fca:	e853 3f00 	ldrex	r3, [r3]
 8003fce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe0:	643b      	str	r3, [r7, #64]	; 0x40
 8003fe2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fe6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fe8:	e841 2300 	strex	r3, r2, [r1]
 8003fec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e6      	bne.n	8003fc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	61fb      	str	r3, [r7, #28]
   return(result);
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	64bb      	str	r3, [r7, #72]	; 0x48
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3308      	adds	r3, #8
 8004012:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004014:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004016:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004018:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800401a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800401c:	e841 2300 	strex	r3, r2, [r1]
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1e5      	bne.n	8003ff4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402c:	2b01      	cmp	r3, #1
 800402e:	d118      	bne.n	8004062 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	e853 3f00 	ldrex	r3, [r3]
 800403c:	60bb      	str	r3, [r7, #8]
   return(result);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f023 0310 	bic.w	r3, r3, #16
 8004044:	647b      	str	r3, [r7, #68]	; 0x44
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800404e:	61bb      	str	r3, [r7, #24]
 8004050:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	6979      	ldr	r1, [r7, #20]
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	613b      	str	r3, [r7, #16]
   return(result);
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e6      	bne.n	8004030 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004076:	bf00      	nop
 8004078:	3754      	adds	r7, #84	; 0x54
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
	...

08004084 <__errno>:
 8004084:	4b01      	ldr	r3, [pc, #4]	; (800408c <__errno+0x8>)
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	2000000c 	.word	0x2000000c

08004090 <__libc_init_array>:
 8004090:	b570      	push	{r4, r5, r6, lr}
 8004092:	4d0d      	ldr	r5, [pc, #52]	; (80040c8 <__libc_init_array+0x38>)
 8004094:	4c0d      	ldr	r4, [pc, #52]	; (80040cc <__libc_init_array+0x3c>)
 8004096:	1b64      	subs	r4, r4, r5
 8004098:	10a4      	asrs	r4, r4, #2
 800409a:	2600      	movs	r6, #0
 800409c:	42a6      	cmp	r6, r4
 800409e:	d109      	bne.n	80040b4 <__libc_init_array+0x24>
 80040a0:	4d0b      	ldr	r5, [pc, #44]	; (80040d0 <__libc_init_array+0x40>)
 80040a2:	4c0c      	ldr	r4, [pc, #48]	; (80040d4 <__libc_init_array+0x44>)
 80040a4:	f002 fe92 	bl	8006dcc <_init>
 80040a8:	1b64      	subs	r4, r4, r5
 80040aa:	10a4      	asrs	r4, r4, #2
 80040ac:	2600      	movs	r6, #0
 80040ae:	42a6      	cmp	r6, r4
 80040b0:	d105      	bne.n	80040be <__libc_init_array+0x2e>
 80040b2:	bd70      	pop	{r4, r5, r6, pc}
 80040b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b8:	4798      	blx	r3
 80040ba:	3601      	adds	r6, #1
 80040bc:	e7ee      	b.n	800409c <__libc_init_array+0xc>
 80040be:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c2:	4798      	blx	r3
 80040c4:	3601      	adds	r6, #1
 80040c6:	e7f2      	b.n	80040ae <__libc_init_array+0x1e>
 80040c8:	080072a4 	.word	0x080072a4
 80040cc:	080072a4 	.word	0x080072a4
 80040d0:	080072a4 	.word	0x080072a4
 80040d4:	080072a8 	.word	0x080072a8

080040d8 <memset>:
 80040d8:	4402      	add	r2, r0
 80040da:	4603      	mov	r3, r0
 80040dc:	4293      	cmp	r3, r2
 80040de:	d100      	bne.n	80040e2 <memset+0xa>
 80040e0:	4770      	bx	lr
 80040e2:	f803 1b01 	strb.w	r1, [r3], #1
 80040e6:	e7f9      	b.n	80040dc <memset+0x4>

080040e8 <__cvt>:
 80040e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040ec:	ec55 4b10 	vmov	r4, r5, d0
 80040f0:	2d00      	cmp	r5, #0
 80040f2:	460e      	mov	r6, r1
 80040f4:	4619      	mov	r1, r3
 80040f6:	462b      	mov	r3, r5
 80040f8:	bfbb      	ittet	lt
 80040fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80040fe:	461d      	movlt	r5, r3
 8004100:	2300      	movge	r3, #0
 8004102:	232d      	movlt	r3, #45	; 0x2d
 8004104:	700b      	strb	r3, [r1, #0]
 8004106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004108:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800410c:	4691      	mov	r9, r2
 800410e:	f023 0820 	bic.w	r8, r3, #32
 8004112:	bfbc      	itt	lt
 8004114:	4622      	movlt	r2, r4
 8004116:	4614      	movlt	r4, r2
 8004118:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800411c:	d005      	beq.n	800412a <__cvt+0x42>
 800411e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004122:	d100      	bne.n	8004126 <__cvt+0x3e>
 8004124:	3601      	adds	r6, #1
 8004126:	2102      	movs	r1, #2
 8004128:	e000      	b.n	800412c <__cvt+0x44>
 800412a:	2103      	movs	r1, #3
 800412c:	ab03      	add	r3, sp, #12
 800412e:	9301      	str	r3, [sp, #4]
 8004130:	ab02      	add	r3, sp, #8
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	ec45 4b10 	vmov	d0, r4, r5
 8004138:	4653      	mov	r3, sl
 800413a:	4632      	mov	r2, r6
 800413c:	f000 fee8 	bl	8004f10 <_dtoa_r>
 8004140:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004144:	4607      	mov	r7, r0
 8004146:	d102      	bne.n	800414e <__cvt+0x66>
 8004148:	f019 0f01 	tst.w	r9, #1
 800414c:	d022      	beq.n	8004194 <__cvt+0xac>
 800414e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004152:	eb07 0906 	add.w	r9, r7, r6
 8004156:	d110      	bne.n	800417a <__cvt+0x92>
 8004158:	783b      	ldrb	r3, [r7, #0]
 800415a:	2b30      	cmp	r3, #48	; 0x30
 800415c:	d10a      	bne.n	8004174 <__cvt+0x8c>
 800415e:	2200      	movs	r2, #0
 8004160:	2300      	movs	r3, #0
 8004162:	4620      	mov	r0, r4
 8004164:	4629      	mov	r1, r5
 8004166:	f7fc fcaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800416a:	b918      	cbnz	r0, 8004174 <__cvt+0x8c>
 800416c:	f1c6 0601 	rsb	r6, r6, #1
 8004170:	f8ca 6000 	str.w	r6, [sl]
 8004174:	f8da 3000 	ldr.w	r3, [sl]
 8004178:	4499      	add	r9, r3
 800417a:	2200      	movs	r2, #0
 800417c:	2300      	movs	r3, #0
 800417e:	4620      	mov	r0, r4
 8004180:	4629      	mov	r1, r5
 8004182:	f7fc fca1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004186:	b108      	cbz	r0, 800418c <__cvt+0xa4>
 8004188:	f8cd 900c 	str.w	r9, [sp, #12]
 800418c:	2230      	movs	r2, #48	; 0x30
 800418e:	9b03      	ldr	r3, [sp, #12]
 8004190:	454b      	cmp	r3, r9
 8004192:	d307      	bcc.n	80041a4 <__cvt+0xbc>
 8004194:	9b03      	ldr	r3, [sp, #12]
 8004196:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004198:	1bdb      	subs	r3, r3, r7
 800419a:	4638      	mov	r0, r7
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	b004      	add	sp, #16
 80041a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a4:	1c59      	adds	r1, r3, #1
 80041a6:	9103      	str	r1, [sp, #12]
 80041a8:	701a      	strb	r2, [r3, #0]
 80041aa:	e7f0      	b.n	800418e <__cvt+0xa6>

080041ac <__exponent>:
 80041ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041ae:	4603      	mov	r3, r0
 80041b0:	2900      	cmp	r1, #0
 80041b2:	bfb8      	it	lt
 80041b4:	4249      	neglt	r1, r1
 80041b6:	f803 2b02 	strb.w	r2, [r3], #2
 80041ba:	bfb4      	ite	lt
 80041bc:	222d      	movlt	r2, #45	; 0x2d
 80041be:	222b      	movge	r2, #43	; 0x2b
 80041c0:	2909      	cmp	r1, #9
 80041c2:	7042      	strb	r2, [r0, #1]
 80041c4:	dd2a      	ble.n	800421c <__exponent+0x70>
 80041c6:	f10d 0407 	add.w	r4, sp, #7
 80041ca:	46a4      	mov	ip, r4
 80041cc:	270a      	movs	r7, #10
 80041ce:	46a6      	mov	lr, r4
 80041d0:	460a      	mov	r2, r1
 80041d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80041d6:	fb07 1516 	mls	r5, r7, r6, r1
 80041da:	3530      	adds	r5, #48	; 0x30
 80041dc:	2a63      	cmp	r2, #99	; 0x63
 80041de:	f104 34ff 	add.w	r4, r4, #4294967295
 80041e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80041e6:	4631      	mov	r1, r6
 80041e8:	dcf1      	bgt.n	80041ce <__exponent+0x22>
 80041ea:	3130      	adds	r1, #48	; 0x30
 80041ec:	f1ae 0502 	sub.w	r5, lr, #2
 80041f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80041f4:	1c44      	adds	r4, r0, #1
 80041f6:	4629      	mov	r1, r5
 80041f8:	4561      	cmp	r1, ip
 80041fa:	d30a      	bcc.n	8004212 <__exponent+0x66>
 80041fc:	f10d 0209 	add.w	r2, sp, #9
 8004200:	eba2 020e 	sub.w	r2, r2, lr
 8004204:	4565      	cmp	r5, ip
 8004206:	bf88      	it	hi
 8004208:	2200      	movhi	r2, #0
 800420a:	4413      	add	r3, r2
 800420c:	1a18      	subs	r0, r3, r0
 800420e:	b003      	add	sp, #12
 8004210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004212:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004216:	f804 2f01 	strb.w	r2, [r4, #1]!
 800421a:	e7ed      	b.n	80041f8 <__exponent+0x4c>
 800421c:	2330      	movs	r3, #48	; 0x30
 800421e:	3130      	adds	r1, #48	; 0x30
 8004220:	7083      	strb	r3, [r0, #2]
 8004222:	70c1      	strb	r1, [r0, #3]
 8004224:	1d03      	adds	r3, r0, #4
 8004226:	e7f1      	b.n	800420c <__exponent+0x60>

08004228 <_printf_float>:
 8004228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800422c:	ed2d 8b02 	vpush	{d8}
 8004230:	b08d      	sub	sp, #52	; 0x34
 8004232:	460c      	mov	r4, r1
 8004234:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004238:	4616      	mov	r6, r2
 800423a:	461f      	mov	r7, r3
 800423c:	4605      	mov	r5, r0
 800423e:	f001 fe0d 	bl	8005e5c <_localeconv_r>
 8004242:	f8d0 a000 	ldr.w	sl, [r0]
 8004246:	4650      	mov	r0, sl
 8004248:	f7fb ffc2 	bl	80001d0 <strlen>
 800424c:	2300      	movs	r3, #0
 800424e:	930a      	str	r3, [sp, #40]	; 0x28
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	9305      	str	r3, [sp, #20]
 8004254:	f8d8 3000 	ldr.w	r3, [r8]
 8004258:	f894 b018 	ldrb.w	fp, [r4, #24]
 800425c:	3307      	adds	r3, #7
 800425e:	f023 0307 	bic.w	r3, r3, #7
 8004262:	f103 0208 	add.w	r2, r3, #8
 8004266:	f8c8 2000 	str.w	r2, [r8]
 800426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004272:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004276:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800427a:	9307      	str	r3, [sp, #28]
 800427c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004280:	ee08 0a10 	vmov	s16, r0
 8004284:	4b9f      	ldr	r3, [pc, #636]	; (8004504 <_printf_float+0x2dc>)
 8004286:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800428a:	f04f 32ff 	mov.w	r2, #4294967295
 800428e:	f7fc fc4d 	bl	8000b2c <__aeabi_dcmpun>
 8004292:	bb88      	cbnz	r0, 80042f8 <_printf_float+0xd0>
 8004294:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004298:	4b9a      	ldr	r3, [pc, #616]	; (8004504 <_printf_float+0x2dc>)
 800429a:	f04f 32ff 	mov.w	r2, #4294967295
 800429e:	f7fc fc27 	bl	8000af0 <__aeabi_dcmple>
 80042a2:	bb48      	cbnz	r0, 80042f8 <_printf_float+0xd0>
 80042a4:	2200      	movs	r2, #0
 80042a6:	2300      	movs	r3, #0
 80042a8:	4640      	mov	r0, r8
 80042aa:	4649      	mov	r1, r9
 80042ac:	f7fc fc16 	bl	8000adc <__aeabi_dcmplt>
 80042b0:	b110      	cbz	r0, 80042b8 <_printf_float+0x90>
 80042b2:	232d      	movs	r3, #45	; 0x2d
 80042b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042b8:	4b93      	ldr	r3, [pc, #588]	; (8004508 <_printf_float+0x2e0>)
 80042ba:	4894      	ldr	r0, [pc, #592]	; (800450c <_printf_float+0x2e4>)
 80042bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80042c0:	bf94      	ite	ls
 80042c2:	4698      	movls	r8, r3
 80042c4:	4680      	movhi	r8, r0
 80042c6:	2303      	movs	r3, #3
 80042c8:	6123      	str	r3, [r4, #16]
 80042ca:	9b05      	ldr	r3, [sp, #20]
 80042cc:	f023 0204 	bic.w	r2, r3, #4
 80042d0:	6022      	str	r2, [r4, #0]
 80042d2:	f04f 0900 	mov.w	r9, #0
 80042d6:	9700      	str	r7, [sp, #0]
 80042d8:	4633      	mov	r3, r6
 80042da:	aa0b      	add	r2, sp, #44	; 0x2c
 80042dc:	4621      	mov	r1, r4
 80042de:	4628      	mov	r0, r5
 80042e0:	f000 f9d8 	bl	8004694 <_printf_common>
 80042e4:	3001      	adds	r0, #1
 80042e6:	f040 8090 	bne.w	800440a <_printf_float+0x1e2>
 80042ea:	f04f 30ff 	mov.w	r0, #4294967295
 80042ee:	b00d      	add	sp, #52	; 0x34
 80042f0:	ecbd 8b02 	vpop	{d8}
 80042f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042f8:	4642      	mov	r2, r8
 80042fa:	464b      	mov	r3, r9
 80042fc:	4640      	mov	r0, r8
 80042fe:	4649      	mov	r1, r9
 8004300:	f7fc fc14 	bl	8000b2c <__aeabi_dcmpun>
 8004304:	b140      	cbz	r0, 8004318 <_printf_float+0xf0>
 8004306:	464b      	mov	r3, r9
 8004308:	2b00      	cmp	r3, #0
 800430a:	bfbc      	itt	lt
 800430c:	232d      	movlt	r3, #45	; 0x2d
 800430e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004312:	487f      	ldr	r0, [pc, #508]	; (8004510 <_printf_float+0x2e8>)
 8004314:	4b7f      	ldr	r3, [pc, #508]	; (8004514 <_printf_float+0x2ec>)
 8004316:	e7d1      	b.n	80042bc <_printf_float+0x94>
 8004318:	6863      	ldr	r3, [r4, #4]
 800431a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800431e:	9206      	str	r2, [sp, #24]
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	d13f      	bne.n	80043a4 <_printf_float+0x17c>
 8004324:	2306      	movs	r3, #6
 8004326:	6063      	str	r3, [r4, #4]
 8004328:	9b05      	ldr	r3, [sp, #20]
 800432a:	6861      	ldr	r1, [r4, #4]
 800432c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004330:	2300      	movs	r3, #0
 8004332:	9303      	str	r3, [sp, #12]
 8004334:	ab0a      	add	r3, sp, #40	; 0x28
 8004336:	e9cd b301 	strd	fp, r3, [sp, #4]
 800433a:	ab09      	add	r3, sp, #36	; 0x24
 800433c:	ec49 8b10 	vmov	d0, r8, r9
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	6022      	str	r2, [r4, #0]
 8004344:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004348:	4628      	mov	r0, r5
 800434a:	f7ff fecd 	bl	80040e8 <__cvt>
 800434e:	9b06      	ldr	r3, [sp, #24]
 8004350:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004352:	2b47      	cmp	r3, #71	; 0x47
 8004354:	4680      	mov	r8, r0
 8004356:	d108      	bne.n	800436a <_printf_float+0x142>
 8004358:	1cc8      	adds	r0, r1, #3
 800435a:	db02      	blt.n	8004362 <_printf_float+0x13a>
 800435c:	6863      	ldr	r3, [r4, #4]
 800435e:	4299      	cmp	r1, r3
 8004360:	dd41      	ble.n	80043e6 <_printf_float+0x1be>
 8004362:	f1ab 0b02 	sub.w	fp, fp, #2
 8004366:	fa5f fb8b 	uxtb.w	fp, fp
 800436a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800436e:	d820      	bhi.n	80043b2 <_printf_float+0x18a>
 8004370:	3901      	subs	r1, #1
 8004372:	465a      	mov	r2, fp
 8004374:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004378:	9109      	str	r1, [sp, #36]	; 0x24
 800437a:	f7ff ff17 	bl	80041ac <__exponent>
 800437e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004380:	1813      	adds	r3, r2, r0
 8004382:	2a01      	cmp	r2, #1
 8004384:	4681      	mov	r9, r0
 8004386:	6123      	str	r3, [r4, #16]
 8004388:	dc02      	bgt.n	8004390 <_printf_float+0x168>
 800438a:	6822      	ldr	r2, [r4, #0]
 800438c:	07d2      	lsls	r2, r2, #31
 800438e:	d501      	bpl.n	8004394 <_printf_float+0x16c>
 8004390:	3301      	adds	r3, #1
 8004392:	6123      	str	r3, [r4, #16]
 8004394:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004398:	2b00      	cmp	r3, #0
 800439a:	d09c      	beq.n	80042d6 <_printf_float+0xae>
 800439c:	232d      	movs	r3, #45	; 0x2d
 800439e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043a2:	e798      	b.n	80042d6 <_printf_float+0xae>
 80043a4:	9a06      	ldr	r2, [sp, #24]
 80043a6:	2a47      	cmp	r2, #71	; 0x47
 80043a8:	d1be      	bne.n	8004328 <_printf_float+0x100>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1bc      	bne.n	8004328 <_printf_float+0x100>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e7b9      	b.n	8004326 <_printf_float+0xfe>
 80043b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80043b6:	d118      	bne.n	80043ea <_printf_float+0x1c2>
 80043b8:	2900      	cmp	r1, #0
 80043ba:	6863      	ldr	r3, [r4, #4]
 80043bc:	dd0b      	ble.n	80043d6 <_printf_float+0x1ae>
 80043be:	6121      	str	r1, [r4, #16]
 80043c0:	b913      	cbnz	r3, 80043c8 <_printf_float+0x1a0>
 80043c2:	6822      	ldr	r2, [r4, #0]
 80043c4:	07d0      	lsls	r0, r2, #31
 80043c6:	d502      	bpl.n	80043ce <_printf_float+0x1a6>
 80043c8:	3301      	adds	r3, #1
 80043ca:	440b      	add	r3, r1
 80043cc:	6123      	str	r3, [r4, #16]
 80043ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80043d0:	f04f 0900 	mov.w	r9, #0
 80043d4:	e7de      	b.n	8004394 <_printf_float+0x16c>
 80043d6:	b913      	cbnz	r3, 80043de <_printf_float+0x1b6>
 80043d8:	6822      	ldr	r2, [r4, #0]
 80043da:	07d2      	lsls	r2, r2, #31
 80043dc:	d501      	bpl.n	80043e2 <_printf_float+0x1ba>
 80043de:	3302      	adds	r3, #2
 80043e0:	e7f4      	b.n	80043cc <_printf_float+0x1a4>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e7f2      	b.n	80043cc <_printf_float+0x1a4>
 80043e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80043ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043ec:	4299      	cmp	r1, r3
 80043ee:	db05      	blt.n	80043fc <_printf_float+0x1d4>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	6121      	str	r1, [r4, #16]
 80043f4:	07d8      	lsls	r0, r3, #31
 80043f6:	d5ea      	bpl.n	80043ce <_printf_float+0x1a6>
 80043f8:	1c4b      	adds	r3, r1, #1
 80043fa:	e7e7      	b.n	80043cc <_printf_float+0x1a4>
 80043fc:	2900      	cmp	r1, #0
 80043fe:	bfd4      	ite	le
 8004400:	f1c1 0202 	rsble	r2, r1, #2
 8004404:	2201      	movgt	r2, #1
 8004406:	4413      	add	r3, r2
 8004408:	e7e0      	b.n	80043cc <_printf_float+0x1a4>
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	055a      	lsls	r2, r3, #21
 800440e:	d407      	bmi.n	8004420 <_printf_float+0x1f8>
 8004410:	6923      	ldr	r3, [r4, #16]
 8004412:	4642      	mov	r2, r8
 8004414:	4631      	mov	r1, r6
 8004416:	4628      	mov	r0, r5
 8004418:	47b8      	blx	r7
 800441a:	3001      	adds	r0, #1
 800441c:	d12c      	bne.n	8004478 <_printf_float+0x250>
 800441e:	e764      	b.n	80042ea <_printf_float+0xc2>
 8004420:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004424:	f240 80e0 	bls.w	80045e8 <_printf_float+0x3c0>
 8004428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800442c:	2200      	movs	r2, #0
 800442e:	2300      	movs	r3, #0
 8004430:	f7fc fb4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004434:	2800      	cmp	r0, #0
 8004436:	d034      	beq.n	80044a2 <_printf_float+0x27a>
 8004438:	4a37      	ldr	r2, [pc, #220]	; (8004518 <_printf_float+0x2f0>)
 800443a:	2301      	movs	r3, #1
 800443c:	4631      	mov	r1, r6
 800443e:	4628      	mov	r0, r5
 8004440:	47b8      	blx	r7
 8004442:	3001      	adds	r0, #1
 8004444:	f43f af51 	beq.w	80042ea <_printf_float+0xc2>
 8004448:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800444c:	429a      	cmp	r2, r3
 800444e:	db02      	blt.n	8004456 <_printf_float+0x22e>
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	07d8      	lsls	r0, r3, #31
 8004454:	d510      	bpl.n	8004478 <_printf_float+0x250>
 8004456:	ee18 3a10 	vmov	r3, s16
 800445a:	4652      	mov	r2, sl
 800445c:	4631      	mov	r1, r6
 800445e:	4628      	mov	r0, r5
 8004460:	47b8      	blx	r7
 8004462:	3001      	adds	r0, #1
 8004464:	f43f af41 	beq.w	80042ea <_printf_float+0xc2>
 8004468:	f04f 0800 	mov.w	r8, #0
 800446c:	f104 091a 	add.w	r9, r4, #26
 8004470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004472:	3b01      	subs	r3, #1
 8004474:	4543      	cmp	r3, r8
 8004476:	dc09      	bgt.n	800448c <_printf_float+0x264>
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	079b      	lsls	r3, r3, #30
 800447c:	f100 8105 	bmi.w	800468a <_printf_float+0x462>
 8004480:	68e0      	ldr	r0, [r4, #12]
 8004482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004484:	4298      	cmp	r0, r3
 8004486:	bfb8      	it	lt
 8004488:	4618      	movlt	r0, r3
 800448a:	e730      	b.n	80042ee <_printf_float+0xc6>
 800448c:	2301      	movs	r3, #1
 800448e:	464a      	mov	r2, r9
 8004490:	4631      	mov	r1, r6
 8004492:	4628      	mov	r0, r5
 8004494:	47b8      	blx	r7
 8004496:	3001      	adds	r0, #1
 8004498:	f43f af27 	beq.w	80042ea <_printf_float+0xc2>
 800449c:	f108 0801 	add.w	r8, r8, #1
 80044a0:	e7e6      	b.n	8004470 <_printf_float+0x248>
 80044a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	dc39      	bgt.n	800451c <_printf_float+0x2f4>
 80044a8:	4a1b      	ldr	r2, [pc, #108]	; (8004518 <_printf_float+0x2f0>)
 80044aa:	2301      	movs	r3, #1
 80044ac:	4631      	mov	r1, r6
 80044ae:	4628      	mov	r0, r5
 80044b0:	47b8      	blx	r7
 80044b2:	3001      	adds	r0, #1
 80044b4:	f43f af19 	beq.w	80042ea <_printf_float+0xc2>
 80044b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044bc:	4313      	orrs	r3, r2
 80044be:	d102      	bne.n	80044c6 <_printf_float+0x29e>
 80044c0:	6823      	ldr	r3, [r4, #0]
 80044c2:	07d9      	lsls	r1, r3, #31
 80044c4:	d5d8      	bpl.n	8004478 <_printf_float+0x250>
 80044c6:	ee18 3a10 	vmov	r3, s16
 80044ca:	4652      	mov	r2, sl
 80044cc:	4631      	mov	r1, r6
 80044ce:	4628      	mov	r0, r5
 80044d0:	47b8      	blx	r7
 80044d2:	3001      	adds	r0, #1
 80044d4:	f43f af09 	beq.w	80042ea <_printf_float+0xc2>
 80044d8:	f04f 0900 	mov.w	r9, #0
 80044dc:	f104 0a1a 	add.w	sl, r4, #26
 80044e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044e2:	425b      	negs	r3, r3
 80044e4:	454b      	cmp	r3, r9
 80044e6:	dc01      	bgt.n	80044ec <_printf_float+0x2c4>
 80044e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044ea:	e792      	b.n	8004412 <_printf_float+0x1ea>
 80044ec:	2301      	movs	r3, #1
 80044ee:	4652      	mov	r2, sl
 80044f0:	4631      	mov	r1, r6
 80044f2:	4628      	mov	r0, r5
 80044f4:	47b8      	blx	r7
 80044f6:	3001      	adds	r0, #1
 80044f8:	f43f aef7 	beq.w	80042ea <_printf_float+0xc2>
 80044fc:	f109 0901 	add.w	r9, r9, #1
 8004500:	e7ee      	b.n	80044e0 <_printf_float+0x2b8>
 8004502:	bf00      	nop
 8004504:	7fefffff 	.word	0x7fefffff
 8004508:	08006ed0 	.word	0x08006ed0
 800450c:	08006ed4 	.word	0x08006ed4
 8004510:	08006edc 	.word	0x08006edc
 8004514:	08006ed8 	.word	0x08006ed8
 8004518:	08006ee0 	.word	0x08006ee0
 800451c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800451e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004520:	429a      	cmp	r2, r3
 8004522:	bfa8      	it	ge
 8004524:	461a      	movge	r2, r3
 8004526:	2a00      	cmp	r2, #0
 8004528:	4691      	mov	r9, r2
 800452a:	dc37      	bgt.n	800459c <_printf_float+0x374>
 800452c:	f04f 0b00 	mov.w	fp, #0
 8004530:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004534:	f104 021a 	add.w	r2, r4, #26
 8004538:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800453a:	9305      	str	r3, [sp, #20]
 800453c:	eba3 0309 	sub.w	r3, r3, r9
 8004540:	455b      	cmp	r3, fp
 8004542:	dc33      	bgt.n	80045ac <_printf_float+0x384>
 8004544:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004548:	429a      	cmp	r2, r3
 800454a:	db3b      	blt.n	80045c4 <_printf_float+0x39c>
 800454c:	6823      	ldr	r3, [r4, #0]
 800454e:	07da      	lsls	r2, r3, #31
 8004550:	d438      	bmi.n	80045c4 <_printf_float+0x39c>
 8004552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004554:	9a05      	ldr	r2, [sp, #20]
 8004556:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004558:	1a9a      	subs	r2, r3, r2
 800455a:	eba3 0901 	sub.w	r9, r3, r1
 800455e:	4591      	cmp	r9, r2
 8004560:	bfa8      	it	ge
 8004562:	4691      	movge	r9, r2
 8004564:	f1b9 0f00 	cmp.w	r9, #0
 8004568:	dc35      	bgt.n	80045d6 <_printf_float+0x3ae>
 800456a:	f04f 0800 	mov.w	r8, #0
 800456e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004572:	f104 0a1a 	add.w	sl, r4, #26
 8004576:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800457a:	1a9b      	subs	r3, r3, r2
 800457c:	eba3 0309 	sub.w	r3, r3, r9
 8004580:	4543      	cmp	r3, r8
 8004582:	f77f af79 	ble.w	8004478 <_printf_float+0x250>
 8004586:	2301      	movs	r3, #1
 8004588:	4652      	mov	r2, sl
 800458a:	4631      	mov	r1, r6
 800458c:	4628      	mov	r0, r5
 800458e:	47b8      	blx	r7
 8004590:	3001      	adds	r0, #1
 8004592:	f43f aeaa 	beq.w	80042ea <_printf_float+0xc2>
 8004596:	f108 0801 	add.w	r8, r8, #1
 800459a:	e7ec      	b.n	8004576 <_printf_float+0x34e>
 800459c:	4613      	mov	r3, r2
 800459e:	4631      	mov	r1, r6
 80045a0:	4642      	mov	r2, r8
 80045a2:	4628      	mov	r0, r5
 80045a4:	47b8      	blx	r7
 80045a6:	3001      	adds	r0, #1
 80045a8:	d1c0      	bne.n	800452c <_printf_float+0x304>
 80045aa:	e69e      	b.n	80042ea <_printf_float+0xc2>
 80045ac:	2301      	movs	r3, #1
 80045ae:	4631      	mov	r1, r6
 80045b0:	4628      	mov	r0, r5
 80045b2:	9205      	str	r2, [sp, #20]
 80045b4:	47b8      	blx	r7
 80045b6:	3001      	adds	r0, #1
 80045b8:	f43f ae97 	beq.w	80042ea <_printf_float+0xc2>
 80045bc:	9a05      	ldr	r2, [sp, #20]
 80045be:	f10b 0b01 	add.w	fp, fp, #1
 80045c2:	e7b9      	b.n	8004538 <_printf_float+0x310>
 80045c4:	ee18 3a10 	vmov	r3, s16
 80045c8:	4652      	mov	r2, sl
 80045ca:	4631      	mov	r1, r6
 80045cc:	4628      	mov	r0, r5
 80045ce:	47b8      	blx	r7
 80045d0:	3001      	adds	r0, #1
 80045d2:	d1be      	bne.n	8004552 <_printf_float+0x32a>
 80045d4:	e689      	b.n	80042ea <_printf_float+0xc2>
 80045d6:	9a05      	ldr	r2, [sp, #20]
 80045d8:	464b      	mov	r3, r9
 80045da:	4442      	add	r2, r8
 80045dc:	4631      	mov	r1, r6
 80045de:	4628      	mov	r0, r5
 80045e0:	47b8      	blx	r7
 80045e2:	3001      	adds	r0, #1
 80045e4:	d1c1      	bne.n	800456a <_printf_float+0x342>
 80045e6:	e680      	b.n	80042ea <_printf_float+0xc2>
 80045e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045ea:	2a01      	cmp	r2, #1
 80045ec:	dc01      	bgt.n	80045f2 <_printf_float+0x3ca>
 80045ee:	07db      	lsls	r3, r3, #31
 80045f0:	d538      	bpl.n	8004664 <_printf_float+0x43c>
 80045f2:	2301      	movs	r3, #1
 80045f4:	4642      	mov	r2, r8
 80045f6:	4631      	mov	r1, r6
 80045f8:	4628      	mov	r0, r5
 80045fa:	47b8      	blx	r7
 80045fc:	3001      	adds	r0, #1
 80045fe:	f43f ae74 	beq.w	80042ea <_printf_float+0xc2>
 8004602:	ee18 3a10 	vmov	r3, s16
 8004606:	4652      	mov	r2, sl
 8004608:	4631      	mov	r1, r6
 800460a:	4628      	mov	r0, r5
 800460c:	47b8      	blx	r7
 800460e:	3001      	adds	r0, #1
 8004610:	f43f ae6b 	beq.w	80042ea <_printf_float+0xc2>
 8004614:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004618:	2200      	movs	r2, #0
 800461a:	2300      	movs	r3, #0
 800461c:	f7fc fa54 	bl	8000ac8 <__aeabi_dcmpeq>
 8004620:	b9d8      	cbnz	r0, 800465a <_printf_float+0x432>
 8004622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004624:	f108 0201 	add.w	r2, r8, #1
 8004628:	3b01      	subs	r3, #1
 800462a:	4631      	mov	r1, r6
 800462c:	4628      	mov	r0, r5
 800462e:	47b8      	blx	r7
 8004630:	3001      	adds	r0, #1
 8004632:	d10e      	bne.n	8004652 <_printf_float+0x42a>
 8004634:	e659      	b.n	80042ea <_printf_float+0xc2>
 8004636:	2301      	movs	r3, #1
 8004638:	4652      	mov	r2, sl
 800463a:	4631      	mov	r1, r6
 800463c:	4628      	mov	r0, r5
 800463e:	47b8      	blx	r7
 8004640:	3001      	adds	r0, #1
 8004642:	f43f ae52 	beq.w	80042ea <_printf_float+0xc2>
 8004646:	f108 0801 	add.w	r8, r8, #1
 800464a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800464c:	3b01      	subs	r3, #1
 800464e:	4543      	cmp	r3, r8
 8004650:	dcf1      	bgt.n	8004636 <_printf_float+0x40e>
 8004652:	464b      	mov	r3, r9
 8004654:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004658:	e6dc      	b.n	8004414 <_printf_float+0x1ec>
 800465a:	f04f 0800 	mov.w	r8, #0
 800465e:	f104 0a1a 	add.w	sl, r4, #26
 8004662:	e7f2      	b.n	800464a <_printf_float+0x422>
 8004664:	2301      	movs	r3, #1
 8004666:	4642      	mov	r2, r8
 8004668:	e7df      	b.n	800462a <_printf_float+0x402>
 800466a:	2301      	movs	r3, #1
 800466c:	464a      	mov	r2, r9
 800466e:	4631      	mov	r1, r6
 8004670:	4628      	mov	r0, r5
 8004672:	47b8      	blx	r7
 8004674:	3001      	adds	r0, #1
 8004676:	f43f ae38 	beq.w	80042ea <_printf_float+0xc2>
 800467a:	f108 0801 	add.w	r8, r8, #1
 800467e:	68e3      	ldr	r3, [r4, #12]
 8004680:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004682:	1a5b      	subs	r3, r3, r1
 8004684:	4543      	cmp	r3, r8
 8004686:	dcf0      	bgt.n	800466a <_printf_float+0x442>
 8004688:	e6fa      	b.n	8004480 <_printf_float+0x258>
 800468a:	f04f 0800 	mov.w	r8, #0
 800468e:	f104 0919 	add.w	r9, r4, #25
 8004692:	e7f4      	b.n	800467e <_printf_float+0x456>

08004694 <_printf_common>:
 8004694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004698:	4616      	mov	r6, r2
 800469a:	4699      	mov	r9, r3
 800469c:	688a      	ldr	r2, [r1, #8]
 800469e:	690b      	ldr	r3, [r1, #16]
 80046a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046a4:	4293      	cmp	r3, r2
 80046a6:	bfb8      	it	lt
 80046a8:	4613      	movlt	r3, r2
 80046aa:	6033      	str	r3, [r6, #0]
 80046ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046b0:	4607      	mov	r7, r0
 80046b2:	460c      	mov	r4, r1
 80046b4:	b10a      	cbz	r2, 80046ba <_printf_common+0x26>
 80046b6:	3301      	adds	r3, #1
 80046b8:	6033      	str	r3, [r6, #0]
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	0699      	lsls	r1, r3, #26
 80046be:	bf42      	ittt	mi
 80046c0:	6833      	ldrmi	r3, [r6, #0]
 80046c2:	3302      	addmi	r3, #2
 80046c4:	6033      	strmi	r3, [r6, #0]
 80046c6:	6825      	ldr	r5, [r4, #0]
 80046c8:	f015 0506 	ands.w	r5, r5, #6
 80046cc:	d106      	bne.n	80046dc <_printf_common+0x48>
 80046ce:	f104 0a19 	add.w	sl, r4, #25
 80046d2:	68e3      	ldr	r3, [r4, #12]
 80046d4:	6832      	ldr	r2, [r6, #0]
 80046d6:	1a9b      	subs	r3, r3, r2
 80046d8:	42ab      	cmp	r3, r5
 80046da:	dc26      	bgt.n	800472a <_printf_common+0x96>
 80046dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046e0:	1e13      	subs	r3, r2, #0
 80046e2:	6822      	ldr	r2, [r4, #0]
 80046e4:	bf18      	it	ne
 80046e6:	2301      	movne	r3, #1
 80046e8:	0692      	lsls	r2, r2, #26
 80046ea:	d42b      	bmi.n	8004744 <_printf_common+0xb0>
 80046ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046f0:	4649      	mov	r1, r9
 80046f2:	4638      	mov	r0, r7
 80046f4:	47c0      	blx	r8
 80046f6:	3001      	adds	r0, #1
 80046f8:	d01e      	beq.n	8004738 <_printf_common+0xa4>
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	68e5      	ldr	r5, [r4, #12]
 80046fe:	6832      	ldr	r2, [r6, #0]
 8004700:	f003 0306 	and.w	r3, r3, #6
 8004704:	2b04      	cmp	r3, #4
 8004706:	bf08      	it	eq
 8004708:	1aad      	subeq	r5, r5, r2
 800470a:	68a3      	ldr	r3, [r4, #8]
 800470c:	6922      	ldr	r2, [r4, #16]
 800470e:	bf0c      	ite	eq
 8004710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004714:	2500      	movne	r5, #0
 8004716:	4293      	cmp	r3, r2
 8004718:	bfc4      	itt	gt
 800471a:	1a9b      	subgt	r3, r3, r2
 800471c:	18ed      	addgt	r5, r5, r3
 800471e:	2600      	movs	r6, #0
 8004720:	341a      	adds	r4, #26
 8004722:	42b5      	cmp	r5, r6
 8004724:	d11a      	bne.n	800475c <_printf_common+0xc8>
 8004726:	2000      	movs	r0, #0
 8004728:	e008      	b.n	800473c <_printf_common+0xa8>
 800472a:	2301      	movs	r3, #1
 800472c:	4652      	mov	r2, sl
 800472e:	4649      	mov	r1, r9
 8004730:	4638      	mov	r0, r7
 8004732:	47c0      	blx	r8
 8004734:	3001      	adds	r0, #1
 8004736:	d103      	bne.n	8004740 <_printf_common+0xac>
 8004738:	f04f 30ff 	mov.w	r0, #4294967295
 800473c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004740:	3501      	adds	r5, #1
 8004742:	e7c6      	b.n	80046d2 <_printf_common+0x3e>
 8004744:	18e1      	adds	r1, r4, r3
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	2030      	movs	r0, #48	; 0x30
 800474a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800474e:	4422      	add	r2, r4
 8004750:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004754:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004758:	3302      	adds	r3, #2
 800475a:	e7c7      	b.n	80046ec <_printf_common+0x58>
 800475c:	2301      	movs	r3, #1
 800475e:	4622      	mov	r2, r4
 8004760:	4649      	mov	r1, r9
 8004762:	4638      	mov	r0, r7
 8004764:	47c0      	blx	r8
 8004766:	3001      	adds	r0, #1
 8004768:	d0e6      	beq.n	8004738 <_printf_common+0xa4>
 800476a:	3601      	adds	r6, #1
 800476c:	e7d9      	b.n	8004722 <_printf_common+0x8e>
	...

08004770 <_printf_i>:
 8004770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004774:	7e0f      	ldrb	r7, [r1, #24]
 8004776:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004778:	2f78      	cmp	r7, #120	; 0x78
 800477a:	4691      	mov	r9, r2
 800477c:	4680      	mov	r8, r0
 800477e:	460c      	mov	r4, r1
 8004780:	469a      	mov	sl, r3
 8004782:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004786:	d807      	bhi.n	8004798 <_printf_i+0x28>
 8004788:	2f62      	cmp	r7, #98	; 0x62
 800478a:	d80a      	bhi.n	80047a2 <_printf_i+0x32>
 800478c:	2f00      	cmp	r7, #0
 800478e:	f000 80d8 	beq.w	8004942 <_printf_i+0x1d2>
 8004792:	2f58      	cmp	r7, #88	; 0x58
 8004794:	f000 80a3 	beq.w	80048de <_printf_i+0x16e>
 8004798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800479c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047a0:	e03a      	b.n	8004818 <_printf_i+0xa8>
 80047a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047a6:	2b15      	cmp	r3, #21
 80047a8:	d8f6      	bhi.n	8004798 <_printf_i+0x28>
 80047aa:	a101      	add	r1, pc, #4	; (adr r1, 80047b0 <_printf_i+0x40>)
 80047ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047b0:	08004809 	.word	0x08004809
 80047b4:	0800481d 	.word	0x0800481d
 80047b8:	08004799 	.word	0x08004799
 80047bc:	08004799 	.word	0x08004799
 80047c0:	08004799 	.word	0x08004799
 80047c4:	08004799 	.word	0x08004799
 80047c8:	0800481d 	.word	0x0800481d
 80047cc:	08004799 	.word	0x08004799
 80047d0:	08004799 	.word	0x08004799
 80047d4:	08004799 	.word	0x08004799
 80047d8:	08004799 	.word	0x08004799
 80047dc:	08004929 	.word	0x08004929
 80047e0:	0800484d 	.word	0x0800484d
 80047e4:	0800490b 	.word	0x0800490b
 80047e8:	08004799 	.word	0x08004799
 80047ec:	08004799 	.word	0x08004799
 80047f0:	0800494b 	.word	0x0800494b
 80047f4:	08004799 	.word	0x08004799
 80047f8:	0800484d 	.word	0x0800484d
 80047fc:	08004799 	.word	0x08004799
 8004800:	08004799 	.word	0x08004799
 8004804:	08004913 	.word	0x08004913
 8004808:	682b      	ldr	r3, [r5, #0]
 800480a:	1d1a      	adds	r2, r3, #4
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	602a      	str	r2, [r5, #0]
 8004810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004814:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004818:	2301      	movs	r3, #1
 800481a:	e0a3      	b.n	8004964 <_printf_i+0x1f4>
 800481c:	6820      	ldr	r0, [r4, #0]
 800481e:	6829      	ldr	r1, [r5, #0]
 8004820:	0606      	lsls	r6, r0, #24
 8004822:	f101 0304 	add.w	r3, r1, #4
 8004826:	d50a      	bpl.n	800483e <_printf_i+0xce>
 8004828:	680e      	ldr	r6, [r1, #0]
 800482a:	602b      	str	r3, [r5, #0]
 800482c:	2e00      	cmp	r6, #0
 800482e:	da03      	bge.n	8004838 <_printf_i+0xc8>
 8004830:	232d      	movs	r3, #45	; 0x2d
 8004832:	4276      	negs	r6, r6
 8004834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004838:	485e      	ldr	r0, [pc, #376]	; (80049b4 <_printf_i+0x244>)
 800483a:	230a      	movs	r3, #10
 800483c:	e019      	b.n	8004872 <_printf_i+0x102>
 800483e:	680e      	ldr	r6, [r1, #0]
 8004840:	602b      	str	r3, [r5, #0]
 8004842:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004846:	bf18      	it	ne
 8004848:	b236      	sxthne	r6, r6
 800484a:	e7ef      	b.n	800482c <_printf_i+0xbc>
 800484c:	682b      	ldr	r3, [r5, #0]
 800484e:	6820      	ldr	r0, [r4, #0]
 8004850:	1d19      	adds	r1, r3, #4
 8004852:	6029      	str	r1, [r5, #0]
 8004854:	0601      	lsls	r1, r0, #24
 8004856:	d501      	bpl.n	800485c <_printf_i+0xec>
 8004858:	681e      	ldr	r6, [r3, #0]
 800485a:	e002      	b.n	8004862 <_printf_i+0xf2>
 800485c:	0646      	lsls	r6, r0, #25
 800485e:	d5fb      	bpl.n	8004858 <_printf_i+0xe8>
 8004860:	881e      	ldrh	r6, [r3, #0]
 8004862:	4854      	ldr	r0, [pc, #336]	; (80049b4 <_printf_i+0x244>)
 8004864:	2f6f      	cmp	r7, #111	; 0x6f
 8004866:	bf0c      	ite	eq
 8004868:	2308      	moveq	r3, #8
 800486a:	230a      	movne	r3, #10
 800486c:	2100      	movs	r1, #0
 800486e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004872:	6865      	ldr	r5, [r4, #4]
 8004874:	60a5      	str	r5, [r4, #8]
 8004876:	2d00      	cmp	r5, #0
 8004878:	bfa2      	ittt	ge
 800487a:	6821      	ldrge	r1, [r4, #0]
 800487c:	f021 0104 	bicge.w	r1, r1, #4
 8004880:	6021      	strge	r1, [r4, #0]
 8004882:	b90e      	cbnz	r6, 8004888 <_printf_i+0x118>
 8004884:	2d00      	cmp	r5, #0
 8004886:	d04d      	beq.n	8004924 <_printf_i+0x1b4>
 8004888:	4615      	mov	r5, r2
 800488a:	fbb6 f1f3 	udiv	r1, r6, r3
 800488e:	fb03 6711 	mls	r7, r3, r1, r6
 8004892:	5dc7      	ldrb	r7, [r0, r7]
 8004894:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004898:	4637      	mov	r7, r6
 800489a:	42bb      	cmp	r3, r7
 800489c:	460e      	mov	r6, r1
 800489e:	d9f4      	bls.n	800488a <_printf_i+0x11a>
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d10b      	bne.n	80048bc <_printf_i+0x14c>
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	07de      	lsls	r6, r3, #31
 80048a8:	d508      	bpl.n	80048bc <_printf_i+0x14c>
 80048aa:	6923      	ldr	r3, [r4, #16]
 80048ac:	6861      	ldr	r1, [r4, #4]
 80048ae:	4299      	cmp	r1, r3
 80048b0:	bfde      	ittt	le
 80048b2:	2330      	movle	r3, #48	; 0x30
 80048b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048bc:	1b52      	subs	r2, r2, r5
 80048be:	6122      	str	r2, [r4, #16]
 80048c0:	f8cd a000 	str.w	sl, [sp]
 80048c4:	464b      	mov	r3, r9
 80048c6:	aa03      	add	r2, sp, #12
 80048c8:	4621      	mov	r1, r4
 80048ca:	4640      	mov	r0, r8
 80048cc:	f7ff fee2 	bl	8004694 <_printf_common>
 80048d0:	3001      	adds	r0, #1
 80048d2:	d14c      	bne.n	800496e <_printf_i+0x1fe>
 80048d4:	f04f 30ff 	mov.w	r0, #4294967295
 80048d8:	b004      	add	sp, #16
 80048da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048de:	4835      	ldr	r0, [pc, #212]	; (80049b4 <_printf_i+0x244>)
 80048e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80048e4:	6829      	ldr	r1, [r5, #0]
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80048ec:	6029      	str	r1, [r5, #0]
 80048ee:	061d      	lsls	r5, r3, #24
 80048f0:	d514      	bpl.n	800491c <_printf_i+0x1ac>
 80048f2:	07df      	lsls	r7, r3, #31
 80048f4:	bf44      	itt	mi
 80048f6:	f043 0320 	orrmi.w	r3, r3, #32
 80048fa:	6023      	strmi	r3, [r4, #0]
 80048fc:	b91e      	cbnz	r6, 8004906 <_printf_i+0x196>
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	f023 0320 	bic.w	r3, r3, #32
 8004904:	6023      	str	r3, [r4, #0]
 8004906:	2310      	movs	r3, #16
 8004908:	e7b0      	b.n	800486c <_printf_i+0xfc>
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	f043 0320 	orr.w	r3, r3, #32
 8004910:	6023      	str	r3, [r4, #0]
 8004912:	2378      	movs	r3, #120	; 0x78
 8004914:	4828      	ldr	r0, [pc, #160]	; (80049b8 <_printf_i+0x248>)
 8004916:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800491a:	e7e3      	b.n	80048e4 <_printf_i+0x174>
 800491c:	0659      	lsls	r1, r3, #25
 800491e:	bf48      	it	mi
 8004920:	b2b6      	uxthmi	r6, r6
 8004922:	e7e6      	b.n	80048f2 <_printf_i+0x182>
 8004924:	4615      	mov	r5, r2
 8004926:	e7bb      	b.n	80048a0 <_printf_i+0x130>
 8004928:	682b      	ldr	r3, [r5, #0]
 800492a:	6826      	ldr	r6, [r4, #0]
 800492c:	6961      	ldr	r1, [r4, #20]
 800492e:	1d18      	adds	r0, r3, #4
 8004930:	6028      	str	r0, [r5, #0]
 8004932:	0635      	lsls	r5, r6, #24
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	d501      	bpl.n	800493c <_printf_i+0x1cc>
 8004938:	6019      	str	r1, [r3, #0]
 800493a:	e002      	b.n	8004942 <_printf_i+0x1d2>
 800493c:	0670      	lsls	r0, r6, #25
 800493e:	d5fb      	bpl.n	8004938 <_printf_i+0x1c8>
 8004940:	8019      	strh	r1, [r3, #0]
 8004942:	2300      	movs	r3, #0
 8004944:	6123      	str	r3, [r4, #16]
 8004946:	4615      	mov	r5, r2
 8004948:	e7ba      	b.n	80048c0 <_printf_i+0x150>
 800494a:	682b      	ldr	r3, [r5, #0]
 800494c:	1d1a      	adds	r2, r3, #4
 800494e:	602a      	str	r2, [r5, #0]
 8004950:	681d      	ldr	r5, [r3, #0]
 8004952:	6862      	ldr	r2, [r4, #4]
 8004954:	2100      	movs	r1, #0
 8004956:	4628      	mov	r0, r5
 8004958:	f7fb fc42 	bl	80001e0 <memchr>
 800495c:	b108      	cbz	r0, 8004962 <_printf_i+0x1f2>
 800495e:	1b40      	subs	r0, r0, r5
 8004960:	6060      	str	r0, [r4, #4]
 8004962:	6863      	ldr	r3, [r4, #4]
 8004964:	6123      	str	r3, [r4, #16]
 8004966:	2300      	movs	r3, #0
 8004968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800496c:	e7a8      	b.n	80048c0 <_printf_i+0x150>
 800496e:	6923      	ldr	r3, [r4, #16]
 8004970:	462a      	mov	r2, r5
 8004972:	4649      	mov	r1, r9
 8004974:	4640      	mov	r0, r8
 8004976:	47d0      	blx	sl
 8004978:	3001      	adds	r0, #1
 800497a:	d0ab      	beq.n	80048d4 <_printf_i+0x164>
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	079b      	lsls	r3, r3, #30
 8004980:	d413      	bmi.n	80049aa <_printf_i+0x23a>
 8004982:	68e0      	ldr	r0, [r4, #12]
 8004984:	9b03      	ldr	r3, [sp, #12]
 8004986:	4298      	cmp	r0, r3
 8004988:	bfb8      	it	lt
 800498a:	4618      	movlt	r0, r3
 800498c:	e7a4      	b.n	80048d8 <_printf_i+0x168>
 800498e:	2301      	movs	r3, #1
 8004990:	4632      	mov	r2, r6
 8004992:	4649      	mov	r1, r9
 8004994:	4640      	mov	r0, r8
 8004996:	47d0      	blx	sl
 8004998:	3001      	adds	r0, #1
 800499a:	d09b      	beq.n	80048d4 <_printf_i+0x164>
 800499c:	3501      	adds	r5, #1
 800499e:	68e3      	ldr	r3, [r4, #12]
 80049a0:	9903      	ldr	r1, [sp, #12]
 80049a2:	1a5b      	subs	r3, r3, r1
 80049a4:	42ab      	cmp	r3, r5
 80049a6:	dcf2      	bgt.n	800498e <_printf_i+0x21e>
 80049a8:	e7eb      	b.n	8004982 <_printf_i+0x212>
 80049aa:	2500      	movs	r5, #0
 80049ac:	f104 0619 	add.w	r6, r4, #25
 80049b0:	e7f5      	b.n	800499e <_printf_i+0x22e>
 80049b2:	bf00      	nop
 80049b4:	08006ee2 	.word	0x08006ee2
 80049b8:	08006ef3 	.word	0x08006ef3

080049bc <iprintf>:
 80049bc:	b40f      	push	{r0, r1, r2, r3}
 80049be:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <iprintf+0x2c>)
 80049c0:	b513      	push	{r0, r1, r4, lr}
 80049c2:	681c      	ldr	r4, [r3, #0]
 80049c4:	b124      	cbz	r4, 80049d0 <iprintf+0x14>
 80049c6:	69a3      	ldr	r3, [r4, #24]
 80049c8:	b913      	cbnz	r3, 80049d0 <iprintf+0x14>
 80049ca:	4620      	mov	r0, r4
 80049cc:	f001 f9a8 	bl	8005d20 <__sinit>
 80049d0:	ab05      	add	r3, sp, #20
 80049d2:	9a04      	ldr	r2, [sp, #16]
 80049d4:	68a1      	ldr	r1, [r4, #8]
 80049d6:	9301      	str	r3, [sp, #4]
 80049d8:	4620      	mov	r0, r4
 80049da:	f001 ff65 	bl	80068a8 <_vfiprintf_r>
 80049de:	b002      	add	sp, #8
 80049e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049e4:	b004      	add	sp, #16
 80049e6:	4770      	bx	lr
 80049e8:	2000000c 	.word	0x2000000c

080049ec <_puts_r>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	460e      	mov	r6, r1
 80049f0:	4605      	mov	r5, r0
 80049f2:	b118      	cbz	r0, 80049fc <_puts_r+0x10>
 80049f4:	6983      	ldr	r3, [r0, #24]
 80049f6:	b90b      	cbnz	r3, 80049fc <_puts_r+0x10>
 80049f8:	f001 f992 	bl	8005d20 <__sinit>
 80049fc:	69ab      	ldr	r3, [r5, #24]
 80049fe:	68ac      	ldr	r4, [r5, #8]
 8004a00:	b913      	cbnz	r3, 8004a08 <_puts_r+0x1c>
 8004a02:	4628      	mov	r0, r5
 8004a04:	f001 f98c 	bl	8005d20 <__sinit>
 8004a08:	4b2c      	ldr	r3, [pc, #176]	; (8004abc <_puts_r+0xd0>)
 8004a0a:	429c      	cmp	r4, r3
 8004a0c:	d120      	bne.n	8004a50 <_puts_r+0x64>
 8004a0e:	686c      	ldr	r4, [r5, #4]
 8004a10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a12:	07db      	lsls	r3, r3, #31
 8004a14:	d405      	bmi.n	8004a22 <_puts_r+0x36>
 8004a16:	89a3      	ldrh	r3, [r4, #12]
 8004a18:	0598      	lsls	r0, r3, #22
 8004a1a:	d402      	bmi.n	8004a22 <_puts_r+0x36>
 8004a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a1e:	f001 fa22 	bl	8005e66 <__retarget_lock_acquire_recursive>
 8004a22:	89a3      	ldrh	r3, [r4, #12]
 8004a24:	0719      	lsls	r1, r3, #28
 8004a26:	d51d      	bpl.n	8004a64 <_puts_r+0x78>
 8004a28:	6923      	ldr	r3, [r4, #16]
 8004a2a:	b1db      	cbz	r3, 8004a64 <_puts_r+0x78>
 8004a2c:	3e01      	subs	r6, #1
 8004a2e:	68a3      	ldr	r3, [r4, #8]
 8004a30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a34:	3b01      	subs	r3, #1
 8004a36:	60a3      	str	r3, [r4, #8]
 8004a38:	bb39      	cbnz	r1, 8004a8a <_puts_r+0x9e>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	da38      	bge.n	8004ab0 <_puts_r+0xc4>
 8004a3e:	4622      	mov	r2, r4
 8004a40:	210a      	movs	r1, #10
 8004a42:	4628      	mov	r0, r5
 8004a44:	f000 f916 	bl	8004c74 <__swbuf_r>
 8004a48:	3001      	adds	r0, #1
 8004a4a:	d011      	beq.n	8004a70 <_puts_r+0x84>
 8004a4c:	250a      	movs	r5, #10
 8004a4e:	e011      	b.n	8004a74 <_puts_r+0x88>
 8004a50:	4b1b      	ldr	r3, [pc, #108]	; (8004ac0 <_puts_r+0xd4>)
 8004a52:	429c      	cmp	r4, r3
 8004a54:	d101      	bne.n	8004a5a <_puts_r+0x6e>
 8004a56:	68ac      	ldr	r4, [r5, #8]
 8004a58:	e7da      	b.n	8004a10 <_puts_r+0x24>
 8004a5a:	4b1a      	ldr	r3, [pc, #104]	; (8004ac4 <_puts_r+0xd8>)
 8004a5c:	429c      	cmp	r4, r3
 8004a5e:	bf08      	it	eq
 8004a60:	68ec      	ldreq	r4, [r5, #12]
 8004a62:	e7d5      	b.n	8004a10 <_puts_r+0x24>
 8004a64:	4621      	mov	r1, r4
 8004a66:	4628      	mov	r0, r5
 8004a68:	f000 f956 	bl	8004d18 <__swsetup_r>
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	d0dd      	beq.n	8004a2c <_puts_r+0x40>
 8004a70:	f04f 35ff 	mov.w	r5, #4294967295
 8004a74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a76:	07da      	lsls	r2, r3, #31
 8004a78:	d405      	bmi.n	8004a86 <_puts_r+0x9a>
 8004a7a:	89a3      	ldrh	r3, [r4, #12]
 8004a7c:	059b      	lsls	r3, r3, #22
 8004a7e:	d402      	bmi.n	8004a86 <_puts_r+0x9a>
 8004a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a82:	f001 f9f1 	bl	8005e68 <__retarget_lock_release_recursive>
 8004a86:	4628      	mov	r0, r5
 8004a88:	bd70      	pop	{r4, r5, r6, pc}
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	da04      	bge.n	8004a98 <_puts_r+0xac>
 8004a8e:	69a2      	ldr	r2, [r4, #24]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	dc06      	bgt.n	8004aa2 <_puts_r+0xb6>
 8004a94:	290a      	cmp	r1, #10
 8004a96:	d004      	beq.n	8004aa2 <_puts_r+0xb6>
 8004a98:	6823      	ldr	r3, [r4, #0]
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	6022      	str	r2, [r4, #0]
 8004a9e:	7019      	strb	r1, [r3, #0]
 8004aa0:	e7c5      	b.n	8004a2e <_puts_r+0x42>
 8004aa2:	4622      	mov	r2, r4
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	f000 f8e5 	bl	8004c74 <__swbuf_r>
 8004aaa:	3001      	adds	r0, #1
 8004aac:	d1bf      	bne.n	8004a2e <_puts_r+0x42>
 8004aae:	e7df      	b.n	8004a70 <_puts_r+0x84>
 8004ab0:	6823      	ldr	r3, [r4, #0]
 8004ab2:	250a      	movs	r5, #10
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	6022      	str	r2, [r4, #0]
 8004ab8:	701d      	strb	r5, [r3, #0]
 8004aba:	e7db      	b.n	8004a74 <_puts_r+0x88>
 8004abc:	08006fb4 	.word	0x08006fb4
 8004ac0:	08006fd4 	.word	0x08006fd4
 8004ac4:	08006f94 	.word	0x08006f94

08004ac8 <puts>:
 8004ac8:	4b02      	ldr	r3, [pc, #8]	; (8004ad4 <puts+0xc>)
 8004aca:	4601      	mov	r1, r0
 8004acc:	6818      	ldr	r0, [r3, #0]
 8004ace:	f7ff bf8d 	b.w	80049ec <_puts_r>
 8004ad2:	bf00      	nop
 8004ad4:	2000000c 	.word	0x2000000c

08004ad8 <setbuf>:
 8004ad8:	2900      	cmp	r1, #0
 8004ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ade:	bf0c      	ite	eq
 8004ae0:	2202      	moveq	r2, #2
 8004ae2:	2200      	movne	r2, #0
 8004ae4:	f000 b800 	b.w	8004ae8 <setvbuf>

08004ae8 <setvbuf>:
 8004ae8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004aec:	461d      	mov	r5, r3
 8004aee:	4b5d      	ldr	r3, [pc, #372]	; (8004c64 <setvbuf+0x17c>)
 8004af0:	681f      	ldr	r7, [r3, #0]
 8004af2:	4604      	mov	r4, r0
 8004af4:	460e      	mov	r6, r1
 8004af6:	4690      	mov	r8, r2
 8004af8:	b127      	cbz	r7, 8004b04 <setvbuf+0x1c>
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	b913      	cbnz	r3, 8004b04 <setvbuf+0x1c>
 8004afe:	4638      	mov	r0, r7
 8004b00:	f001 f90e 	bl	8005d20 <__sinit>
 8004b04:	4b58      	ldr	r3, [pc, #352]	; (8004c68 <setvbuf+0x180>)
 8004b06:	429c      	cmp	r4, r3
 8004b08:	d167      	bne.n	8004bda <setvbuf+0xf2>
 8004b0a:	687c      	ldr	r4, [r7, #4]
 8004b0c:	f1b8 0f02 	cmp.w	r8, #2
 8004b10:	d006      	beq.n	8004b20 <setvbuf+0x38>
 8004b12:	f1b8 0f01 	cmp.w	r8, #1
 8004b16:	f200 809f 	bhi.w	8004c58 <setvbuf+0x170>
 8004b1a:	2d00      	cmp	r5, #0
 8004b1c:	f2c0 809c 	blt.w	8004c58 <setvbuf+0x170>
 8004b20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b22:	07db      	lsls	r3, r3, #31
 8004b24:	d405      	bmi.n	8004b32 <setvbuf+0x4a>
 8004b26:	89a3      	ldrh	r3, [r4, #12]
 8004b28:	0598      	lsls	r0, r3, #22
 8004b2a:	d402      	bmi.n	8004b32 <setvbuf+0x4a>
 8004b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b2e:	f001 f99a 	bl	8005e66 <__retarget_lock_acquire_recursive>
 8004b32:	4621      	mov	r1, r4
 8004b34:	4638      	mov	r0, r7
 8004b36:	f001 f85f 	bl	8005bf8 <_fflush_r>
 8004b3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b3c:	b141      	cbz	r1, 8004b50 <setvbuf+0x68>
 8004b3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b42:	4299      	cmp	r1, r3
 8004b44:	d002      	beq.n	8004b4c <setvbuf+0x64>
 8004b46:	4638      	mov	r0, r7
 8004b48:	f001 fda4 	bl	8006694 <_free_r>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	6363      	str	r3, [r4, #52]	; 0x34
 8004b50:	2300      	movs	r3, #0
 8004b52:	61a3      	str	r3, [r4, #24]
 8004b54:	6063      	str	r3, [r4, #4]
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	0619      	lsls	r1, r3, #24
 8004b5a:	d503      	bpl.n	8004b64 <setvbuf+0x7c>
 8004b5c:	6921      	ldr	r1, [r4, #16]
 8004b5e:	4638      	mov	r0, r7
 8004b60:	f001 fd98 	bl	8006694 <_free_r>
 8004b64:	89a3      	ldrh	r3, [r4, #12]
 8004b66:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004b6a:	f023 0303 	bic.w	r3, r3, #3
 8004b6e:	f1b8 0f02 	cmp.w	r8, #2
 8004b72:	81a3      	strh	r3, [r4, #12]
 8004b74:	d06c      	beq.n	8004c50 <setvbuf+0x168>
 8004b76:	ab01      	add	r3, sp, #4
 8004b78:	466a      	mov	r2, sp
 8004b7a:	4621      	mov	r1, r4
 8004b7c:	4638      	mov	r0, r7
 8004b7e:	f001 f974 	bl	8005e6a <__swhatbuf_r>
 8004b82:	89a3      	ldrh	r3, [r4, #12]
 8004b84:	4318      	orrs	r0, r3
 8004b86:	81a0      	strh	r0, [r4, #12]
 8004b88:	2d00      	cmp	r5, #0
 8004b8a:	d130      	bne.n	8004bee <setvbuf+0x106>
 8004b8c:	9d00      	ldr	r5, [sp, #0]
 8004b8e:	4628      	mov	r0, r5
 8004b90:	f001 f9d0 	bl	8005f34 <malloc>
 8004b94:	4606      	mov	r6, r0
 8004b96:	2800      	cmp	r0, #0
 8004b98:	d155      	bne.n	8004c46 <setvbuf+0x15e>
 8004b9a:	f8dd 9000 	ldr.w	r9, [sp]
 8004b9e:	45a9      	cmp	r9, r5
 8004ba0:	d14a      	bne.n	8004c38 <setvbuf+0x150>
 8004ba2:	f04f 35ff 	mov.w	r5, #4294967295
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	60a2      	str	r2, [r4, #8]
 8004baa:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004bae:	6022      	str	r2, [r4, #0]
 8004bb0:	6122      	str	r2, [r4, #16]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bb8:	6162      	str	r2, [r4, #20]
 8004bba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004bbc:	f043 0302 	orr.w	r3, r3, #2
 8004bc0:	07d2      	lsls	r2, r2, #31
 8004bc2:	81a3      	strh	r3, [r4, #12]
 8004bc4:	d405      	bmi.n	8004bd2 <setvbuf+0xea>
 8004bc6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004bca:	d102      	bne.n	8004bd2 <setvbuf+0xea>
 8004bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bce:	f001 f94b 	bl	8005e68 <__retarget_lock_release_recursive>
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	b003      	add	sp, #12
 8004bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bda:	4b24      	ldr	r3, [pc, #144]	; (8004c6c <setvbuf+0x184>)
 8004bdc:	429c      	cmp	r4, r3
 8004bde:	d101      	bne.n	8004be4 <setvbuf+0xfc>
 8004be0:	68bc      	ldr	r4, [r7, #8]
 8004be2:	e793      	b.n	8004b0c <setvbuf+0x24>
 8004be4:	4b22      	ldr	r3, [pc, #136]	; (8004c70 <setvbuf+0x188>)
 8004be6:	429c      	cmp	r4, r3
 8004be8:	bf08      	it	eq
 8004bea:	68fc      	ldreq	r4, [r7, #12]
 8004bec:	e78e      	b.n	8004b0c <setvbuf+0x24>
 8004bee:	2e00      	cmp	r6, #0
 8004bf0:	d0cd      	beq.n	8004b8e <setvbuf+0xa6>
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	b913      	cbnz	r3, 8004bfc <setvbuf+0x114>
 8004bf6:	4638      	mov	r0, r7
 8004bf8:	f001 f892 	bl	8005d20 <__sinit>
 8004bfc:	f1b8 0f01 	cmp.w	r8, #1
 8004c00:	bf08      	it	eq
 8004c02:	89a3      	ldrheq	r3, [r4, #12]
 8004c04:	6026      	str	r6, [r4, #0]
 8004c06:	bf04      	itt	eq
 8004c08:	f043 0301 	orreq.w	r3, r3, #1
 8004c0c:	81a3      	strheq	r3, [r4, #12]
 8004c0e:	89a2      	ldrh	r2, [r4, #12]
 8004c10:	f012 0308 	ands.w	r3, r2, #8
 8004c14:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004c18:	d01c      	beq.n	8004c54 <setvbuf+0x16c>
 8004c1a:	07d3      	lsls	r3, r2, #31
 8004c1c:	bf41      	itttt	mi
 8004c1e:	2300      	movmi	r3, #0
 8004c20:	426d      	negmi	r5, r5
 8004c22:	60a3      	strmi	r3, [r4, #8]
 8004c24:	61a5      	strmi	r5, [r4, #24]
 8004c26:	bf58      	it	pl
 8004c28:	60a5      	strpl	r5, [r4, #8]
 8004c2a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004c2c:	f015 0501 	ands.w	r5, r5, #1
 8004c30:	d115      	bne.n	8004c5e <setvbuf+0x176>
 8004c32:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004c36:	e7c8      	b.n	8004bca <setvbuf+0xe2>
 8004c38:	4648      	mov	r0, r9
 8004c3a:	f001 f97b 	bl	8005f34 <malloc>
 8004c3e:	4606      	mov	r6, r0
 8004c40:	2800      	cmp	r0, #0
 8004c42:	d0ae      	beq.n	8004ba2 <setvbuf+0xba>
 8004c44:	464d      	mov	r5, r9
 8004c46:	89a3      	ldrh	r3, [r4, #12]
 8004c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c4c:	81a3      	strh	r3, [r4, #12]
 8004c4e:	e7d0      	b.n	8004bf2 <setvbuf+0x10a>
 8004c50:	2500      	movs	r5, #0
 8004c52:	e7a8      	b.n	8004ba6 <setvbuf+0xbe>
 8004c54:	60a3      	str	r3, [r4, #8]
 8004c56:	e7e8      	b.n	8004c2a <setvbuf+0x142>
 8004c58:	f04f 35ff 	mov.w	r5, #4294967295
 8004c5c:	e7b9      	b.n	8004bd2 <setvbuf+0xea>
 8004c5e:	2500      	movs	r5, #0
 8004c60:	e7b7      	b.n	8004bd2 <setvbuf+0xea>
 8004c62:	bf00      	nop
 8004c64:	2000000c 	.word	0x2000000c
 8004c68:	08006fb4 	.word	0x08006fb4
 8004c6c:	08006fd4 	.word	0x08006fd4
 8004c70:	08006f94 	.word	0x08006f94

08004c74 <__swbuf_r>:
 8004c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c76:	460e      	mov	r6, r1
 8004c78:	4614      	mov	r4, r2
 8004c7a:	4605      	mov	r5, r0
 8004c7c:	b118      	cbz	r0, 8004c86 <__swbuf_r+0x12>
 8004c7e:	6983      	ldr	r3, [r0, #24]
 8004c80:	b90b      	cbnz	r3, 8004c86 <__swbuf_r+0x12>
 8004c82:	f001 f84d 	bl	8005d20 <__sinit>
 8004c86:	4b21      	ldr	r3, [pc, #132]	; (8004d0c <__swbuf_r+0x98>)
 8004c88:	429c      	cmp	r4, r3
 8004c8a:	d12b      	bne.n	8004ce4 <__swbuf_r+0x70>
 8004c8c:	686c      	ldr	r4, [r5, #4]
 8004c8e:	69a3      	ldr	r3, [r4, #24]
 8004c90:	60a3      	str	r3, [r4, #8]
 8004c92:	89a3      	ldrh	r3, [r4, #12]
 8004c94:	071a      	lsls	r2, r3, #28
 8004c96:	d52f      	bpl.n	8004cf8 <__swbuf_r+0x84>
 8004c98:	6923      	ldr	r3, [r4, #16]
 8004c9a:	b36b      	cbz	r3, 8004cf8 <__swbuf_r+0x84>
 8004c9c:	6923      	ldr	r3, [r4, #16]
 8004c9e:	6820      	ldr	r0, [r4, #0]
 8004ca0:	1ac0      	subs	r0, r0, r3
 8004ca2:	6963      	ldr	r3, [r4, #20]
 8004ca4:	b2f6      	uxtb	r6, r6
 8004ca6:	4283      	cmp	r3, r0
 8004ca8:	4637      	mov	r7, r6
 8004caa:	dc04      	bgt.n	8004cb6 <__swbuf_r+0x42>
 8004cac:	4621      	mov	r1, r4
 8004cae:	4628      	mov	r0, r5
 8004cb0:	f000 ffa2 	bl	8005bf8 <_fflush_r>
 8004cb4:	bb30      	cbnz	r0, 8004d04 <__swbuf_r+0x90>
 8004cb6:	68a3      	ldr	r3, [r4, #8]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	60a3      	str	r3, [r4, #8]
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	6022      	str	r2, [r4, #0]
 8004cc2:	701e      	strb	r6, [r3, #0]
 8004cc4:	6963      	ldr	r3, [r4, #20]
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	4283      	cmp	r3, r0
 8004cca:	d004      	beq.n	8004cd6 <__swbuf_r+0x62>
 8004ccc:	89a3      	ldrh	r3, [r4, #12]
 8004cce:	07db      	lsls	r3, r3, #31
 8004cd0:	d506      	bpl.n	8004ce0 <__swbuf_r+0x6c>
 8004cd2:	2e0a      	cmp	r6, #10
 8004cd4:	d104      	bne.n	8004ce0 <__swbuf_r+0x6c>
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	4628      	mov	r0, r5
 8004cda:	f000 ff8d 	bl	8005bf8 <_fflush_r>
 8004cde:	b988      	cbnz	r0, 8004d04 <__swbuf_r+0x90>
 8004ce0:	4638      	mov	r0, r7
 8004ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ce4:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <__swbuf_r+0x9c>)
 8004ce6:	429c      	cmp	r4, r3
 8004ce8:	d101      	bne.n	8004cee <__swbuf_r+0x7a>
 8004cea:	68ac      	ldr	r4, [r5, #8]
 8004cec:	e7cf      	b.n	8004c8e <__swbuf_r+0x1a>
 8004cee:	4b09      	ldr	r3, [pc, #36]	; (8004d14 <__swbuf_r+0xa0>)
 8004cf0:	429c      	cmp	r4, r3
 8004cf2:	bf08      	it	eq
 8004cf4:	68ec      	ldreq	r4, [r5, #12]
 8004cf6:	e7ca      	b.n	8004c8e <__swbuf_r+0x1a>
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	f000 f80c 	bl	8004d18 <__swsetup_r>
 8004d00:	2800      	cmp	r0, #0
 8004d02:	d0cb      	beq.n	8004c9c <__swbuf_r+0x28>
 8004d04:	f04f 37ff 	mov.w	r7, #4294967295
 8004d08:	e7ea      	b.n	8004ce0 <__swbuf_r+0x6c>
 8004d0a:	bf00      	nop
 8004d0c:	08006fb4 	.word	0x08006fb4
 8004d10:	08006fd4 	.word	0x08006fd4
 8004d14:	08006f94 	.word	0x08006f94

08004d18 <__swsetup_r>:
 8004d18:	4b32      	ldr	r3, [pc, #200]	; (8004de4 <__swsetup_r+0xcc>)
 8004d1a:	b570      	push	{r4, r5, r6, lr}
 8004d1c:	681d      	ldr	r5, [r3, #0]
 8004d1e:	4606      	mov	r6, r0
 8004d20:	460c      	mov	r4, r1
 8004d22:	b125      	cbz	r5, 8004d2e <__swsetup_r+0x16>
 8004d24:	69ab      	ldr	r3, [r5, #24]
 8004d26:	b913      	cbnz	r3, 8004d2e <__swsetup_r+0x16>
 8004d28:	4628      	mov	r0, r5
 8004d2a:	f000 fff9 	bl	8005d20 <__sinit>
 8004d2e:	4b2e      	ldr	r3, [pc, #184]	; (8004de8 <__swsetup_r+0xd0>)
 8004d30:	429c      	cmp	r4, r3
 8004d32:	d10f      	bne.n	8004d54 <__swsetup_r+0x3c>
 8004d34:	686c      	ldr	r4, [r5, #4]
 8004d36:	89a3      	ldrh	r3, [r4, #12]
 8004d38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d3c:	0719      	lsls	r1, r3, #28
 8004d3e:	d42c      	bmi.n	8004d9a <__swsetup_r+0x82>
 8004d40:	06dd      	lsls	r5, r3, #27
 8004d42:	d411      	bmi.n	8004d68 <__swsetup_r+0x50>
 8004d44:	2309      	movs	r3, #9
 8004d46:	6033      	str	r3, [r6, #0]
 8004d48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d4c:	81a3      	strh	r3, [r4, #12]
 8004d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d52:	e03e      	b.n	8004dd2 <__swsetup_r+0xba>
 8004d54:	4b25      	ldr	r3, [pc, #148]	; (8004dec <__swsetup_r+0xd4>)
 8004d56:	429c      	cmp	r4, r3
 8004d58:	d101      	bne.n	8004d5e <__swsetup_r+0x46>
 8004d5a:	68ac      	ldr	r4, [r5, #8]
 8004d5c:	e7eb      	b.n	8004d36 <__swsetup_r+0x1e>
 8004d5e:	4b24      	ldr	r3, [pc, #144]	; (8004df0 <__swsetup_r+0xd8>)
 8004d60:	429c      	cmp	r4, r3
 8004d62:	bf08      	it	eq
 8004d64:	68ec      	ldreq	r4, [r5, #12]
 8004d66:	e7e6      	b.n	8004d36 <__swsetup_r+0x1e>
 8004d68:	0758      	lsls	r0, r3, #29
 8004d6a:	d512      	bpl.n	8004d92 <__swsetup_r+0x7a>
 8004d6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d6e:	b141      	cbz	r1, 8004d82 <__swsetup_r+0x6a>
 8004d70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d74:	4299      	cmp	r1, r3
 8004d76:	d002      	beq.n	8004d7e <__swsetup_r+0x66>
 8004d78:	4630      	mov	r0, r6
 8004d7a:	f001 fc8b 	bl	8006694 <_free_r>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	6363      	str	r3, [r4, #52]	; 0x34
 8004d82:	89a3      	ldrh	r3, [r4, #12]
 8004d84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d88:	81a3      	strh	r3, [r4, #12]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	6063      	str	r3, [r4, #4]
 8004d8e:	6923      	ldr	r3, [r4, #16]
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	89a3      	ldrh	r3, [r4, #12]
 8004d94:	f043 0308 	orr.w	r3, r3, #8
 8004d98:	81a3      	strh	r3, [r4, #12]
 8004d9a:	6923      	ldr	r3, [r4, #16]
 8004d9c:	b94b      	cbnz	r3, 8004db2 <__swsetup_r+0x9a>
 8004d9e:	89a3      	ldrh	r3, [r4, #12]
 8004da0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004da8:	d003      	beq.n	8004db2 <__swsetup_r+0x9a>
 8004daa:	4621      	mov	r1, r4
 8004dac:	4630      	mov	r0, r6
 8004dae:	f001 f881 	bl	8005eb4 <__smakebuf_r>
 8004db2:	89a0      	ldrh	r0, [r4, #12]
 8004db4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004db8:	f010 0301 	ands.w	r3, r0, #1
 8004dbc:	d00a      	beq.n	8004dd4 <__swsetup_r+0xbc>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60a3      	str	r3, [r4, #8]
 8004dc2:	6963      	ldr	r3, [r4, #20]
 8004dc4:	425b      	negs	r3, r3
 8004dc6:	61a3      	str	r3, [r4, #24]
 8004dc8:	6923      	ldr	r3, [r4, #16]
 8004dca:	b943      	cbnz	r3, 8004dde <__swsetup_r+0xc6>
 8004dcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004dd0:	d1ba      	bne.n	8004d48 <__swsetup_r+0x30>
 8004dd2:	bd70      	pop	{r4, r5, r6, pc}
 8004dd4:	0781      	lsls	r1, r0, #30
 8004dd6:	bf58      	it	pl
 8004dd8:	6963      	ldrpl	r3, [r4, #20]
 8004dda:	60a3      	str	r3, [r4, #8]
 8004ddc:	e7f4      	b.n	8004dc8 <__swsetup_r+0xb0>
 8004dde:	2000      	movs	r0, #0
 8004de0:	e7f7      	b.n	8004dd2 <__swsetup_r+0xba>
 8004de2:	bf00      	nop
 8004de4:	2000000c 	.word	0x2000000c
 8004de8:	08006fb4 	.word	0x08006fb4
 8004dec:	08006fd4 	.word	0x08006fd4
 8004df0:	08006f94 	.word	0x08006f94

08004df4 <quorem>:
 8004df4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df8:	6903      	ldr	r3, [r0, #16]
 8004dfa:	690c      	ldr	r4, [r1, #16]
 8004dfc:	42a3      	cmp	r3, r4
 8004dfe:	4607      	mov	r7, r0
 8004e00:	f2c0 8081 	blt.w	8004f06 <quorem+0x112>
 8004e04:	3c01      	subs	r4, #1
 8004e06:	f101 0814 	add.w	r8, r1, #20
 8004e0a:	f100 0514 	add.w	r5, r0, #20
 8004e0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e12:	9301      	str	r3, [sp, #4]
 8004e14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e28:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e2c:	d331      	bcc.n	8004e92 <quorem+0x9e>
 8004e2e:	f04f 0e00 	mov.w	lr, #0
 8004e32:	4640      	mov	r0, r8
 8004e34:	46ac      	mov	ip, r5
 8004e36:	46f2      	mov	sl, lr
 8004e38:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e3c:	b293      	uxth	r3, r2
 8004e3e:	fb06 e303 	mla	r3, r6, r3, lr
 8004e42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	ebaa 0303 	sub.w	r3, sl, r3
 8004e4c:	f8dc a000 	ldr.w	sl, [ip]
 8004e50:	0c12      	lsrs	r2, r2, #16
 8004e52:	fa13 f38a 	uxtah	r3, r3, sl
 8004e56:	fb06 e202 	mla	r2, r6, r2, lr
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	9b00      	ldr	r3, [sp, #0]
 8004e5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e62:	b292      	uxth	r2, r2
 8004e64:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004e68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e6c:	f8bd 3000 	ldrh.w	r3, [sp]
 8004e70:	4581      	cmp	r9, r0
 8004e72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e76:	f84c 3b04 	str.w	r3, [ip], #4
 8004e7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004e7e:	d2db      	bcs.n	8004e38 <quorem+0x44>
 8004e80:	f855 300b 	ldr.w	r3, [r5, fp]
 8004e84:	b92b      	cbnz	r3, 8004e92 <quorem+0x9e>
 8004e86:	9b01      	ldr	r3, [sp, #4]
 8004e88:	3b04      	subs	r3, #4
 8004e8a:	429d      	cmp	r5, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	d32e      	bcc.n	8004eee <quorem+0xfa>
 8004e90:	613c      	str	r4, [r7, #16]
 8004e92:	4638      	mov	r0, r7
 8004e94:	f001 fae6 	bl	8006464 <__mcmp>
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	db24      	blt.n	8004ee6 <quorem+0xf2>
 8004e9c:	3601      	adds	r6, #1
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	f04f 0c00 	mov.w	ip, #0
 8004ea4:	f858 2b04 	ldr.w	r2, [r8], #4
 8004ea8:	f8d0 e000 	ldr.w	lr, [r0]
 8004eac:	b293      	uxth	r3, r2
 8004eae:	ebac 0303 	sub.w	r3, ip, r3
 8004eb2:	0c12      	lsrs	r2, r2, #16
 8004eb4:	fa13 f38e 	uxtah	r3, r3, lr
 8004eb8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ebc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ec6:	45c1      	cmp	r9, r8
 8004ec8:	f840 3b04 	str.w	r3, [r0], #4
 8004ecc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ed0:	d2e8      	bcs.n	8004ea4 <quorem+0xb0>
 8004ed2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ed6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004eda:	b922      	cbnz	r2, 8004ee6 <quorem+0xf2>
 8004edc:	3b04      	subs	r3, #4
 8004ede:	429d      	cmp	r5, r3
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	d30a      	bcc.n	8004efa <quorem+0x106>
 8004ee4:	613c      	str	r4, [r7, #16]
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	b003      	add	sp, #12
 8004eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eee:	6812      	ldr	r2, [r2, #0]
 8004ef0:	3b04      	subs	r3, #4
 8004ef2:	2a00      	cmp	r2, #0
 8004ef4:	d1cc      	bne.n	8004e90 <quorem+0x9c>
 8004ef6:	3c01      	subs	r4, #1
 8004ef8:	e7c7      	b.n	8004e8a <quorem+0x96>
 8004efa:	6812      	ldr	r2, [r2, #0]
 8004efc:	3b04      	subs	r3, #4
 8004efe:	2a00      	cmp	r2, #0
 8004f00:	d1f0      	bne.n	8004ee4 <quorem+0xf0>
 8004f02:	3c01      	subs	r4, #1
 8004f04:	e7eb      	b.n	8004ede <quorem+0xea>
 8004f06:	2000      	movs	r0, #0
 8004f08:	e7ee      	b.n	8004ee8 <quorem+0xf4>
 8004f0a:	0000      	movs	r0, r0
 8004f0c:	0000      	movs	r0, r0
	...

08004f10 <_dtoa_r>:
 8004f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f14:	ed2d 8b04 	vpush	{d8-d9}
 8004f18:	ec57 6b10 	vmov	r6, r7, d0
 8004f1c:	b093      	sub	sp, #76	; 0x4c
 8004f1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004f24:	9106      	str	r1, [sp, #24]
 8004f26:	ee10 aa10 	vmov	sl, s0
 8004f2a:	4604      	mov	r4, r0
 8004f2c:	9209      	str	r2, [sp, #36]	; 0x24
 8004f2e:	930c      	str	r3, [sp, #48]	; 0x30
 8004f30:	46bb      	mov	fp, r7
 8004f32:	b975      	cbnz	r5, 8004f52 <_dtoa_r+0x42>
 8004f34:	2010      	movs	r0, #16
 8004f36:	f000 fffd 	bl	8005f34 <malloc>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	6260      	str	r0, [r4, #36]	; 0x24
 8004f3e:	b920      	cbnz	r0, 8004f4a <_dtoa_r+0x3a>
 8004f40:	4ba7      	ldr	r3, [pc, #668]	; (80051e0 <_dtoa_r+0x2d0>)
 8004f42:	21ea      	movs	r1, #234	; 0xea
 8004f44:	48a7      	ldr	r0, [pc, #668]	; (80051e4 <_dtoa_r+0x2d4>)
 8004f46:	f001 fe45 	bl	8006bd4 <__assert_func>
 8004f4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f4e:	6005      	str	r5, [r0, #0]
 8004f50:	60c5      	str	r5, [r0, #12]
 8004f52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f54:	6819      	ldr	r1, [r3, #0]
 8004f56:	b151      	cbz	r1, 8004f6e <_dtoa_r+0x5e>
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	604a      	str	r2, [r1, #4]
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	4093      	lsls	r3, r2
 8004f60:	608b      	str	r3, [r1, #8]
 8004f62:	4620      	mov	r0, r4
 8004f64:	f001 f83c 	bl	8005fe0 <_Bfree>
 8004f68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	1e3b      	subs	r3, r7, #0
 8004f70:	bfaa      	itet	ge
 8004f72:	2300      	movge	r3, #0
 8004f74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004f78:	f8c8 3000 	strge.w	r3, [r8]
 8004f7c:	4b9a      	ldr	r3, [pc, #616]	; (80051e8 <_dtoa_r+0x2d8>)
 8004f7e:	bfbc      	itt	lt
 8004f80:	2201      	movlt	r2, #1
 8004f82:	f8c8 2000 	strlt.w	r2, [r8]
 8004f86:	ea33 030b 	bics.w	r3, r3, fp
 8004f8a:	d11b      	bne.n	8004fc4 <_dtoa_r+0xb4>
 8004f8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f8e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004f98:	4333      	orrs	r3, r6
 8004f9a:	f000 8592 	beq.w	8005ac2 <_dtoa_r+0xbb2>
 8004f9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fa0:	b963      	cbnz	r3, 8004fbc <_dtoa_r+0xac>
 8004fa2:	4b92      	ldr	r3, [pc, #584]	; (80051ec <_dtoa_r+0x2dc>)
 8004fa4:	e022      	b.n	8004fec <_dtoa_r+0xdc>
 8004fa6:	4b92      	ldr	r3, [pc, #584]	; (80051f0 <_dtoa_r+0x2e0>)
 8004fa8:	9301      	str	r3, [sp, #4]
 8004faa:	3308      	adds	r3, #8
 8004fac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	9801      	ldr	r0, [sp, #4]
 8004fb2:	b013      	add	sp, #76	; 0x4c
 8004fb4:	ecbd 8b04 	vpop	{d8-d9}
 8004fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fbc:	4b8b      	ldr	r3, [pc, #556]	; (80051ec <_dtoa_r+0x2dc>)
 8004fbe:	9301      	str	r3, [sp, #4]
 8004fc0:	3303      	adds	r3, #3
 8004fc2:	e7f3      	b.n	8004fac <_dtoa_r+0x9c>
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	4650      	mov	r0, sl
 8004fca:	4659      	mov	r1, fp
 8004fcc:	f7fb fd7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fd0:	ec4b ab19 	vmov	d9, sl, fp
 8004fd4:	4680      	mov	r8, r0
 8004fd6:	b158      	cbz	r0, 8004ff0 <_dtoa_r+0xe0>
 8004fd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fda:	2301      	movs	r3, #1
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 856b 	beq.w	8005abc <_dtoa_r+0xbac>
 8004fe6:	4883      	ldr	r0, [pc, #524]	; (80051f4 <_dtoa_r+0x2e4>)
 8004fe8:	6018      	str	r0, [r3, #0]
 8004fea:	1e43      	subs	r3, r0, #1
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	e7df      	b.n	8004fb0 <_dtoa_r+0xa0>
 8004ff0:	ec4b ab10 	vmov	d0, sl, fp
 8004ff4:	aa10      	add	r2, sp, #64	; 0x40
 8004ff6:	a911      	add	r1, sp, #68	; 0x44
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	f001 fad9 	bl	80065b0 <__d2b>
 8004ffe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005002:	ee08 0a10 	vmov	s16, r0
 8005006:	2d00      	cmp	r5, #0
 8005008:	f000 8084 	beq.w	8005114 <_dtoa_r+0x204>
 800500c:	ee19 3a90 	vmov	r3, s19
 8005010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005014:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005018:	4656      	mov	r6, sl
 800501a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800501e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005022:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005026:	4b74      	ldr	r3, [pc, #464]	; (80051f8 <_dtoa_r+0x2e8>)
 8005028:	2200      	movs	r2, #0
 800502a:	4630      	mov	r0, r6
 800502c:	4639      	mov	r1, r7
 800502e:	f7fb f92b 	bl	8000288 <__aeabi_dsub>
 8005032:	a365      	add	r3, pc, #404	; (adr r3, 80051c8 <_dtoa_r+0x2b8>)
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	f7fb fade 	bl	80005f8 <__aeabi_dmul>
 800503c:	a364      	add	r3, pc, #400	; (adr r3, 80051d0 <_dtoa_r+0x2c0>)
 800503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005042:	f7fb f923 	bl	800028c <__adddf3>
 8005046:	4606      	mov	r6, r0
 8005048:	4628      	mov	r0, r5
 800504a:	460f      	mov	r7, r1
 800504c:	f7fb fa6a 	bl	8000524 <__aeabi_i2d>
 8005050:	a361      	add	r3, pc, #388	; (adr r3, 80051d8 <_dtoa_r+0x2c8>)
 8005052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005056:	f7fb facf 	bl	80005f8 <__aeabi_dmul>
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	4630      	mov	r0, r6
 8005060:	4639      	mov	r1, r7
 8005062:	f7fb f913 	bl	800028c <__adddf3>
 8005066:	4606      	mov	r6, r0
 8005068:	460f      	mov	r7, r1
 800506a:	f7fb fd75 	bl	8000b58 <__aeabi_d2iz>
 800506e:	2200      	movs	r2, #0
 8005070:	9000      	str	r0, [sp, #0]
 8005072:	2300      	movs	r3, #0
 8005074:	4630      	mov	r0, r6
 8005076:	4639      	mov	r1, r7
 8005078:	f7fb fd30 	bl	8000adc <__aeabi_dcmplt>
 800507c:	b150      	cbz	r0, 8005094 <_dtoa_r+0x184>
 800507e:	9800      	ldr	r0, [sp, #0]
 8005080:	f7fb fa50 	bl	8000524 <__aeabi_i2d>
 8005084:	4632      	mov	r2, r6
 8005086:	463b      	mov	r3, r7
 8005088:	f7fb fd1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800508c:	b910      	cbnz	r0, 8005094 <_dtoa_r+0x184>
 800508e:	9b00      	ldr	r3, [sp, #0]
 8005090:	3b01      	subs	r3, #1
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	9b00      	ldr	r3, [sp, #0]
 8005096:	2b16      	cmp	r3, #22
 8005098:	d85a      	bhi.n	8005150 <_dtoa_r+0x240>
 800509a:	9a00      	ldr	r2, [sp, #0]
 800509c:	4b57      	ldr	r3, [pc, #348]	; (80051fc <_dtoa_r+0x2ec>)
 800509e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	ec51 0b19 	vmov	r0, r1, d9
 80050aa:	f7fb fd17 	bl	8000adc <__aeabi_dcmplt>
 80050ae:	2800      	cmp	r0, #0
 80050b0:	d050      	beq.n	8005154 <_dtoa_r+0x244>
 80050b2:	9b00      	ldr	r3, [sp, #0]
 80050b4:	3b01      	subs	r3, #1
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	2300      	movs	r3, #0
 80050ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80050bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050be:	1b5d      	subs	r5, r3, r5
 80050c0:	1e6b      	subs	r3, r5, #1
 80050c2:	9305      	str	r3, [sp, #20]
 80050c4:	bf45      	ittet	mi
 80050c6:	f1c5 0301 	rsbmi	r3, r5, #1
 80050ca:	9304      	strmi	r3, [sp, #16]
 80050cc:	2300      	movpl	r3, #0
 80050ce:	2300      	movmi	r3, #0
 80050d0:	bf4c      	ite	mi
 80050d2:	9305      	strmi	r3, [sp, #20]
 80050d4:	9304      	strpl	r3, [sp, #16]
 80050d6:	9b00      	ldr	r3, [sp, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	db3d      	blt.n	8005158 <_dtoa_r+0x248>
 80050dc:	9b05      	ldr	r3, [sp, #20]
 80050de:	9a00      	ldr	r2, [sp, #0]
 80050e0:	920a      	str	r2, [sp, #40]	; 0x28
 80050e2:	4413      	add	r3, r2
 80050e4:	9305      	str	r3, [sp, #20]
 80050e6:	2300      	movs	r3, #0
 80050e8:	9307      	str	r3, [sp, #28]
 80050ea:	9b06      	ldr	r3, [sp, #24]
 80050ec:	2b09      	cmp	r3, #9
 80050ee:	f200 8089 	bhi.w	8005204 <_dtoa_r+0x2f4>
 80050f2:	2b05      	cmp	r3, #5
 80050f4:	bfc4      	itt	gt
 80050f6:	3b04      	subgt	r3, #4
 80050f8:	9306      	strgt	r3, [sp, #24]
 80050fa:	9b06      	ldr	r3, [sp, #24]
 80050fc:	f1a3 0302 	sub.w	r3, r3, #2
 8005100:	bfcc      	ite	gt
 8005102:	2500      	movgt	r5, #0
 8005104:	2501      	movle	r5, #1
 8005106:	2b03      	cmp	r3, #3
 8005108:	f200 8087 	bhi.w	800521a <_dtoa_r+0x30a>
 800510c:	e8df f003 	tbb	[pc, r3]
 8005110:	59383a2d 	.word	0x59383a2d
 8005114:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005118:	441d      	add	r5, r3
 800511a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800511e:	2b20      	cmp	r3, #32
 8005120:	bfc1      	itttt	gt
 8005122:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005126:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800512a:	fa0b f303 	lslgt.w	r3, fp, r3
 800512e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005132:	bfda      	itte	le
 8005134:	f1c3 0320 	rsble	r3, r3, #32
 8005138:	fa06 f003 	lslle.w	r0, r6, r3
 800513c:	4318      	orrgt	r0, r3
 800513e:	f7fb f9e1 	bl	8000504 <__aeabi_ui2d>
 8005142:	2301      	movs	r3, #1
 8005144:	4606      	mov	r6, r0
 8005146:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800514a:	3d01      	subs	r5, #1
 800514c:	930e      	str	r3, [sp, #56]	; 0x38
 800514e:	e76a      	b.n	8005026 <_dtoa_r+0x116>
 8005150:	2301      	movs	r3, #1
 8005152:	e7b2      	b.n	80050ba <_dtoa_r+0x1aa>
 8005154:	900b      	str	r0, [sp, #44]	; 0x2c
 8005156:	e7b1      	b.n	80050bc <_dtoa_r+0x1ac>
 8005158:	9b04      	ldr	r3, [sp, #16]
 800515a:	9a00      	ldr	r2, [sp, #0]
 800515c:	1a9b      	subs	r3, r3, r2
 800515e:	9304      	str	r3, [sp, #16]
 8005160:	4253      	negs	r3, r2
 8005162:	9307      	str	r3, [sp, #28]
 8005164:	2300      	movs	r3, #0
 8005166:	930a      	str	r3, [sp, #40]	; 0x28
 8005168:	e7bf      	b.n	80050ea <_dtoa_r+0x1da>
 800516a:	2300      	movs	r3, #0
 800516c:	9308      	str	r3, [sp, #32]
 800516e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005170:	2b00      	cmp	r3, #0
 8005172:	dc55      	bgt.n	8005220 <_dtoa_r+0x310>
 8005174:	2301      	movs	r3, #1
 8005176:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800517a:	461a      	mov	r2, r3
 800517c:	9209      	str	r2, [sp, #36]	; 0x24
 800517e:	e00c      	b.n	800519a <_dtoa_r+0x28a>
 8005180:	2301      	movs	r3, #1
 8005182:	e7f3      	b.n	800516c <_dtoa_r+0x25c>
 8005184:	2300      	movs	r3, #0
 8005186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005188:	9308      	str	r3, [sp, #32]
 800518a:	9b00      	ldr	r3, [sp, #0]
 800518c:	4413      	add	r3, r2
 800518e:	9302      	str	r3, [sp, #8]
 8005190:	3301      	adds	r3, #1
 8005192:	2b01      	cmp	r3, #1
 8005194:	9303      	str	r3, [sp, #12]
 8005196:	bfb8      	it	lt
 8005198:	2301      	movlt	r3, #1
 800519a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800519c:	2200      	movs	r2, #0
 800519e:	6042      	str	r2, [r0, #4]
 80051a0:	2204      	movs	r2, #4
 80051a2:	f102 0614 	add.w	r6, r2, #20
 80051a6:	429e      	cmp	r6, r3
 80051a8:	6841      	ldr	r1, [r0, #4]
 80051aa:	d93d      	bls.n	8005228 <_dtoa_r+0x318>
 80051ac:	4620      	mov	r0, r4
 80051ae:	f000 fed7 	bl	8005f60 <_Balloc>
 80051b2:	9001      	str	r0, [sp, #4]
 80051b4:	2800      	cmp	r0, #0
 80051b6:	d13b      	bne.n	8005230 <_dtoa_r+0x320>
 80051b8:	4b11      	ldr	r3, [pc, #68]	; (8005200 <_dtoa_r+0x2f0>)
 80051ba:	4602      	mov	r2, r0
 80051bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80051c0:	e6c0      	b.n	8004f44 <_dtoa_r+0x34>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e7df      	b.n	8005186 <_dtoa_r+0x276>
 80051c6:	bf00      	nop
 80051c8:	636f4361 	.word	0x636f4361
 80051cc:	3fd287a7 	.word	0x3fd287a7
 80051d0:	8b60c8b3 	.word	0x8b60c8b3
 80051d4:	3fc68a28 	.word	0x3fc68a28
 80051d8:	509f79fb 	.word	0x509f79fb
 80051dc:	3fd34413 	.word	0x3fd34413
 80051e0:	08006f11 	.word	0x08006f11
 80051e4:	08006f28 	.word	0x08006f28
 80051e8:	7ff00000 	.word	0x7ff00000
 80051ec:	08006f0d 	.word	0x08006f0d
 80051f0:	08006f04 	.word	0x08006f04
 80051f4:	08006ee1 	.word	0x08006ee1
 80051f8:	3ff80000 	.word	0x3ff80000
 80051fc:	08007078 	.word	0x08007078
 8005200:	08006f83 	.word	0x08006f83
 8005204:	2501      	movs	r5, #1
 8005206:	2300      	movs	r3, #0
 8005208:	9306      	str	r3, [sp, #24]
 800520a:	9508      	str	r5, [sp, #32]
 800520c:	f04f 33ff 	mov.w	r3, #4294967295
 8005210:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005214:	2200      	movs	r2, #0
 8005216:	2312      	movs	r3, #18
 8005218:	e7b0      	b.n	800517c <_dtoa_r+0x26c>
 800521a:	2301      	movs	r3, #1
 800521c:	9308      	str	r3, [sp, #32]
 800521e:	e7f5      	b.n	800520c <_dtoa_r+0x2fc>
 8005220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005222:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005226:	e7b8      	b.n	800519a <_dtoa_r+0x28a>
 8005228:	3101      	adds	r1, #1
 800522a:	6041      	str	r1, [r0, #4]
 800522c:	0052      	lsls	r2, r2, #1
 800522e:	e7b8      	b.n	80051a2 <_dtoa_r+0x292>
 8005230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005232:	9a01      	ldr	r2, [sp, #4]
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	9b03      	ldr	r3, [sp, #12]
 8005238:	2b0e      	cmp	r3, #14
 800523a:	f200 809d 	bhi.w	8005378 <_dtoa_r+0x468>
 800523e:	2d00      	cmp	r5, #0
 8005240:	f000 809a 	beq.w	8005378 <_dtoa_r+0x468>
 8005244:	9b00      	ldr	r3, [sp, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	dd32      	ble.n	80052b0 <_dtoa_r+0x3a0>
 800524a:	4ab7      	ldr	r2, [pc, #732]	; (8005528 <_dtoa_r+0x618>)
 800524c:	f003 030f 	and.w	r3, r3, #15
 8005250:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005254:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005258:	9b00      	ldr	r3, [sp, #0]
 800525a:	05d8      	lsls	r0, r3, #23
 800525c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005260:	d516      	bpl.n	8005290 <_dtoa_r+0x380>
 8005262:	4bb2      	ldr	r3, [pc, #712]	; (800552c <_dtoa_r+0x61c>)
 8005264:	ec51 0b19 	vmov	r0, r1, d9
 8005268:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800526c:	f7fb faee 	bl	800084c <__aeabi_ddiv>
 8005270:	f007 070f 	and.w	r7, r7, #15
 8005274:	4682      	mov	sl, r0
 8005276:	468b      	mov	fp, r1
 8005278:	2503      	movs	r5, #3
 800527a:	4eac      	ldr	r6, [pc, #688]	; (800552c <_dtoa_r+0x61c>)
 800527c:	b957      	cbnz	r7, 8005294 <_dtoa_r+0x384>
 800527e:	4642      	mov	r2, r8
 8005280:	464b      	mov	r3, r9
 8005282:	4650      	mov	r0, sl
 8005284:	4659      	mov	r1, fp
 8005286:	f7fb fae1 	bl	800084c <__aeabi_ddiv>
 800528a:	4682      	mov	sl, r0
 800528c:	468b      	mov	fp, r1
 800528e:	e028      	b.n	80052e2 <_dtoa_r+0x3d2>
 8005290:	2502      	movs	r5, #2
 8005292:	e7f2      	b.n	800527a <_dtoa_r+0x36a>
 8005294:	07f9      	lsls	r1, r7, #31
 8005296:	d508      	bpl.n	80052aa <_dtoa_r+0x39a>
 8005298:	4640      	mov	r0, r8
 800529a:	4649      	mov	r1, r9
 800529c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80052a0:	f7fb f9aa 	bl	80005f8 <__aeabi_dmul>
 80052a4:	3501      	adds	r5, #1
 80052a6:	4680      	mov	r8, r0
 80052a8:	4689      	mov	r9, r1
 80052aa:	107f      	asrs	r7, r7, #1
 80052ac:	3608      	adds	r6, #8
 80052ae:	e7e5      	b.n	800527c <_dtoa_r+0x36c>
 80052b0:	f000 809b 	beq.w	80053ea <_dtoa_r+0x4da>
 80052b4:	9b00      	ldr	r3, [sp, #0]
 80052b6:	4f9d      	ldr	r7, [pc, #628]	; (800552c <_dtoa_r+0x61c>)
 80052b8:	425e      	negs	r6, r3
 80052ba:	4b9b      	ldr	r3, [pc, #620]	; (8005528 <_dtoa_r+0x618>)
 80052bc:	f006 020f 	and.w	r2, r6, #15
 80052c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c8:	ec51 0b19 	vmov	r0, r1, d9
 80052cc:	f7fb f994 	bl	80005f8 <__aeabi_dmul>
 80052d0:	1136      	asrs	r6, r6, #4
 80052d2:	4682      	mov	sl, r0
 80052d4:	468b      	mov	fp, r1
 80052d6:	2300      	movs	r3, #0
 80052d8:	2502      	movs	r5, #2
 80052da:	2e00      	cmp	r6, #0
 80052dc:	d17a      	bne.n	80053d4 <_dtoa_r+0x4c4>
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1d3      	bne.n	800528a <_dtoa_r+0x37a>
 80052e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 8082 	beq.w	80053ee <_dtoa_r+0x4de>
 80052ea:	4b91      	ldr	r3, [pc, #580]	; (8005530 <_dtoa_r+0x620>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	4650      	mov	r0, sl
 80052f0:	4659      	mov	r1, fp
 80052f2:	f7fb fbf3 	bl	8000adc <__aeabi_dcmplt>
 80052f6:	2800      	cmp	r0, #0
 80052f8:	d079      	beq.n	80053ee <_dtoa_r+0x4de>
 80052fa:	9b03      	ldr	r3, [sp, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d076      	beq.n	80053ee <_dtoa_r+0x4de>
 8005300:	9b02      	ldr	r3, [sp, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	dd36      	ble.n	8005374 <_dtoa_r+0x464>
 8005306:	9b00      	ldr	r3, [sp, #0]
 8005308:	4650      	mov	r0, sl
 800530a:	4659      	mov	r1, fp
 800530c:	1e5f      	subs	r7, r3, #1
 800530e:	2200      	movs	r2, #0
 8005310:	4b88      	ldr	r3, [pc, #544]	; (8005534 <_dtoa_r+0x624>)
 8005312:	f7fb f971 	bl	80005f8 <__aeabi_dmul>
 8005316:	9e02      	ldr	r6, [sp, #8]
 8005318:	4682      	mov	sl, r0
 800531a:	468b      	mov	fp, r1
 800531c:	3501      	adds	r5, #1
 800531e:	4628      	mov	r0, r5
 8005320:	f7fb f900 	bl	8000524 <__aeabi_i2d>
 8005324:	4652      	mov	r2, sl
 8005326:	465b      	mov	r3, fp
 8005328:	f7fb f966 	bl	80005f8 <__aeabi_dmul>
 800532c:	4b82      	ldr	r3, [pc, #520]	; (8005538 <_dtoa_r+0x628>)
 800532e:	2200      	movs	r2, #0
 8005330:	f7fa ffac 	bl	800028c <__adddf3>
 8005334:	46d0      	mov	r8, sl
 8005336:	46d9      	mov	r9, fp
 8005338:	4682      	mov	sl, r0
 800533a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800533e:	2e00      	cmp	r6, #0
 8005340:	d158      	bne.n	80053f4 <_dtoa_r+0x4e4>
 8005342:	4b7e      	ldr	r3, [pc, #504]	; (800553c <_dtoa_r+0x62c>)
 8005344:	2200      	movs	r2, #0
 8005346:	4640      	mov	r0, r8
 8005348:	4649      	mov	r1, r9
 800534a:	f7fa ff9d 	bl	8000288 <__aeabi_dsub>
 800534e:	4652      	mov	r2, sl
 8005350:	465b      	mov	r3, fp
 8005352:	4680      	mov	r8, r0
 8005354:	4689      	mov	r9, r1
 8005356:	f7fb fbdf 	bl	8000b18 <__aeabi_dcmpgt>
 800535a:	2800      	cmp	r0, #0
 800535c:	f040 8295 	bne.w	800588a <_dtoa_r+0x97a>
 8005360:	4652      	mov	r2, sl
 8005362:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005366:	4640      	mov	r0, r8
 8005368:	4649      	mov	r1, r9
 800536a:	f7fb fbb7 	bl	8000adc <__aeabi_dcmplt>
 800536e:	2800      	cmp	r0, #0
 8005370:	f040 8289 	bne.w	8005886 <_dtoa_r+0x976>
 8005374:	ec5b ab19 	vmov	sl, fp, d9
 8005378:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800537a:	2b00      	cmp	r3, #0
 800537c:	f2c0 8148 	blt.w	8005610 <_dtoa_r+0x700>
 8005380:	9a00      	ldr	r2, [sp, #0]
 8005382:	2a0e      	cmp	r2, #14
 8005384:	f300 8144 	bgt.w	8005610 <_dtoa_r+0x700>
 8005388:	4b67      	ldr	r3, [pc, #412]	; (8005528 <_dtoa_r+0x618>)
 800538a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800538e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005394:	2b00      	cmp	r3, #0
 8005396:	f280 80d5 	bge.w	8005544 <_dtoa_r+0x634>
 800539a:	9b03      	ldr	r3, [sp, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	f300 80d1 	bgt.w	8005544 <_dtoa_r+0x634>
 80053a2:	f040 826f 	bne.w	8005884 <_dtoa_r+0x974>
 80053a6:	4b65      	ldr	r3, [pc, #404]	; (800553c <_dtoa_r+0x62c>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	4640      	mov	r0, r8
 80053ac:	4649      	mov	r1, r9
 80053ae:	f7fb f923 	bl	80005f8 <__aeabi_dmul>
 80053b2:	4652      	mov	r2, sl
 80053b4:	465b      	mov	r3, fp
 80053b6:	f7fb fba5 	bl	8000b04 <__aeabi_dcmpge>
 80053ba:	9e03      	ldr	r6, [sp, #12]
 80053bc:	4637      	mov	r7, r6
 80053be:	2800      	cmp	r0, #0
 80053c0:	f040 8245 	bne.w	800584e <_dtoa_r+0x93e>
 80053c4:	9d01      	ldr	r5, [sp, #4]
 80053c6:	2331      	movs	r3, #49	; 0x31
 80053c8:	f805 3b01 	strb.w	r3, [r5], #1
 80053cc:	9b00      	ldr	r3, [sp, #0]
 80053ce:	3301      	adds	r3, #1
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	e240      	b.n	8005856 <_dtoa_r+0x946>
 80053d4:	07f2      	lsls	r2, r6, #31
 80053d6:	d505      	bpl.n	80053e4 <_dtoa_r+0x4d4>
 80053d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053dc:	f7fb f90c 	bl	80005f8 <__aeabi_dmul>
 80053e0:	3501      	adds	r5, #1
 80053e2:	2301      	movs	r3, #1
 80053e4:	1076      	asrs	r6, r6, #1
 80053e6:	3708      	adds	r7, #8
 80053e8:	e777      	b.n	80052da <_dtoa_r+0x3ca>
 80053ea:	2502      	movs	r5, #2
 80053ec:	e779      	b.n	80052e2 <_dtoa_r+0x3d2>
 80053ee:	9f00      	ldr	r7, [sp, #0]
 80053f0:	9e03      	ldr	r6, [sp, #12]
 80053f2:	e794      	b.n	800531e <_dtoa_r+0x40e>
 80053f4:	9901      	ldr	r1, [sp, #4]
 80053f6:	4b4c      	ldr	r3, [pc, #304]	; (8005528 <_dtoa_r+0x618>)
 80053f8:	4431      	add	r1, r6
 80053fa:	910d      	str	r1, [sp, #52]	; 0x34
 80053fc:	9908      	ldr	r1, [sp, #32]
 80053fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005402:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005406:	2900      	cmp	r1, #0
 8005408:	d043      	beq.n	8005492 <_dtoa_r+0x582>
 800540a:	494d      	ldr	r1, [pc, #308]	; (8005540 <_dtoa_r+0x630>)
 800540c:	2000      	movs	r0, #0
 800540e:	f7fb fa1d 	bl	800084c <__aeabi_ddiv>
 8005412:	4652      	mov	r2, sl
 8005414:	465b      	mov	r3, fp
 8005416:	f7fa ff37 	bl	8000288 <__aeabi_dsub>
 800541a:	9d01      	ldr	r5, [sp, #4]
 800541c:	4682      	mov	sl, r0
 800541e:	468b      	mov	fp, r1
 8005420:	4649      	mov	r1, r9
 8005422:	4640      	mov	r0, r8
 8005424:	f7fb fb98 	bl	8000b58 <__aeabi_d2iz>
 8005428:	4606      	mov	r6, r0
 800542a:	f7fb f87b 	bl	8000524 <__aeabi_i2d>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	4640      	mov	r0, r8
 8005434:	4649      	mov	r1, r9
 8005436:	f7fa ff27 	bl	8000288 <__aeabi_dsub>
 800543a:	3630      	adds	r6, #48	; 0x30
 800543c:	f805 6b01 	strb.w	r6, [r5], #1
 8005440:	4652      	mov	r2, sl
 8005442:	465b      	mov	r3, fp
 8005444:	4680      	mov	r8, r0
 8005446:	4689      	mov	r9, r1
 8005448:	f7fb fb48 	bl	8000adc <__aeabi_dcmplt>
 800544c:	2800      	cmp	r0, #0
 800544e:	d163      	bne.n	8005518 <_dtoa_r+0x608>
 8005450:	4642      	mov	r2, r8
 8005452:	464b      	mov	r3, r9
 8005454:	4936      	ldr	r1, [pc, #216]	; (8005530 <_dtoa_r+0x620>)
 8005456:	2000      	movs	r0, #0
 8005458:	f7fa ff16 	bl	8000288 <__aeabi_dsub>
 800545c:	4652      	mov	r2, sl
 800545e:	465b      	mov	r3, fp
 8005460:	f7fb fb3c 	bl	8000adc <__aeabi_dcmplt>
 8005464:	2800      	cmp	r0, #0
 8005466:	f040 80b5 	bne.w	80055d4 <_dtoa_r+0x6c4>
 800546a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800546c:	429d      	cmp	r5, r3
 800546e:	d081      	beq.n	8005374 <_dtoa_r+0x464>
 8005470:	4b30      	ldr	r3, [pc, #192]	; (8005534 <_dtoa_r+0x624>)
 8005472:	2200      	movs	r2, #0
 8005474:	4650      	mov	r0, sl
 8005476:	4659      	mov	r1, fp
 8005478:	f7fb f8be 	bl	80005f8 <__aeabi_dmul>
 800547c:	4b2d      	ldr	r3, [pc, #180]	; (8005534 <_dtoa_r+0x624>)
 800547e:	4682      	mov	sl, r0
 8005480:	468b      	mov	fp, r1
 8005482:	4640      	mov	r0, r8
 8005484:	4649      	mov	r1, r9
 8005486:	2200      	movs	r2, #0
 8005488:	f7fb f8b6 	bl	80005f8 <__aeabi_dmul>
 800548c:	4680      	mov	r8, r0
 800548e:	4689      	mov	r9, r1
 8005490:	e7c6      	b.n	8005420 <_dtoa_r+0x510>
 8005492:	4650      	mov	r0, sl
 8005494:	4659      	mov	r1, fp
 8005496:	f7fb f8af 	bl	80005f8 <__aeabi_dmul>
 800549a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800549c:	9d01      	ldr	r5, [sp, #4]
 800549e:	930f      	str	r3, [sp, #60]	; 0x3c
 80054a0:	4682      	mov	sl, r0
 80054a2:	468b      	mov	fp, r1
 80054a4:	4649      	mov	r1, r9
 80054a6:	4640      	mov	r0, r8
 80054a8:	f7fb fb56 	bl	8000b58 <__aeabi_d2iz>
 80054ac:	4606      	mov	r6, r0
 80054ae:	f7fb f839 	bl	8000524 <__aeabi_i2d>
 80054b2:	3630      	adds	r6, #48	; 0x30
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4640      	mov	r0, r8
 80054ba:	4649      	mov	r1, r9
 80054bc:	f7fa fee4 	bl	8000288 <__aeabi_dsub>
 80054c0:	f805 6b01 	strb.w	r6, [r5], #1
 80054c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054c6:	429d      	cmp	r5, r3
 80054c8:	4680      	mov	r8, r0
 80054ca:	4689      	mov	r9, r1
 80054cc:	f04f 0200 	mov.w	r2, #0
 80054d0:	d124      	bne.n	800551c <_dtoa_r+0x60c>
 80054d2:	4b1b      	ldr	r3, [pc, #108]	; (8005540 <_dtoa_r+0x630>)
 80054d4:	4650      	mov	r0, sl
 80054d6:	4659      	mov	r1, fp
 80054d8:	f7fa fed8 	bl	800028c <__adddf3>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4640      	mov	r0, r8
 80054e2:	4649      	mov	r1, r9
 80054e4:	f7fb fb18 	bl	8000b18 <__aeabi_dcmpgt>
 80054e8:	2800      	cmp	r0, #0
 80054ea:	d173      	bne.n	80055d4 <_dtoa_r+0x6c4>
 80054ec:	4652      	mov	r2, sl
 80054ee:	465b      	mov	r3, fp
 80054f0:	4913      	ldr	r1, [pc, #76]	; (8005540 <_dtoa_r+0x630>)
 80054f2:	2000      	movs	r0, #0
 80054f4:	f7fa fec8 	bl	8000288 <__aeabi_dsub>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	4640      	mov	r0, r8
 80054fe:	4649      	mov	r1, r9
 8005500:	f7fb faec 	bl	8000adc <__aeabi_dcmplt>
 8005504:	2800      	cmp	r0, #0
 8005506:	f43f af35 	beq.w	8005374 <_dtoa_r+0x464>
 800550a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800550c:	1e6b      	subs	r3, r5, #1
 800550e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005510:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005514:	2b30      	cmp	r3, #48	; 0x30
 8005516:	d0f8      	beq.n	800550a <_dtoa_r+0x5fa>
 8005518:	9700      	str	r7, [sp, #0]
 800551a:	e049      	b.n	80055b0 <_dtoa_r+0x6a0>
 800551c:	4b05      	ldr	r3, [pc, #20]	; (8005534 <_dtoa_r+0x624>)
 800551e:	f7fb f86b 	bl	80005f8 <__aeabi_dmul>
 8005522:	4680      	mov	r8, r0
 8005524:	4689      	mov	r9, r1
 8005526:	e7bd      	b.n	80054a4 <_dtoa_r+0x594>
 8005528:	08007078 	.word	0x08007078
 800552c:	08007050 	.word	0x08007050
 8005530:	3ff00000 	.word	0x3ff00000
 8005534:	40240000 	.word	0x40240000
 8005538:	401c0000 	.word	0x401c0000
 800553c:	40140000 	.word	0x40140000
 8005540:	3fe00000 	.word	0x3fe00000
 8005544:	9d01      	ldr	r5, [sp, #4]
 8005546:	4656      	mov	r6, sl
 8005548:	465f      	mov	r7, fp
 800554a:	4642      	mov	r2, r8
 800554c:	464b      	mov	r3, r9
 800554e:	4630      	mov	r0, r6
 8005550:	4639      	mov	r1, r7
 8005552:	f7fb f97b 	bl	800084c <__aeabi_ddiv>
 8005556:	f7fb faff 	bl	8000b58 <__aeabi_d2iz>
 800555a:	4682      	mov	sl, r0
 800555c:	f7fa ffe2 	bl	8000524 <__aeabi_i2d>
 8005560:	4642      	mov	r2, r8
 8005562:	464b      	mov	r3, r9
 8005564:	f7fb f848 	bl	80005f8 <__aeabi_dmul>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4630      	mov	r0, r6
 800556e:	4639      	mov	r1, r7
 8005570:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005574:	f7fa fe88 	bl	8000288 <__aeabi_dsub>
 8005578:	f805 6b01 	strb.w	r6, [r5], #1
 800557c:	9e01      	ldr	r6, [sp, #4]
 800557e:	9f03      	ldr	r7, [sp, #12]
 8005580:	1bae      	subs	r6, r5, r6
 8005582:	42b7      	cmp	r7, r6
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	d135      	bne.n	80055f6 <_dtoa_r+0x6e6>
 800558a:	f7fa fe7f 	bl	800028c <__adddf3>
 800558e:	4642      	mov	r2, r8
 8005590:	464b      	mov	r3, r9
 8005592:	4606      	mov	r6, r0
 8005594:	460f      	mov	r7, r1
 8005596:	f7fb fabf 	bl	8000b18 <__aeabi_dcmpgt>
 800559a:	b9d0      	cbnz	r0, 80055d2 <_dtoa_r+0x6c2>
 800559c:	4642      	mov	r2, r8
 800559e:	464b      	mov	r3, r9
 80055a0:	4630      	mov	r0, r6
 80055a2:	4639      	mov	r1, r7
 80055a4:	f7fb fa90 	bl	8000ac8 <__aeabi_dcmpeq>
 80055a8:	b110      	cbz	r0, 80055b0 <_dtoa_r+0x6a0>
 80055aa:	f01a 0f01 	tst.w	sl, #1
 80055ae:	d110      	bne.n	80055d2 <_dtoa_r+0x6c2>
 80055b0:	4620      	mov	r0, r4
 80055b2:	ee18 1a10 	vmov	r1, s16
 80055b6:	f000 fd13 	bl	8005fe0 <_Bfree>
 80055ba:	2300      	movs	r3, #0
 80055bc:	9800      	ldr	r0, [sp, #0]
 80055be:	702b      	strb	r3, [r5, #0]
 80055c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055c2:	3001      	adds	r0, #1
 80055c4:	6018      	str	r0, [r3, #0]
 80055c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f43f acf1 	beq.w	8004fb0 <_dtoa_r+0xa0>
 80055ce:	601d      	str	r5, [r3, #0]
 80055d0:	e4ee      	b.n	8004fb0 <_dtoa_r+0xa0>
 80055d2:	9f00      	ldr	r7, [sp, #0]
 80055d4:	462b      	mov	r3, r5
 80055d6:	461d      	mov	r5, r3
 80055d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055dc:	2a39      	cmp	r2, #57	; 0x39
 80055de:	d106      	bne.n	80055ee <_dtoa_r+0x6de>
 80055e0:	9a01      	ldr	r2, [sp, #4]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d1f7      	bne.n	80055d6 <_dtoa_r+0x6c6>
 80055e6:	9901      	ldr	r1, [sp, #4]
 80055e8:	2230      	movs	r2, #48	; 0x30
 80055ea:	3701      	adds	r7, #1
 80055ec:	700a      	strb	r2, [r1, #0]
 80055ee:	781a      	ldrb	r2, [r3, #0]
 80055f0:	3201      	adds	r2, #1
 80055f2:	701a      	strb	r2, [r3, #0]
 80055f4:	e790      	b.n	8005518 <_dtoa_r+0x608>
 80055f6:	4ba6      	ldr	r3, [pc, #664]	; (8005890 <_dtoa_r+0x980>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	f7fa fffd 	bl	80005f8 <__aeabi_dmul>
 80055fe:	2200      	movs	r2, #0
 8005600:	2300      	movs	r3, #0
 8005602:	4606      	mov	r6, r0
 8005604:	460f      	mov	r7, r1
 8005606:	f7fb fa5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800560a:	2800      	cmp	r0, #0
 800560c:	d09d      	beq.n	800554a <_dtoa_r+0x63a>
 800560e:	e7cf      	b.n	80055b0 <_dtoa_r+0x6a0>
 8005610:	9a08      	ldr	r2, [sp, #32]
 8005612:	2a00      	cmp	r2, #0
 8005614:	f000 80d7 	beq.w	80057c6 <_dtoa_r+0x8b6>
 8005618:	9a06      	ldr	r2, [sp, #24]
 800561a:	2a01      	cmp	r2, #1
 800561c:	f300 80ba 	bgt.w	8005794 <_dtoa_r+0x884>
 8005620:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005622:	2a00      	cmp	r2, #0
 8005624:	f000 80b2 	beq.w	800578c <_dtoa_r+0x87c>
 8005628:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800562c:	9e07      	ldr	r6, [sp, #28]
 800562e:	9d04      	ldr	r5, [sp, #16]
 8005630:	9a04      	ldr	r2, [sp, #16]
 8005632:	441a      	add	r2, r3
 8005634:	9204      	str	r2, [sp, #16]
 8005636:	9a05      	ldr	r2, [sp, #20]
 8005638:	2101      	movs	r1, #1
 800563a:	441a      	add	r2, r3
 800563c:	4620      	mov	r0, r4
 800563e:	9205      	str	r2, [sp, #20]
 8005640:	f000 fd86 	bl	8006150 <__i2b>
 8005644:	4607      	mov	r7, r0
 8005646:	2d00      	cmp	r5, #0
 8005648:	dd0c      	ble.n	8005664 <_dtoa_r+0x754>
 800564a:	9b05      	ldr	r3, [sp, #20]
 800564c:	2b00      	cmp	r3, #0
 800564e:	dd09      	ble.n	8005664 <_dtoa_r+0x754>
 8005650:	42ab      	cmp	r3, r5
 8005652:	9a04      	ldr	r2, [sp, #16]
 8005654:	bfa8      	it	ge
 8005656:	462b      	movge	r3, r5
 8005658:	1ad2      	subs	r2, r2, r3
 800565a:	9204      	str	r2, [sp, #16]
 800565c:	9a05      	ldr	r2, [sp, #20]
 800565e:	1aed      	subs	r5, r5, r3
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	9305      	str	r3, [sp, #20]
 8005664:	9b07      	ldr	r3, [sp, #28]
 8005666:	b31b      	cbz	r3, 80056b0 <_dtoa_r+0x7a0>
 8005668:	9b08      	ldr	r3, [sp, #32]
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 80af 	beq.w	80057ce <_dtoa_r+0x8be>
 8005670:	2e00      	cmp	r6, #0
 8005672:	dd13      	ble.n	800569c <_dtoa_r+0x78c>
 8005674:	4639      	mov	r1, r7
 8005676:	4632      	mov	r2, r6
 8005678:	4620      	mov	r0, r4
 800567a:	f000 fe29 	bl	80062d0 <__pow5mult>
 800567e:	ee18 2a10 	vmov	r2, s16
 8005682:	4601      	mov	r1, r0
 8005684:	4607      	mov	r7, r0
 8005686:	4620      	mov	r0, r4
 8005688:	f000 fd78 	bl	800617c <__multiply>
 800568c:	ee18 1a10 	vmov	r1, s16
 8005690:	4680      	mov	r8, r0
 8005692:	4620      	mov	r0, r4
 8005694:	f000 fca4 	bl	8005fe0 <_Bfree>
 8005698:	ee08 8a10 	vmov	s16, r8
 800569c:	9b07      	ldr	r3, [sp, #28]
 800569e:	1b9a      	subs	r2, r3, r6
 80056a0:	d006      	beq.n	80056b0 <_dtoa_r+0x7a0>
 80056a2:	ee18 1a10 	vmov	r1, s16
 80056a6:	4620      	mov	r0, r4
 80056a8:	f000 fe12 	bl	80062d0 <__pow5mult>
 80056ac:	ee08 0a10 	vmov	s16, r0
 80056b0:	2101      	movs	r1, #1
 80056b2:	4620      	mov	r0, r4
 80056b4:	f000 fd4c 	bl	8006150 <__i2b>
 80056b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	4606      	mov	r6, r0
 80056be:	f340 8088 	ble.w	80057d2 <_dtoa_r+0x8c2>
 80056c2:	461a      	mov	r2, r3
 80056c4:	4601      	mov	r1, r0
 80056c6:	4620      	mov	r0, r4
 80056c8:	f000 fe02 	bl	80062d0 <__pow5mult>
 80056cc:	9b06      	ldr	r3, [sp, #24]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	4606      	mov	r6, r0
 80056d2:	f340 8081 	ble.w	80057d8 <_dtoa_r+0x8c8>
 80056d6:	f04f 0800 	mov.w	r8, #0
 80056da:	6933      	ldr	r3, [r6, #16]
 80056dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80056e0:	6918      	ldr	r0, [r3, #16]
 80056e2:	f000 fce5 	bl	80060b0 <__hi0bits>
 80056e6:	f1c0 0020 	rsb	r0, r0, #32
 80056ea:	9b05      	ldr	r3, [sp, #20]
 80056ec:	4418      	add	r0, r3
 80056ee:	f010 001f 	ands.w	r0, r0, #31
 80056f2:	f000 8092 	beq.w	800581a <_dtoa_r+0x90a>
 80056f6:	f1c0 0320 	rsb	r3, r0, #32
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	f340 808a 	ble.w	8005814 <_dtoa_r+0x904>
 8005700:	f1c0 001c 	rsb	r0, r0, #28
 8005704:	9b04      	ldr	r3, [sp, #16]
 8005706:	4403      	add	r3, r0
 8005708:	9304      	str	r3, [sp, #16]
 800570a:	9b05      	ldr	r3, [sp, #20]
 800570c:	4403      	add	r3, r0
 800570e:	4405      	add	r5, r0
 8005710:	9305      	str	r3, [sp, #20]
 8005712:	9b04      	ldr	r3, [sp, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	dd07      	ble.n	8005728 <_dtoa_r+0x818>
 8005718:	ee18 1a10 	vmov	r1, s16
 800571c:	461a      	mov	r2, r3
 800571e:	4620      	mov	r0, r4
 8005720:	f000 fe30 	bl	8006384 <__lshift>
 8005724:	ee08 0a10 	vmov	s16, r0
 8005728:	9b05      	ldr	r3, [sp, #20]
 800572a:	2b00      	cmp	r3, #0
 800572c:	dd05      	ble.n	800573a <_dtoa_r+0x82a>
 800572e:	4631      	mov	r1, r6
 8005730:	461a      	mov	r2, r3
 8005732:	4620      	mov	r0, r4
 8005734:	f000 fe26 	bl	8006384 <__lshift>
 8005738:	4606      	mov	r6, r0
 800573a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800573c:	2b00      	cmp	r3, #0
 800573e:	d06e      	beq.n	800581e <_dtoa_r+0x90e>
 8005740:	ee18 0a10 	vmov	r0, s16
 8005744:	4631      	mov	r1, r6
 8005746:	f000 fe8d 	bl	8006464 <__mcmp>
 800574a:	2800      	cmp	r0, #0
 800574c:	da67      	bge.n	800581e <_dtoa_r+0x90e>
 800574e:	9b00      	ldr	r3, [sp, #0]
 8005750:	3b01      	subs	r3, #1
 8005752:	ee18 1a10 	vmov	r1, s16
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	220a      	movs	r2, #10
 800575a:	2300      	movs	r3, #0
 800575c:	4620      	mov	r0, r4
 800575e:	f000 fc61 	bl	8006024 <__multadd>
 8005762:	9b08      	ldr	r3, [sp, #32]
 8005764:	ee08 0a10 	vmov	s16, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 81b1 	beq.w	8005ad0 <_dtoa_r+0xbc0>
 800576e:	2300      	movs	r3, #0
 8005770:	4639      	mov	r1, r7
 8005772:	220a      	movs	r2, #10
 8005774:	4620      	mov	r0, r4
 8005776:	f000 fc55 	bl	8006024 <__multadd>
 800577a:	9b02      	ldr	r3, [sp, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	4607      	mov	r7, r0
 8005780:	f300 808e 	bgt.w	80058a0 <_dtoa_r+0x990>
 8005784:	9b06      	ldr	r3, [sp, #24]
 8005786:	2b02      	cmp	r3, #2
 8005788:	dc51      	bgt.n	800582e <_dtoa_r+0x91e>
 800578a:	e089      	b.n	80058a0 <_dtoa_r+0x990>
 800578c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800578e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005792:	e74b      	b.n	800562c <_dtoa_r+0x71c>
 8005794:	9b03      	ldr	r3, [sp, #12]
 8005796:	1e5e      	subs	r6, r3, #1
 8005798:	9b07      	ldr	r3, [sp, #28]
 800579a:	42b3      	cmp	r3, r6
 800579c:	bfbf      	itttt	lt
 800579e:	9b07      	ldrlt	r3, [sp, #28]
 80057a0:	9607      	strlt	r6, [sp, #28]
 80057a2:	1af2      	sublt	r2, r6, r3
 80057a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80057a6:	bfb6      	itet	lt
 80057a8:	189b      	addlt	r3, r3, r2
 80057aa:	1b9e      	subge	r6, r3, r6
 80057ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80057ae:	9b03      	ldr	r3, [sp, #12]
 80057b0:	bfb8      	it	lt
 80057b2:	2600      	movlt	r6, #0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	bfb7      	itett	lt
 80057b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80057bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80057c0:	1a9d      	sublt	r5, r3, r2
 80057c2:	2300      	movlt	r3, #0
 80057c4:	e734      	b.n	8005630 <_dtoa_r+0x720>
 80057c6:	9e07      	ldr	r6, [sp, #28]
 80057c8:	9d04      	ldr	r5, [sp, #16]
 80057ca:	9f08      	ldr	r7, [sp, #32]
 80057cc:	e73b      	b.n	8005646 <_dtoa_r+0x736>
 80057ce:	9a07      	ldr	r2, [sp, #28]
 80057d0:	e767      	b.n	80056a2 <_dtoa_r+0x792>
 80057d2:	9b06      	ldr	r3, [sp, #24]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	dc18      	bgt.n	800580a <_dtoa_r+0x8fa>
 80057d8:	f1ba 0f00 	cmp.w	sl, #0
 80057dc:	d115      	bne.n	800580a <_dtoa_r+0x8fa>
 80057de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80057e2:	b993      	cbnz	r3, 800580a <_dtoa_r+0x8fa>
 80057e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80057e8:	0d1b      	lsrs	r3, r3, #20
 80057ea:	051b      	lsls	r3, r3, #20
 80057ec:	b183      	cbz	r3, 8005810 <_dtoa_r+0x900>
 80057ee:	9b04      	ldr	r3, [sp, #16]
 80057f0:	3301      	adds	r3, #1
 80057f2:	9304      	str	r3, [sp, #16]
 80057f4:	9b05      	ldr	r3, [sp, #20]
 80057f6:	3301      	adds	r3, #1
 80057f8:	9305      	str	r3, [sp, #20]
 80057fa:	f04f 0801 	mov.w	r8, #1
 80057fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005800:	2b00      	cmp	r3, #0
 8005802:	f47f af6a 	bne.w	80056da <_dtoa_r+0x7ca>
 8005806:	2001      	movs	r0, #1
 8005808:	e76f      	b.n	80056ea <_dtoa_r+0x7da>
 800580a:	f04f 0800 	mov.w	r8, #0
 800580e:	e7f6      	b.n	80057fe <_dtoa_r+0x8ee>
 8005810:	4698      	mov	r8, r3
 8005812:	e7f4      	b.n	80057fe <_dtoa_r+0x8ee>
 8005814:	f43f af7d 	beq.w	8005712 <_dtoa_r+0x802>
 8005818:	4618      	mov	r0, r3
 800581a:	301c      	adds	r0, #28
 800581c:	e772      	b.n	8005704 <_dtoa_r+0x7f4>
 800581e:	9b03      	ldr	r3, [sp, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	dc37      	bgt.n	8005894 <_dtoa_r+0x984>
 8005824:	9b06      	ldr	r3, [sp, #24]
 8005826:	2b02      	cmp	r3, #2
 8005828:	dd34      	ble.n	8005894 <_dtoa_r+0x984>
 800582a:	9b03      	ldr	r3, [sp, #12]
 800582c:	9302      	str	r3, [sp, #8]
 800582e:	9b02      	ldr	r3, [sp, #8]
 8005830:	b96b      	cbnz	r3, 800584e <_dtoa_r+0x93e>
 8005832:	4631      	mov	r1, r6
 8005834:	2205      	movs	r2, #5
 8005836:	4620      	mov	r0, r4
 8005838:	f000 fbf4 	bl	8006024 <__multadd>
 800583c:	4601      	mov	r1, r0
 800583e:	4606      	mov	r6, r0
 8005840:	ee18 0a10 	vmov	r0, s16
 8005844:	f000 fe0e 	bl	8006464 <__mcmp>
 8005848:	2800      	cmp	r0, #0
 800584a:	f73f adbb 	bgt.w	80053c4 <_dtoa_r+0x4b4>
 800584e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005850:	9d01      	ldr	r5, [sp, #4]
 8005852:	43db      	mvns	r3, r3
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	f04f 0800 	mov.w	r8, #0
 800585a:	4631      	mov	r1, r6
 800585c:	4620      	mov	r0, r4
 800585e:	f000 fbbf 	bl	8005fe0 <_Bfree>
 8005862:	2f00      	cmp	r7, #0
 8005864:	f43f aea4 	beq.w	80055b0 <_dtoa_r+0x6a0>
 8005868:	f1b8 0f00 	cmp.w	r8, #0
 800586c:	d005      	beq.n	800587a <_dtoa_r+0x96a>
 800586e:	45b8      	cmp	r8, r7
 8005870:	d003      	beq.n	800587a <_dtoa_r+0x96a>
 8005872:	4641      	mov	r1, r8
 8005874:	4620      	mov	r0, r4
 8005876:	f000 fbb3 	bl	8005fe0 <_Bfree>
 800587a:	4639      	mov	r1, r7
 800587c:	4620      	mov	r0, r4
 800587e:	f000 fbaf 	bl	8005fe0 <_Bfree>
 8005882:	e695      	b.n	80055b0 <_dtoa_r+0x6a0>
 8005884:	2600      	movs	r6, #0
 8005886:	4637      	mov	r7, r6
 8005888:	e7e1      	b.n	800584e <_dtoa_r+0x93e>
 800588a:	9700      	str	r7, [sp, #0]
 800588c:	4637      	mov	r7, r6
 800588e:	e599      	b.n	80053c4 <_dtoa_r+0x4b4>
 8005890:	40240000 	.word	0x40240000
 8005894:	9b08      	ldr	r3, [sp, #32]
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 80ca 	beq.w	8005a30 <_dtoa_r+0xb20>
 800589c:	9b03      	ldr	r3, [sp, #12]
 800589e:	9302      	str	r3, [sp, #8]
 80058a0:	2d00      	cmp	r5, #0
 80058a2:	dd05      	ble.n	80058b0 <_dtoa_r+0x9a0>
 80058a4:	4639      	mov	r1, r7
 80058a6:	462a      	mov	r2, r5
 80058a8:	4620      	mov	r0, r4
 80058aa:	f000 fd6b 	bl	8006384 <__lshift>
 80058ae:	4607      	mov	r7, r0
 80058b0:	f1b8 0f00 	cmp.w	r8, #0
 80058b4:	d05b      	beq.n	800596e <_dtoa_r+0xa5e>
 80058b6:	6879      	ldr	r1, [r7, #4]
 80058b8:	4620      	mov	r0, r4
 80058ba:	f000 fb51 	bl	8005f60 <_Balloc>
 80058be:	4605      	mov	r5, r0
 80058c0:	b928      	cbnz	r0, 80058ce <_dtoa_r+0x9be>
 80058c2:	4b87      	ldr	r3, [pc, #540]	; (8005ae0 <_dtoa_r+0xbd0>)
 80058c4:	4602      	mov	r2, r0
 80058c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80058ca:	f7ff bb3b 	b.w	8004f44 <_dtoa_r+0x34>
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	3202      	adds	r2, #2
 80058d2:	0092      	lsls	r2, r2, #2
 80058d4:	f107 010c 	add.w	r1, r7, #12
 80058d8:	300c      	adds	r0, #12
 80058da:	f000 fb33 	bl	8005f44 <memcpy>
 80058de:	2201      	movs	r2, #1
 80058e0:	4629      	mov	r1, r5
 80058e2:	4620      	mov	r0, r4
 80058e4:	f000 fd4e 	bl	8006384 <__lshift>
 80058e8:	9b01      	ldr	r3, [sp, #4]
 80058ea:	f103 0901 	add.w	r9, r3, #1
 80058ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80058f2:	4413      	add	r3, r2
 80058f4:	9305      	str	r3, [sp, #20]
 80058f6:	f00a 0301 	and.w	r3, sl, #1
 80058fa:	46b8      	mov	r8, r7
 80058fc:	9304      	str	r3, [sp, #16]
 80058fe:	4607      	mov	r7, r0
 8005900:	4631      	mov	r1, r6
 8005902:	ee18 0a10 	vmov	r0, s16
 8005906:	f7ff fa75 	bl	8004df4 <quorem>
 800590a:	4641      	mov	r1, r8
 800590c:	9002      	str	r0, [sp, #8]
 800590e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005912:	ee18 0a10 	vmov	r0, s16
 8005916:	f000 fda5 	bl	8006464 <__mcmp>
 800591a:	463a      	mov	r2, r7
 800591c:	9003      	str	r0, [sp, #12]
 800591e:	4631      	mov	r1, r6
 8005920:	4620      	mov	r0, r4
 8005922:	f000 fdbb 	bl	800649c <__mdiff>
 8005926:	68c2      	ldr	r2, [r0, #12]
 8005928:	f109 3bff 	add.w	fp, r9, #4294967295
 800592c:	4605      	mov	r5, r0
 800592e:	bb02      	cbnz	r2, 8005972 <_dtoa_r+0xa62>
 8005930:	4601      	mov	r1, r0
 8005932:	ee18 0a10 	vmov	r0, s16
 8005936:	f000 fd95 	bl	8006464 <__mcmp>
 800593a:	4602      	mov	r2, r0
 800593c:	4629      	mov	r1, r5
 800593e:	4620      	mov	r0, r4
 8005940:	9207      	str	r2, [sp, #28]
 8005942:	f000 fb4d 	bl	8005fe0 <_Bfree>
 8005946:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800594a:	ea43 0102 	orr.w	r1, r3, r2
 800594e:	9b04      	ldr	r3, [sp, #16]
 8005950:	430b      	orrs	r3, r1
 8005952:	464d      	mov	r5, r9
 8005954:	d10f      	bne.n	8005976 <_dtoa_r+0xa66>
 8005956:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800595a:	d02a      	beq.n	80059b2 <_dtoa_r+0xaa2>
 800595c:	9b03      	ldr	r3, [sp, #12]
 800595e:	2b00      	cmp	r3, #0
 8005960:	dd02      	ble.n	8005968 <_dtoa_r+0xa58>
 8005962:	9b02      	ldr	r3, [sp, #8]
 8005964:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005968:	f88b a000 	strb.w	sl, [fp]
 800596c:	e775      	b.n	800585a <_dtoa_r+0x94a>
 800596e:	4638      	mov	r0, r7
 8005970:	e7ba      	b.n	80058e8 <_dtoa_r+0x9d8>
 8005972:	2201      	movs	r2, #1
 8005974:	e7e2      	b.n	800593c <_dtoa_r+0xa2c>
 8005976:	9b03      	ldr	r3, [sp, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	db04      	blt.n	8005986 <_dtoa_r+0xa76>
 800597c:	9906      	ldr	r1, [sp, #24]
 800597e:	430b      	orrs	r3, r1
 8005980:	9904      	ldr	r1, [sp, #16]
 8005982:	430b      	orrs	r3, r1
 8005984:	d122      	bne.n	80059cc <_dtoa_r+0xabc>
 8005986:	2a00      	cmp	r2, #0
 8005988:	ddee      	ble.n	8005968 <_dtoa_r+0xa58>
 800598a:	ee18 1a10 	vmov	r1, s16
 800598e:	2201      	movs	r2, #1
 8005990:	4620      	mov	r0, r4
 8005992:	f000 fcf7 	bl	8006384 <__lshift>
 8005996:	4631      	mov	r1, r6
 8005998:	ee08 0a10 	vmov	s16, r0
 800599c:	f000 fd62 	bl	8006464 <__mcmp>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	dc03      	bgt.n	80059ac <_dtoa_r+0xa9c>
 80059a4:	d1e0      	bne.n	8005968 <_dtoa_r+0xa58>
 80059a6:	f01a 0f01 	tst.w	sl, #1
 80059aa:	d0dd      	beq.n	8005968 <_dtoa_r+0xa58>
 80059ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80059b0:	d1d7      	bne.n	8005962 <_dtoa_r+0xa52>
 80059b2:	2339      	movs	r3, #57	; 0x39
 80059b4:	f88b 3000 	strb.w	r3, [fp]
 80059b8:	462b      	mov	r3, r5
 80059ba:	461d      	mov	r5, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80059c2:	2a39      	cmp	r2, #57	; 0x39
 80059c4:	d071      	beq.n	8005aaa <_dtoa_r+0xb9a>
 80059c6:	3201      	adds	r2, #1
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	e746      	b.n	800585a <_dtoa_r+0x94a>
 80059cc:	2a00      	cmp	r2, #0
 80059ce:	dd07      	ble.n	80059e0 <_dtoa_r+0xad0>
 80059d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80059d4:	d0ed      	beq.n	80059b2 <_dtoa_r+0xaa2>
 80059d6:	f10a 0301 	add.w	r3, sl, #1
 80059da:	f88b 3000 	strb.w	r3, [fp]
 80059de:	e73c      	b.n	800585a <_dtoa_r+0x94a>
 80059e0:	9b05      	ldr	r3, [sp, #20]
 80059e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80059e6:	4599      	cmp	r9, r3
 80059e8:	d047      	beq.n	8005a7a <_dtoa_r+0xb6a>
 80059ea:	ee18 1a10 	vmov	r1, s16
 80059ee:	2300      	movs	r3, #0
 80059f0:	220a      	movs	r2, #10
 80059f2:	4620      	mov	r0, r4
 80059f4:	f000 fb16 	bl	8006024 <__multadd>
 80059f8:	45b8      	cmp	r8, r7
 80059fa:	ee08 0a10 	vmov	s16, r0
 80059fe:	f04f 0300 	mov.w	r3, #0
 8005a02:	f04f 020a 	mov.w	r2, #10
 8005a06:	4641      	mov	r1, r8
 8005a08:	4620      	mov	r0, r4
 8005a0a:	d106      	bne.n	8005a1a <_dtoa_r+0xb0a>
 8005a0c:	f000 fb0a 	bl	8006024 <__multadd>
 8005a10:	4680      	mov	r8, r0
 8005a12:	4607      	mov	r7, r0
 8005a14:	f109 0901 	add.w	r9, r9, #1
 8005a18:	e772      	b.n	8005900 <_dtoa_r+0x9f0>
 8005a1a:	f000 fb03 	bl	8006024 <__multadd>
 8005a1e:	4639      	mov	r1, r7
 8005a20:	4680      	mov	r8, r0
 8005a22:	2300      	movs	r3, #0
 8005a24:	220a      	movs	r2, #10
 8005a26:	4620      	mov	r0, r4
 8005a28:	f000 fafc 	bl	8006024 <__multadd>
 8005a2c:	4607      	mov	r7, r0
 8005a2e:	e7f1      	b.n	8005a14 <_dtoa_r+0xb04>
 8005a30:	9b03      	ldr	r3, [sp, #12]
 8005a32:	9302      	str	r3, [sp, #8]
 8005a34:	9d01      	ldr	r5, [sp, #4]
 8005a36:	ee18 0a10 	vmov	r0, s16
 8005a3a:	4631      	mov	r1, r6
 8005a3c:	f7ff f9da 	bl	8004df4 <quorem>
 8005a40:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005a44:	9b01      	ldr	r3, [sp, #4]
 8005a46:	f805 ab01 	strb.w	sl, [r5], #1
 8005a4a:	1aea      	subs	r2, r5, r3
 8005a4c:	9b02      	ldr	r3, [sp, #8]
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	dd09      	ble.n	8005a66 <_dtoa_r+0xb56>
 8005a52:	ee18 1a10 	vmov	r1, s16
 8005a56:	2300      	movs	r3, #0
 8005a58:	220a      	movs	r2, #10
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f000 fae2 	bl	8006024 <__multadd>
 8005a60:	ee08 0a10 	vmov	s16, r0
 8005a64:	e7e7      	b.n	8005a36 <_dtoa_r+0xb26>
 8005a66:	9b02      	ldr	r3, [sp, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	bfc8      	it	gt
 8005a6c:	461d      	movgt	r5, r3
 8005a6e:	9b01      	ldr	r3, [sp, #4]
 8005a70:	bfd8      	it	le
 8005a72:	2501      	movle	r5, #1
 8005a74:	441d      	add	r5, r3
 8005a76:	f04f 0800 	mov.w	r8, #0
 8005a7a:	ee18 1a10 	vmov	r1, s16
 8005a7e:	2201      	movs	r2, #1
 8005a80:	4620      	mov	r0, r4
 8005a82:	f000 fc7f 	bl	8006384 <__lshift>
 8005a86:	4631      	mov	r1, r6
 8005a88:	ee08 0a10 	vmov	s16, r0
 8005a8c:	f000 fcea 	bl	8006464 <__mcmp>
 8005a90:	2800      	cmp	r0, #0
 8005a92:	dc91      	bgt.n	80059b8 <_dtoa_r+0xaa8>
 8005a94:	d102      	bne.n	8005a9c <_dtoa_r+0xb8c>
 8005a96:	f01a 0f01 	tst.w	sl, #1
 8005a9a:	d18d      	bne.n	80059b8 <_dtoa_r+0xaa8>
 8005a9c:	462b      	mov	r3, r5
 8005a9e:	461d      	mov	r5, r3
 8005aa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005aa4:	2a30      	cmp	r2, #48	; 0x30
 8005aa6:	d0fa      	beq.n	8005a9e <_dtoa_r+0xb8e>
 8005aa8:	e6d7      	b.n	800585a <_dtoa_r+0x94a>
 8005aaa:	9a01      	ldr	r2, [sp, #4]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d184      	bne.n	80059ba <_dtoa_r+0xaaa>
 8005ab0:	9b00      	ldr	r3, [sp, #0]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	2331      	movs	r3, #49	; 0x31
 8005ab8:	7013      	strb	r3, [r2, #0]
 8005aba:	e6ce      	b.n	800585a <_dtoa_r+0x94a>
 8005abc:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <_dtoa_r+0xbd4>)
 8005abe:	f7ff ba95 	b.w	8004fec <_dtoa_r+0xdc>
 8005ac2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f47f aa6e 	bne.w	8004fa6 <_dtoa_r+0x96>
 8005aca:	4b07      	ldr	r3, [pc, #28]	; (8005ae8 <_dtoa_r+0xbd8>)
 8005acc:	f7ff ba8e 	b.w	8004fec <_dtoa_r+0xdc>
 8005ad0:	9b02      	ldr	r3, [sp, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	dcae      	bgt.n	8005a34 <_dtoa_r+0xb24>
 8005ad6:	9b06      	ldr	r3, [sp, #24]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	f73f aea8 	bgt.w	800582e <_dtoa_r+0x91e>
 8005ade:	e7a9      	b.n	8005a34 <_dtoa_r+0xb24>
 8005ae0:	08006f83 	.word	0x08006f83
 8005ae4:	08006ee0 	.word	0x08006ee0
 8005ae8:	08006f04 	.word	0x08006f04

08005aec <__sflush_r>:
 8005aec:	898a      	ldrh	r2, [r1, #12]
 8005aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005af2:	4605      	mov	r5, r0
 8005af4:	0710      	lsls	r0, r2, #28
 8005af6:	460c      	mov	r4, r1
 8005af8:	d458      	bmi.n	8005bac <__sflush_r+0xc0>
 8005afa:	684b      	ldr	r3, [r1, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	dc05      	bgt.n	8005b0c <__sflush_r+0x20>
 8005b00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	dc02      	bgt.n	8005b0c <__sflush_r+0x20>
 8005b06:	2000      	movs	r0, #0
 8005b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b0e:	2e00      	cmp	r6, #0
 8005b10:	d0f9      	beq.n	8005b06 <__sflush_r+0x1a>
 8005b12:	2300      	movs	r3, #0
 8005b14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b18:	682f      	ldr	r7, [r5, #0]
 8005b1a:	602b      	str	r3, [r5, #0]
 8005b1c:	d032      	beq.n	8005b84 <__sflush_r+0x98>
 8005b1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b20:	89a3      	ldrh	r3, [r4, #12]
 8005b22:	075a      	lsls	r2, r3, #29
 8005b24:	d505      	bpl.n	8005b32 <__sflush_r+0x46>
 8005b26:	6863      	ldr	r3, [r4, #4]
 8005b28:	1ac0      	subs	r0, r0, r3
 8005b2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b2c:	b10b      	cbz	r3, 8005b32 <__sflush_r+0x46>
 8005b2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b30:	1ac0      	subs	r0, r0, r3
 8005b32:	2300      	movs	r3, #0
 8005b34:	4602      	mov	r2, r0
 8005b36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b38:	6a21      	ldr	r1, [r4, #32]
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	47b0      	blx	r6
 8005b3e:	1c43      	adds	r3, r0, #1
 8005b40:	89a3      	ldrh	r3, [r4, #12]
 8005b42:	d106      	bne.n	8005b52 <__sflush_r+0x66>
 8005b44:	6829      	ldr	r1, [r5, #0]
 8005b46:	291d      	cmp	r1, #29
 8005b48:	d82c      	bhi.n	8005ba4 <__sflush_r+0xb8>
 8005b4a:	4a2a      	ldr	r2, [pc, #168]	; (8005bf4 <__sflush_r+0x108>)
 8005b4c:	40ca      	lsrs	r2, r1
 8005b4e:	07d6      	lsls	r6, r2, #31
 8005b50:	d528      	bpl.n	8005ba4 <__sflush_r+0xb8>
 8005b52:	2200      	movs	r2, #0
 8005b54:	6062      	str	r2, [r4, #4]
 8005b56:	04d9      	lsls	r1, r3, #19
 8005b58:	6922      	ldr	r2, [r4, #16]
 8005b5a:	6022      	str	r2, [r4, #0]
 8005b5c:	d504      	bpl.n	8005b68 <__sflush_r+0x7c>
 8005b5e:	1c42      	adds	r2, r0, #1
 8005b60:	d101      	bne.n	8005b66 <__sflush_r+0x7a>
 8005b62:	682b      	ldr	r3, [r5, #0]
 8005b64:	b903      	cbnz	r3, 8005b68 <__sflush_r+0x7c>
 8005b66:	6560      	str	r0, [r4, #84]	; 0x54
 8005b68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b6a:	602f      	str	r7, [r5, #0]
 8005b6c:	2900      	cmp	r1, #0
 8005b6e:	d0ca      	beq.n	8005b06 <__sflush_r+0x1a>
 8005b70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b74:	4299      	cmp	r1, r3
 8005b76:	d002      	beq.n	8005b7e <__sflush_r+0x92>
 8005b78:	4628      	mov	r0, r5
 8005b7a:	f000 fd8b 	bl	8006694 <_free_r>
 8005b7e:	2000      	movs	r0, #0
 8005b80:	6360      	str	r0, [r4, #52]	; 0x34
 8005b82:	e7c1      	b.n	8005b08 <__sflush_r+0x1c>
 8005b84:	6a21      	ldr	r1, [r4, #32]
 8005b86:	2301      	movs	r3, #1
 8005b88:	4628      	mov	r0, r5
 8005b8a:	47b0      	blx	r6
 8005b8c:	1c41      	adds	r1, r0, #1
 8005b8e:	d1c7      	bne.n	8005b20 <__sflush_r+0x34>
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d0c4      	beq.n	8005b20 <__sflush_r+0x34>
 8005b96:	2b1d      	cmp	r3, #29
 8005b98:	d001      	beq.n	8005b9e <__sflush_r+0xb2>
 8005b9a:	2b16      	cmp	r3, #22
 8005b9c:	d101      	bne.n	8005ba2 <__sflush_r+0xb6>
 8005b9e:	602f      	str	r7, [r5, #0]
 8005ba0:	e7b1      	b.n	8005b06 <__sflush_r+0x1a>
 8005ba2:	89a3      	ldrh	r3, [r4, #12]
 8005ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ba8:	81a3      	strh	r3, [r4, #12]
 8005baa:	e7ad      	b.n	8005b08 <__sflush_r+0x1c>
 8005bac:	690f      	ldr	r7, [r1, #16]
 8005bae:	2f00      	cmp	r7, #0
 8005bb0:	d0a9      	beq.n	8005b06 <__sflush_r+0x1a>
 8005bb2:	0793      	lsls	r3, r2, #30
 8005bb4:	680e      	ldr	r6, [r1, #0]
 8005bb6:	bf08      	it	eq
 8005bb8:	694b      	ldreq	r3, [r1, #20]
 8005bba:	600f      	str	r7, [r1, #0]
 8005bbc:	bf18      	it	ne
 8005bbe:	2300      	movne	r3, #0
 8005bc0:	eba6 0807 	sub.w	r8, r6, r7
 8005bc4:	608b      	str	r3, [r1, #8]
 8005bc6:	f1b8 0f00 	cmp.w	r8, #0
 8005bca:	dd9c      	ble.n	8005b06 <__sflush_r+0x1a>
 8005bcc:	6a21      	ldr	r1, [r4, #32]
 8005bce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005bd0:	4643      	mov	r3, r8
 8005bd2:	463a      	mov	r2, r7
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	47b0      	blx	r6
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	dc06      	bgt.n	8005bea <__sflush_r+0xfe>
 8005bdc:	89a3      	ldrh	r3, [r4, #12]
 8005bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005be2:	81a3      	strh	r3, [r4, #12]
 8005be4:	f04f 30ff 	mov.w	r0, #4294967295
 8005be8:	e78e      	b.n	8005b08 <__sflush_r+0x1c>
 8005bea:	4407      	add	r7, r0
 8005bec:	eba8 0800 	sub.w	r8, r8, r0
 8005bf0:	e7e9      	b.n	8005bc6 <__sflush_r+0xda>
 8005bf2:	bf00      	nop
 8005bf4:	20400001 	.word	0x20400001

08005bf8 <_fflush_r>:
 8005bf8:	b538      	push	{r3, r4, r5, lr}
 8005bfa:	690b      	ldr	r3, [r1, #16]
 8005bfc:	4605      	mov	r5, r0
 8005bfe:	460c      	mov	r4, r1
 8005c00:	b913      	cbnz	r3, 8005c08 <_fflush_r+0x10>
 8005c02:	2500      	movs	r5, #0
 8005c04:	4628      	mov	r0, r5
 8005c06:	bd38      	pop	{r3, r4, r5, pc}
 8005c08:	b118      	cbz	r0, 8005c12 <_fflush_r+0x1a>
 8005c0a:	6983      	ldr	r3, [r0, #24]
 8005c0c:	b90b      	cbnz	r3, 8005c12 <_fflush_r+0x1a>
 8005c0e:	f000 f887 	bl	8005d20 <__sinit>
 8005c12:	4b14      	ldr	r3, [pc, #80]	; (8005c64 <_fflush_r+0x6c>)
 8005c14:	429c      	cmp	r4, r3
 8005c16:	d11b      	bne.n	8005c50 <_fflush_r+0x58>
 8005c18:	686c      	ldr	r4, [r5, #4]
 8005c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0ef      	beq.n	8005c02 <_fflush_r+0xa>
 8005c22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c24:	07d0      	lsls	r0, r2, #31
 8005c26:	d404      	bmi.n	8005c32 <_fflush_r+0x3a>
 8005c28:	0599      	lsls	r1, r3, #22
 8005c2a:	d402      	bmi.n	8005c32 <_fflush_r+0x3a>
 8005c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c2e:	f000 f91a 	bl	8005e66 <__retarget_lock_acquire_recursive>
 8005c32:	4628      	mov	r0, r5
 8005c34:	4621      	mov	r1, r4
 8005c36:	f7ff ff59 	bl	8005aec <__sflush_r>
 8005c3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c3c:	07da      	lsls	r2, r3, #31
 8005c3e:	4605      	mov	r5, r0
 8005c40:	d4e0      	bmi.n	8005c04 <_fflush_r+0xc>
 8005c42:	89a3      	ldrh	r3, [r4, #12]
 8005c44:	059b      	lsls	r3, r3, #22
 8005c46:	d4dd      	bmi.n	8005c04 <_fflush_r+0xc>
 8005c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c4a:	f000 f90d 	bl	8005e68 <__retarget_lock_release_recursive>
 8005c4e:	e7d9      	b.n	8005c04 <_fflush_r+0xc>
 8005c50:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <_fflush_r+0x70>)
 8005c52:	429c      	cmp	r4, r3
 8005c54:	d101      	bne.n	8005c5a <_fflush_r+0x62>
 8005c56:	68ac      	ldr	r4, [r5, #8]
 8005c58:	e7df      	b.n	8005c1a <_fflush_r+0x22>
 8005c5a:	4b04      	ldr	r3, [pc, #16]	; (8005c6c <_fflush_r+0x74>)
 8005c5c:	429c      	cmp	r4, r3
 8005c5e:	bf08      	it	eq
 8005c60:	68ec      	ldreq	r4, [r5, #12]
 8005c62:	e7da      	b.n	8005c1a <_fflush_r+0x22>
 8005c64:	08006fb4 	.word	0x08006fb4
 8005c68:	08006fd4 	.word	0x08006fd4
 8005c6c:	08006f94 	.word	0x08006f94

08005c70 <std>:
 8005c70:	2300      	movs	r3, #0
 8005c72:	b510      	push	{r4, lr}
 8005c74:	4604      	mov	r4, r0
 8005c76:	e9c0 3300 	strd	r3, r3, [r0]
 8005c7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c7e:	6083      	str	r3, [r0, #8]
 8005c80:	8181      	strh	r1, [r0, #12]
 8005c82:	6643      	str	r3, [r0, #100]	; 0x64
 8005c84:	81c2      	strh	r2, [r0, #14]
 8005c86:	6183      	str	r3, [r0, #24]
 8005c88:	4619      	mov	r1, r3
 8005c8a:	2208      	movs	r2, #8
 8005c8c:	305c      	adds	r0, #92	; 0x5c
 8005c8e:	f7fe fa23 	bl	80040d8 <memset>
 8005c92:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <std+0x38>)
 8005c94:	6263      	str	r3, [r4, #36]	; 0x24
 8005c96:	4b05      	ldr	r3, [pc, #20]	; (8005cac <std+0x3c>)
 8005c98:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c9a:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <std+0x40>)
 8005c9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c9e:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <std+0x44>)
 8005ca0:	6224      	str	r4, [r4, #32]
 8005ca2:	6323      	str	r3, [r4, #48]	; 0x30
 8005ca4:	bd10      	pop	{r4, pc}
 8005ca6:	bf00      	nop
 8005ca8:	08006b29 	.word	0x08006b29
 8005cac:	08006b4b 	.word	0x08006b4b
 8005cb0:	08006b83 	.word	0x08006b83
 8005cb4:	08006ba7 	.word	0x08006ba7

08005cb8 <_cleanup_r>:
 8005cb8:	4901      	ldr	r1, [pc, #4]	; (8005cc0 <_cleanup_r+0x8>)
 8005cba:	f000 b8af 	b.w	8005e1c <_fwalk_reent>
 8005cbe:	bf00      	nop
 8005cc0:	08005bf9 	.word	0x08005bf9

08005cc4 <__sfmoreglue>:
 8005cc4:	b570      	push	{r4, r5, r6, lr}
 8005cc6:	2268      	movs	r2, #104	; 0x68
 8005cc8:	1e4d      	subs	r5, r1, #1
 8005cca:	4355      	muls	r5, r2
 8005ccc:	460e      	mov	r6, r1
 8005cce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005cd2:	f000 fd4b 	bl	800676c <_malloc_r>
 8005cd6:	4604      	mov	r4, r0
 8005cd8:	b140      	cbz	r0, 8005cec <__sfmoreglue+0x28>
 8005cda:	2100      	movs	r1, #0
 8005cdc:	e9c0 1600 	strd	r1, r6, [r0]
 8005ce0:	300c      	adds	r0, #12
 8005ce2:	60a0      	str	r0, [r4, #8]
 8005ce4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ce8:	f7fe f9f6 	bl	80040d8 <memset>
 8005cec:	4620      	mov	r0, r4
 8005cee:	bd70      	pop	{r4, r5, r6, pc}

08005cf0 <__sfp_lock_acquire>:
 8005cf0:	4801      	ldr	r0, [pc, #4]	; (8005cf8 <__sfp_lock_acquire+0x8>)
 8005cf2:	f000 b8b8 	b.w	8005e66 <__retarget_lock_acquire_recursive>
 8005cf6:	bf00      	nop
 8005cf8:	2000035d 	.word	0x2000035d

08005cfc <__sfp_lock_release>:
 8005cfc:	4801      	ldr	r0, [pc, #4]	; (8005d04 <__sfp_lock_release+0x8>)
 8005cfe:	f000 b8b3 	b.w	8005e68 <__retarget_lock_release_recursive>
 8005d02:	bf00      	nop
 8005d04:	2000035d 	.word	0x2000035d

08005d08 <__sinit_lock_acquire>:
 8005d08:	4801      	ldr	r0, [pc, #4]	; (8005d10 <__sinit_lock_acquire+0x8>)
 8005d0a:	f000 b8ac 	b.w	8005e66 <__retarget_lock_acquire_recursive>
 8005d0e:	bf00      	nop
 8005d10:	2000035e 	.word	0x2000035e

08005d14 <__sinit_lock_release>:
 8005d14:	4801      	ldr	r0, [pc, #4]	; (8005d1c <__sinit_lock_release+0x8>)
 8005d16:	f000 b8a7 	b.w	8005e68 <__retarget_lock_release_recursive>
 8005d1a:	bf00      	nop
 8005d1c:	2000035e 	.word	0x2000035e

08005d20 <__sinit>:
 8005d20:	b510      	push	{r4, lr}
 8005d22:	4604      	mov	r4, r0
 8005d24:	f7ff fff0 	bl	8005d08 <__sinit_lock_acquire>
 8005d28:	69a3      	ldr	r3, [r4, #24]
 8005d2a:	b11b      	cbz	r3, 8005d34 <__sinit+0x14>
 8005d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d30:	f7ff bff0 	b.w	8005d14 <__sinit_lock_release>
 8005d34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005d38:	6523      	str	r3, [r4, #80]	; 0x50
 8005d3a:	4b13      	ldr	r3, [pc, #76]	; (8005d88 <__sinit+0x68>)
 8005d3c:	4a13      	ldr	r2, [pc, #76]	; (8005d8c <__sinit+0x6c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	62a2      	str	r2, [r4, #40]	; 0x28
 8005d42:	42a3      	cmp	r3, r4
 8005d44:	bf04      	itt	eq
 8005d46:	2301      	moveq	r3, #1
 8005d48:	61a3      	streq	r3, [r4, #24]
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	f000 f820 	bl	8005d90 <__sfp>
 8005d50:	6060      	str	r0, [r4, #4]
 8005d52:	4620      	mov	r0, r4
 8005d54:	f000 f81c 	bl	8005d90 <__sfp>
 8005d58:	60a0      	str	r0, [r4, #8]
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f000 f818 	bl	8005d90 <__sfp>
 8005d60:	2200      	movs	r2, #0
 8005d62:	60e0      	str	r0, [r4, #12]
 8005d64:	2104      	movs	r1, #4
 8005d66:	6860      	ldr	r0, [r4, #4]
 8005d68:	f7ff ff82 	bl	8005c70 <std>
 8005d6c:	68a0      	ldr	r0, [r4, #8]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	2109      	movs	r1, #9
 8005d72:	f7ff ff7d 	bl	8005c70 <std>
 8005d76:	68e0      	ldr	r0, [r4, #12]
 8005d78:	2202      	movs	r2, #2
 8005d7a:	2112      	movs	r1, #18
 8005d7c:	f7ff ff78 	bl	8005c70 <std>
 8005d80:	2301      	movs	r3, #1
 8005d82:	61a3      	str	r3, [r4, #24]
 8005d84:	e7d2      	b.n	8005d2c <__sinit+0xc>
 8005d86:	bf00      	nop
 8005d88:	08006ecc 	.word	0x08006ecc
 8005d8c:	08005cb9 	.word	0x08005cb9

08005d90 <__sfp>:
 8005d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d92:	4607      	mov	r7, r0
 8005d94:	f7ff ffac 	bl	8005cf0 <__sfp_lock_acquire>
 8005d98:	4b1e      	ldr	r3, [pc, #120]	; (8005e14 <__sfp+0x84>)
 8005d9a:	681e      	ldr	r6, [r3, #0]
 8005d9c:	69b3      	ldr	r3, [r6, #24]
 8005d9e:	b913      	cbnz	r3, 8005da6 <__sfp+0x16>
 8005da0:	4630      	mov	r0, r6
 8005da2:	f7ff ffbd 	bl	8005d20 <__sinit>
 8005da6:	3648      	adds	r6, #72	; 0x48
 8005da8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	d503      	bpl.n	8005db8 <__sfp+0x28>
 8005db0:	6833      	ldr	r3, [r6, #0]
 8005db2:	b30b      	cbz	r3, 8005df8 <__sfp+0x68>
 8005db4:	6836      	ldr	r6, [r6, #0]
 8005db6:	e7f7      	b.n	8005da8 <__sfp+0x18>
 8005db8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005dbc:	b9d5      	cbnz	r5, 8005df4 <__sfp+0x64>
 8005dbe:	4b16      	ldr	r3, [pc, #88]	; (8005e18 <__sfp+0x88>)
 8005dc0:	60e3      	str	r3, [r4, #12]
 8005dc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005dc6:	6665      	str	r5, [r4, #100]	; 0x64
 8005dc8:	f000 f84c 	bl	8005e64 <__retarget_lock_init_recursive>
 8005dcc:	f7ff ff96 	bl	8005cfc <__sfp_lock_release>
 8005dd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005dd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005dd8:	6025      	str	r5, [r4, #0]
 8005dda:	61a5      	str	r5, [r4, #24]
 8005ddc:	2208      	movs	r2, #8
 8005dde:	4629      	mov	r1, r5
 8005de0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005de4:	f7fe f978 	bl	80040d8 <memset>
 8005de8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005dec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005df0:	4620      	mov	r0, r4
 8005df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005df4:	3468      	adds	r4, #104	; 0x68
 8005df6:	e7d9      	b.n	8005dac <__sfp+0x1c>
 8005df8:	2104      	movs	r1, #4
 8005dfa:	4638      	mov	r0, r7
 8005dfc:	f7ff ff62 	bl	8005cc4 <__sfmoreglue>
 8005e00:	4604      	mov	r4, r0
 8005e02:	6030      	str	r0, [r6, #0]
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d1d5      	bne.n	8005db4 <__sfp+0x24>
 8005e08:	f7ff ff78 	bl	8005cfc <__sfp_lock_release>
 8005e0c:	230c      	movs	r3, #12
 8005e0e:	603b      	str	r3, [r7, #0]
 8005e10:	e7ee      	b.n	8005df0 <__sfp+0x60>
 8005e12:	bf00      	nop
 8005e14:	08006ecc 	.word	0x08006ecc
 8005e18:	ffff0001 	.word	0xffff0001

08005e1c <_fwalk_reent>:
 8005e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e20:	4606      	mov	r6, r0
 8005e22:	4688      	mov	r8, r1
 8005e24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e28:	2700      	movs	r7, #0
 8005e2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e2e:	f1b9 0901 	subs.w	r9, r9, #1
 8005e32:	d505      	bpl.n	8005e40 <_fwalk_reent+0x24>
 8005e34:	6824      	ldr	r4, [r4, #0]
 8005e36:	2c00      	cmp	r4, #0
 8005e38:	d1f7      	bne.n	8005e2a <_fwalk_reent+0xe>
 8005e3a:	4638      	mov	r0, r7
 8005e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e40:	89ab      	ldrh	r3, [r5, #12]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d907      	bls.n	8005e56 <_fwalk_reent+0x3a>
 8005e46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	d003      	beq.n	8005e56 <_fwalk_reent+0x3a>
 8005e4e:	4629      	mov	r1, r5
 8005e50:	4630      	mov	r0, r6
 8005e52:	47c0      	blx	r8
 8005e54:	4307      	orrs	r7, r0
 8005e56:	3568      	adds	r5, #104	; 0x68
 8005e58:	e7e9      	b.n	8005e2e <_fwalk_reent+0x12>
	...

08005e5c <_localeconv_r>:
 8005e5c:	4800      	ldr	r0, [pc, #0]	; (8005e60 <_localeconv_r+0x4>)
 8005e5e:	4770      	bx	lr
 8005e60:	20000160 	.word	0x20000160

08005e64 <__retarget_lock_init_recursive>:
 8005e64:	4770      	bx	lr

08005e66 <__retarget_lock_acquire_recursive>:
 8005e66:	4770      	bx	lr

08005e68 <__retarget_lock_release_recursive>:
 8005e68:	4770      	bx	lr

08005e6a <__swhatbuf_r>:
 8005e6a:	b570      	push	{r4, r5, r6, lr}
 8005e6c:	460e      	mov	r6, r1
 8005e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e72:	2900      	cmp	r1, #0
 8005e74:	b096      	sub	sp, #88	; 0x58
 8005e76:	4614      	mov	r4, r2
 8005e78:	461d      	mov	r5, r3
 8005e7a:	da08      	bge.n	8005e8e <__swhatbuf_r+0x24>
 8005e7c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	602a      	str	r2, [r5, #0]
 8005e84:	061a      	lsls	r2, r3, #24
 8005e86:	d410      	bmi.n	8005eaa <__swhatbuf_r+0x40>
 8005e88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e8c:	e00e      	b.n	8005eac <__swhatbuf_r+0x42>
 8005e8e:	466a      	mov	r2, sp
 8005e90:	f000 fee0 	bl	8006c54 <_fstat_r>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	dbf1      	blt.n	8005e7c <__swhatbuf_r+0x12>
 8005e98:	9a01      	ldr	r2, [sp, #4]
 8005e9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ea2:	425a      	negs	r2, r3
 8005ea4:	415a      	adcs	r2, r3
 8005ea6:	602a      	str	r2, [r5, #0]
 8005ea8:	e7ee      	b.n	8005e88 <__swhatbuf_r+0x1e>
 8005eaa:	2340      	movs	r3, #64	; 0x40
 8005eac:	2000      	movs	r0, #0
 8005eae:	6023      	str	r3, [r4, #0]
 8005eb0:	b016      	add	sp, #88	; 0x58
 8005eb2:	bd70      	pop	{r4, r5, r6, pc}

08005eb4 <__smakebuf_r>:
 8005eb4:	898b      	ldrh	r3, [r1, #12]
 8005eb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005eb8:	079d      	lsls	r5, r3, #30
 8005eba:	4606      	mov	r6, r0
 8005ebc:	460c      	mov	r4, r1
 8005ebe:	d507      	bpl.n	8005ed0 <__smakebuf_r+0x1c>
 8005ec0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	6123      	str	r3, [r4, #16]
 8005ec8:	2301      	movs	r3, #1
 8005eca:	6163      	str	r3, [r4, #20]
 8005ecc:	b002      	add	sp, #8
 8005ece:	bd70      	pop	{r4, r5, r6, pc}
 8005ed0:	ab01      	add	r3, sp, #4
 8005ed2:	466a      	mov	r2, sp
 8005ed4:	f7ff ffc9 	bl	8005e6a <__swhatbuf_r>
 8005ed8:	9900      	ldr	r1, [sp, #0]
 8005eda:	4605      	mov	r5, r0
 8005edc:	4630      	mov	r0, r6
 8005ede:	f000 fc45 	bl	800676c <_malloc_r>
 8005ee2:	b948      	cbnz	r0, 8005ef8 <__smakebuf_r+0x44>
 8005ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ee8:	059a      	lsls	r2, r3, #22
 8005eea:	d4ef      	bmi.n	8005ecc <__smakebuf_r+0x18>
 8005eec:	f023 0303 	bic.w	r3, r3, #3
 8005ef0:	f043 0302 	orr.w	r3, r3, #2
 8005ef4:	81a3      	strh	r3, [r4, #12]
 8005ef6:	e7e3      	b.n	8005ec0 <__smakebuf_r+0xc>
 8005ef8:	4b0d      	ldr	r3, [pc, #52]	; (8005f30 <__smakebuf_r+0x7c>)
 8005efa:	62b3      	str	r3, [r6, #40]	; 0x28
 8005efc:	89a3      	ldrh	r3, [r4, #12]
 8005efe:	6020      	str	r0, [r4, #0]
 8005f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f04:	81a3      	strh	r3, [r4, #12]
 8005f06:	9b00      	ldr	r3, [sp, #0]
 8005f08:	6163      	str	r3, [r4, #20]
 8005f0a:	9b01      	ldr	r3, [sp, #4]
 8005f0c:	6120      	str	r0, [r4, #16]
 8005f0e:	b15b      	cbz	r3, 8005f28 <__smakebuf_r+0x74>
 8005f10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f14:	4630      	mov	r0, r6
 8005f16:	f000 feaf 	bl	8006c78 <_isatty_r>
 8005f1a:	b128      	cbz	r0, 8005f28 <__smakebuf_r+0x74>
 8005f1c:	89a3      	ldrh	r3, [r4, #12]
 8005f1e:	f023 0303 	bic.w	r3, r3, #3
 8005f22:	f043 0301 	orr.w	r3, r3, #1
 8005f26:	81a3      	strh	r3, [r4, #12]
 8005f28:	89a0      	ldrh	r0, [r4, #12]
 8005f2a:	4305      	orrs	r5, r0
 8005f2c:	81a5      	strh	r5, [r4, #12]
 8005f2e:	e7cd      	b.n	8005ecc <__smakebuf_r+0x18>
 8005f30:	08005cb9 	.word	0x08005cb9

08005f34 <malloc>:
 8005f34:	4b02      	ldr	r3, [pc, #8]	; (8005f40 <malloc+0xc>)
 8005f36:	4601      	mov	r1, r0
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	f000 bc17 	b.w	800676c <_malloc_r>
 8005f3e:	bf00      	nop
 8005f40:	2000000c 	.word	0x2000000c

08005f44 <memcpy>:
 8005f44:	440a      	add	r2, r1
 8005f46:	4291      	cmp	r1, r2
 8005f48:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f4c:	d100      	bne.n	8005f50 <memcpy+0xc>
 8005f4e:	4770      	bx	lr
 8005f50:	b510      	push	{r4, lr}
 8005f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f5a:	4291      	cmp	r1, r2
 8005f5c:	d1f9      	bne.n	8005f52 <memcpy+0xe>
 8005f5e:	bd10      	pop	{r4, pc}

08005f60 <_Balloc>:
 8005f60:	b570      	push	{r4, r5, r6, lr}
 8005f62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f64:	4604      	mov	r4, r0
 8005f66:	460d      	mov	r5, r1
 8005f68:	b976      	cbnz	r6, 8005f88 <_Balloc+0x28>
 8005f6a:	2010      	movs	r0, #16
 8005f6c:	f7ff ffe2 	bl	8005f34 <malloc>
 8005f70:	4602      	mov	r2, r0
 8005f72:	6260      	str	r0, [r4, #36]	; 0x24
 8005f74:	b920      	cbnz	r0, 8005f80 <_Balloc+0x20>
 8005f76:	4b18      	ldr	r3, [pc, #96]	; (8005fd8 <_Balloc+0x78>)
 8005f78:	4818      	ldr	r0, [pc, #96]	; (8005fdc <_Balloc+0x7c>)
 8005f7a:	2166      	movs	r1, #102	; 0x66
 8005f7c:	f000 fe2a 	bl	8006bd4 <__assert_func>
 8005f80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f84:	6006      	str	r6, [r0, #0]
 8005f86:	60c6      	str	r6, [r0, #12]
 8005f88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005f8a:	68f3      	ldr	r3, [r6, #12]
 8005f8c:	b183      	cbz	r3, 8005fb0 <_Balloc+0x50>
 8005f8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f96:	b9b8      	cbnz	r0, 8005fc8 <_Balloc+0x68>
 8005f98:	2101      	movs	r1, #1
 8005f9a:	fa01 f605 	lsl.w	r6, r1, r5
 8005f9e:	1d72      	adds	r2, r6, #5
 8005fa0:	0092      	lsls	r2, r2, #2
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f000 fb60 	bl	8006668 <_calloc_r>
 8005fa8:	b160      	cbz	r0, 8005fc4 <_Balloc+0x64>
 8005faa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005fae:	e00e      	b.n	8005fce <_Balloc+0x6e>
 8005fb0:	2221      	movs	r2, #33	; 0x21
 8005fb2:	2104      	movs	r1, #4
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f000 fb57 	bl	8006668 <_calloc_r>
 8005fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fbc:	60f0      	str	r0, [r6, #12]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e4      	bne.n	8005f8e <_Balloc+0x2e>
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	bd70      	pop	{r4, r5, r6, pc}
 8005fc8:	6802      	ldr	r2, [r0, #0]
 8005fca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005fd4:	e7f7      	b.n	8005fc6 <_Balloc+0x66>
 8005fd6:	bf00      	nop
 8005fd8:	08006f11 	.word	0x08006f11
 8005fdc:	08006ff4 	.word	0x08006ff4

08005fe0 <_Bfree>:
 8005fe0:	b570      	push	{r4, r5, r6, lr}
 8005fe2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005fe4:	4605      	mov	r5, r0
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	b976      	cbnz	r6, 8006008 <_Bfree+0x28>
 8005fea:	2010      	movs	r0, #16
 8005fec:	f7ff ffa2 	bl	8005f34 <malloc>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	6268      	str	r0, [r5, #36]	; 0x24
 8005ff4:	b920      	cbnz	r0, 8006000 <_Bfree+0x20>
 8005ff6:	4b09      	ldr	r3, [pc, #36]	; (800601c <_Bfree+0x3c>)
 8005ff8:	4809      	ldr	r0, [pc, #36]	; (8006020 <_Bfree+0x40>)
 8005ffa:	218a      	movs	r1, #138	; 0x8a
 8005ffc:	f000 fdea 	bl	8006bd4 <__assert_func>
 8006000:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006004:	6006      	str	r6, [r0, #0]
 8006006:	60c6      	str	r6, [r0, #12]
 8006008:	b13c      	cbz	r4, 800601a <_Bfree+0x3a>
 800600a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800600c:	6862      	ldr	r2, [r4, #4]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006014:	6021      	str	r1, [r4, #0]
 8006016:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800601a:	bd70      	pop	{r4, r5, r6, pc}
 800601c:	08006f11 	.word	0x08006f11
 8006020:	08006ff4 	.word	0x08006ff4

08006024 <__multadd>:
 8006024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006028:	690d      	ldr	r5, [r1, #16]
 800602a:	4607      	mov	r7, r0
 800602c:	460c      	mov	r4, r1
 800602e:	461e      	mov	r6, r3
 8006030:	f101 0c14 	add.w	ip, r1, #20
 8006034:	2000      	movs	r0, #0
 8006036:	f8dc 3000 	ldr.w	r3, [ip]
 800603a:	b299      	uxth	r1, r3
 800603c:	fb02 6101 	mla	r1, r2, r1, r6
 8006040:	0c1e      	lsrs	r6, r3, #16
 8006042:	0c0b      	lsrs	r3, r1, #16
 8006044:	fb02 3306 	mla	r3, r2, r6, r3
 8006048:	b289      	uxth	r1, r1
 800604a:	3001      	adds	r0, #1
 800604c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006050:	4285      	cmp	r5, r0
 8006052:	f84c 1b04 	str.w	r1, [ip], #4
 8006056:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800605a:	dcec      	bgt.n	8006036 <__multadd+0x12>
 800605c:	b30e      	cbz	r6, 80060a2 <__multadd+0x7e>
 800605e:	68a3      	ldr	r3, [r4, #8]
 8006060:	42ab      	cmp	r3, r5
 8006062:	dc19      	bgt.n	8006098 <__multadd+0x74>
 8006064:	6861      	ldr	r1, [r4, #4]
 8006066:	4638      	mov	r0, r7
 8006068:	3101      	adds	r1, #1
 800606a:	f7ff ff79 	bl	8005f60 <_Balloc>
 800606e:	4680      	mov	r8, r0
 8006070:	b928      	cbnz	r0, 800607e <__multadd+0x5a>
 8006072:	4602      	mov	r2, r0
 8006074:	4b0c      	ldr	r3, [pc, #48]	; (80060a8 <__multadd+0x84>)
 8006076:	480d      	ldr	r0, [pc, #52]	; (80060ac <__multadd+0x88>)
 8006078:	21b5      	movs	r1, #181	; 0xb5
 800607a:	f000 fdab 	bl	8006bd4 <__assert_func>
 800607e:	6922      	ldr	r2, [r4, #16]
 8006080:	3202      	adds	r2, #2
 8006082:	f104 010c 	add.w	r1, r4, #12
 8006086:	0092      	lsls	r2, r2, #2
 8006088:	300c      	adds	r0, #12
 800608a:	f7ff ff5b 	bl	8005f44 <memcpy>
 800608e:	4621      	mov	r1, r4
 8006090:	4638      	mov	r0, r7
 8006092:	f7ff ffa5 	bl	8005fe0 <_Bfree>
 8006096:	4644      	mov	r4, r8
 8006098:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800609c:	3501      	adds	r5, #1
 800609e:	615e      	str	r6, [r3, #20]
 80060a0:	6125      	str	r5, [r4, #16]
 80060a2:	4620      	mov	r0, r4
 80060a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060a8:	08006f83 	.word	0x08006f83
 80060ac:	08006ff4 	.word	0x08006ff4

080060b0 <__hi0bits>:
 80060b0:	0c03      	lsrs	r3, r0, #16
 80060b2:	041b      	lsls	r3, r3, #16
 80060b4:	b9d3      	cbnz	r3, 80060ec <__hi0bits+0x3c>
 80060b6:	0400      	lsls	r0, r0, #16
 80060b8:	2310      	movs	r3, #16
 80060ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80060be:	bf04      	itt	eq
 80060c0:	0200      	lsleq	r0, r0, #8
 80060c2:	3308      	addeq	r3, #8
 80060c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80060c8:	bf04      	itt	eq
 80060ca:	0100      	lsleq	r0, r0, #4
 80060cc:	3304      	addeq	r3, #4
 80060ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80060d2:	bf04      	itt	eq
 80060d4:	0080      	lsleq	r0, r0, #2
 80060d6:	3302      	addeq	r3, #2
 80060d8:	2800      	cmp	r0, #0
 80060da:	db05      	blt.n	80060e8 <__hi0bits+0x38>
 80060dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80060e0:	f103 0301 	add.w	r3, r3, #1
 80060e4:	bf08      	it	eq
 80060e6:	2320      	moveq	r3, #32
 80060e8:	4618      	mov	r0, r3
 80060ea:	4770      	bx	lr
 80060ec:	2300      	movs	r3, #0
 80060ee:	e7e4      	b.n	80060ba <__hi0bits+0xa>

080060f0 <__lo0bits>:
 80060f0:	6803      	ldr	r3, [r0, #0]
 80060f2:	f013 0207 	ands.w	r2, r3, #7
 80060f6:	4601      	mov	r1, r0
 80060f8:	d00b      	beq.n	8006112 <__lo0bits+0x22>
 80060fa:	07da      	lsls	r2, r3, #31
 80060fc:	d423      	bmi.n	8006146 <__lo0bits+0x56>
 80060fe:	0798      	lsls	r0, r3, #30
 8006100:	bf49      	itett	mi
 8006102:	085b      	lsrmi	r3, r3, #1
 8006104:	089b      	lsrpl	r3, r3, #2
 8006106:	2001      	movmi	r0, #1
 8006108:	600b      	strmi	r3, [r1, #0]
 800610a:	bf5c      	itt	pl
 800610c:	600b      	strpl	r3, [r1, #0]
 800610e:	2002      	movpl	r0, #2
 8006110:	4770      	bx	lr
 8006112:	b298      	uxth	r0, r3
 8006114:	b9a8      	cbnz	r0, 8006142 <__lo0bits+0x52>
 8006116:	0c1b      	lsrs	r3, r3, #16
 8006118:	2010      	movs	r0, #16
 800611a:	b2da      	uxtb	r2, r3
 800611c:	b90a      	cbnz	r2, 8006122 <__lo0bits+0x32>
 800611e:	3008      	adds	r0, #8
 8006120:	0a1b      	lsrs	r3, r3, #8
 8006122:	071a      	lsls	r2, r3, #28
 8006124:	bf04      	itt	eq
 8006126:	091b      	lsreq	r3, r3, #4
 8006128:	3004      	addeq	r0, #4
 800612a:	079a      	lsls	r2, r3, #30
 800612c:	bf04      	itt	eq
 800612e:	089b      	lsreq	r3, r3, #2
 8006130:	3002      	addeq	r0, #2
 8006132:	07da      	lsls	r2, r3, #31
 8006134:	d403      	bmi.n	800613e <__lo0bits+0x4e>
 8006136:	085b      	lsrs	r3, r3, #1
 8006138:	f100 0001 	add.w	r0, r0, #1
 800613c:	d005      	beq.n	800614a <__lo0bits+0x5a>
 800613e:	600b      	str	r3, [r1, #0]
 8006140:	4770      	bx	lr
 8006142:	4610      	mov	r0, r2
 8006144:	e7e9      	b.n	800611a <__lo0bits+0x2a>
 8006146:	2000      	movs	r0, #0
 8006148:	4770      	bx	lr
 800614a:	2020      	movs	r0, #32
 800614c:	4770      	bx	lr
	...

08006150 <__i2b>:
 8006150:	b510      	push	{r4, lr}
 8006152:	460c      	mov	r4, r1
 8006154:	2101      	movs	r1, #1
 8006156:	f7ff ff03 	bl	8005f60 <_Balloc>
 800615a:	4602      	mov	r2, r0
 800615c:	b928      	cbnz	r0, 800616a <__i2b+0x1a>
 800615e:	4b05      	ldr	r3, [pc, #20]	; (8006174 <__i2b+0x24>)
 8006160:	4805      	ldr	r0, [pc, #20]	; (8006178 <__i2b+0x28>)
 8006162:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006166:	f000 fd35 	bl	8006bd4 <__assert_func>
 800616a:	2301      	movs	r3, #1
 800616c:	6144      	str	r4, [r0, #20]
 800616e:	6103      	str	r3, [r0, #16]
 8006170:	bd10      	pop	{r4, pc}
 8006172:	bf00      	nop
 8006174:	08006f83 	.word	0x08006f83
 8006178:	08006ff4 	.word	0x08006ff4

0800617c <__multiply>:
 800617c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006180:	4691      	mov	r9, r2
 8006182:	690a      	ldr	r2, [r1, #16]
 8006184:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006188:	429a      	cmp	r2, r3
 800618a:	bfb8      	it	lt
 800618c:	460b      	movlt	r3, r1
 800618e:	460c      	mov	r4, r1
 8006190:	bfbc      	itt	lt
 8006192:	464c      	movlt	r4, r9
 8006194:	4699      	movlt	r9, r3
 8006196:	6927      	ldr	r7, [r4, #16]
 8006198:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800619c:	68a3      	ldr	r3, [r4, #8]
 800619e:	6861      	ldr	r1, [r4, #4]
 80061a0:	eb07 060a 	add.w	r6, r7, sl
 80061a4:	42b3      	cmp	r3, r6
 80061a6:	b085      	sub	sp, #20
 80061a8:	bfb8      	it	lt
 80061aa:	3101      	addlt	r1, #1
 80061ac:	f7ff fed8 	bl	8005f60 <_Balloc>
 80061b0:	b930      	cbnz	r0, 80061c0 <__multiply+0x44>
 80061b2:	4602      	mov	r2, r0
 80061b4:	4b44      	ldr	r3, [pc, #272]	; (80062c8 <__multiply+0x14c>)
 80061b6:	4845      	ldr	r0, [pc, #276]	; (80062cc <__multiply+0x150>)
 80061b8:	f240 115d 	movw	r1, #349	; 0x15d
 80061bc:	f000 fd0a 	bl	8006bd4 <__assert_func>
 80061c0:	f100 0514 	add.w	r5, r0, #20
 80061c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80061c8:	462b      	mov	r3, r5
 80061ca:	2200      	movs	r2, #0
 80061cc:	4543      	cmp	r3, r8
 80061ce:	d321      	bcc.n	8006214 <__multiply+0x98>
 80061d0:	f104 0314 	add.w	r3, r4, #20
 80061d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80061d8:	f109 0314 	add.w	r3, r9, #20
 80061dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80061e0:	9202      	str	r2, [sp, #8]
 80061e2:	1b3a      	subs	r2, r7, r4
 80061e4:	3a15      	subs	r2, #21
 80061e6:	f022 0203 	bic.w	r2, r2, #3
 80061ea:	3204      	adds	r2, #4
 80061ec:	f104 0115 	add.w	r1, r4, #21
 80061f0:	428f      	cmp	r7, r1
 80061f2:	bf38      	it	cc
 80061f4:	2204      	movcc	r2, #4
 80061f6:	9201      	str	r2, [sp, #4]
 80061f8:	9a02      	ldr	r2, [sp, #8]
 80061fa:	9303      	str	r3, [sp, #12]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d80c      	bhi.n	800621a <__multiply+0x9e>
 8006200:	2e00      	cmp	r6, #0
 8006202:	dd03      	ble.n	800620c <__multiply+0x90>
 8006204:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006208:	2b00      	cmp	r3, #0
 800620a:	d05a      	beq.n	80062c2 <__multiply+0x146>
 800620c:	6106      	str	r6, [r0, #16]
 800620e:	b005      	add	sp, #20
 8006210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006214:	f843 2b04 	str.w	r2, [r3], #4
 8006218:	e7d8      	b.n	80061cc <__multiply+0x50>
 800621a:	f8b3 a000 	ldrh.w	sl, [r3]
 800621e:	f1ba 0f00 	cmp.w	sl, #0
 8006222:	d024      	beq.n	800626e <__multiply+0xf2>
 8006224:	f104 0e14 	add.w	lr, r4, #20
 8006228:	46a9      	mov	r9, r5
 800622a:	f04f 0c00 	mov.w	ip, #0
 800622e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006232:	f8d9 1000 	ldr.w	r1, [r9]
 8006236:	fa1f fb82 	uxth.w	fp, r2
 800623a:	b289      	uxth	r1, r1
 800623c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006240:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006244:	f8d9 2000 	ldr.w	r2, [r9]
 8006248:	4461      	add	r1, ip
 800624a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800624e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006252:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006256:	b289      	uxth	r1, r1
 8006258:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800625c:	4577      	cmp	r7, lr
 800625e:	f849 1b04 	str.w	r1, [r9], #4
 8006262:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006266:	d8e2      	bhi.n	800622e <__multiply+0xb2>
 8006268:	9a01      	ldr	r2, [sp, #4]
 800626a:	f845 c002 	str.w	ip, [r5, r2]
 800626e:	9a03      	ldr	r2, [sp, #12]
 8006270:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006274:	3304      	adds	r3, #4
 8006276:	f1b9 0f00 	cmp.w	r9, #0
 800627a:	d020      	beq.n	80062be <__multiply+0x142>
 800627c:	6829      	ldr	r1, [r5, #0]
 800627e:	f104 0c14 	add.w	ip, r4, #20
 8006282:	46ae      	mov	lr, r5
 8006284:	f04f 0a00 	mov.w	sl, #0
 8006288:	f8bc b000 	ldrh.w	fp, [ip]
 800628c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006290:	fb09 220b 	mla	r2, r9, fp, r2
 8006294:	4492      	add	sl, r2
 8006296:	b289      	uxth	r1, r1
 8006298:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800629c:	f84e 1b04 	str.w	r1, [lr], #4
 80062a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80062a4:	f8be 1000 	ldrh.w	r1, [lr]
 80062a8:	0c12      	lsrs	r2, r2, #16
 80062aa:	fb09 1102 	mla	r1, r9, r2, r1
 80062ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80062b2:	4567      	cmp	r7, ip
 80062b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80062b8:	d8e6      	bhi.n	8006288 <__multiply+0x10c>
 80062ba:	9a01      	ldr	r2, [sp, #4]
 80062bc:	50a9      	str	r1, [r5, r2]
 80062be:	3504      	adds	r5, #4
 80062c0:	e79a      	b.n	80061f8 <__multiply+0x7c>
 80062c2:	3e01      	subs	r6, #1
 80062c4:	e79c      	b.n	8006200 <__multiply+0x84>
 80062c6:	bf00      	nop
 80062c8:	08006f83 	.word	0x08006f83
 80062cc:	08006ff4 	.word	0x08006ff4

080062d0 <__pow5mult>:
 80062d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062d4:	4615      	mov	r5, r2
 80062d6:	f012 0203 	ands.w	r2, r2, #3
 80062da:	4606      	mov	r6, r0
 80062dc:	460f      	mov	r7, r1
 80062de:	d007      	beq.n	80062f0 <__pow5mult+0x20>
 80062e0:	4c25      	ldr	r4, [pc, #148]	; (8006378 <__pow5mult+0xa8>)
 80062e2:	3a01      	subs	r2, #1
 80062e4:	2300      	movs	r3, #0
 80062e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062ea:	f7ff fe9b 	bl	8006024 <__multadd>
 80062ee:	4607      	mov	r7, r0
 80062f0:	10ad      	asrs	r5, r5, #2
 80062f2:	d03d      	beq.n	8006370 <__pow5mult+0xa0>
 80062f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80062f6:	b97c      	cbnz	r4, 8006318 <__pow5mult+0x48>
 80062f8:	2010      	movs	r0, #16
 80062fa:	f7ff fe1b 	bl	8005f34 <malloc>
 80062fe:	4602      	mov	r2, r0
 8006300:	6270      	str	r0, [r6, #36]	; 0x24
 8006302:	b928      	cbnz	r0, 8006310 <__pow5mult+0x40>
 8006304:	4b1d      	ldr	r3, [pc, #116]	; (800637c <__pow5mult+0xac>)
 8006306:	481e      	ldr	r0, [pc, #120]	; (8006380 <__pow5mult+0xb0>)
 8006308:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800630c:	f000 fc62 	bl	8006bd4 <__assert_func>
 8006310:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006314:	6004      	str	r4, [r0, #0]
 8006316:	60c4      	str	r4, [r0, #12]
 8006318:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800631c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006320:	b94c      	cbnz	r4, 8006336 <__pow5mult+0x66>
 8006322:	f240 2171 	movw	r1, #625	; 0x271
 8006326:	4630      	mov	r0, r6
 8006328:	f7ff ff12 	bl	8006150 <__i2b>
 800632c:	2300      	movs	r3, #0
 800632e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006332:	4604      	mov	r4, r0
 8006334:	6003      	str	r3, [r0, #0]
 8006336:	f04f 0900 	mov.w	r9, #0
 800633a:	07eb      	lsls	r3, r5, #31
 800633c:	d50a      	bpl.n	8006354 <__pow5mult+0x84>
 800633e:	4639      	mov	r1, r7
 8006340:	4622      	mov	r2, r4
 8006342:	4630      	mov	r0, r6
 8006344:	f7ff ff1a 	bl	800617c <__multiply>
 8006348:	4639      	mov	r1, r7
 800634a:	4680      	mov	r8, r0
 800634c:	4630      	mov	r0, r6
 800634e:	f7ff fe47 	bl	8005fe0 <_Bfree>
 8006352:	4647      	mov	r7, r8
 8006354:	106d      	asrs	r5, r5, #1
 8006356:	d00b      	beq.n	8006370 <__pow5mult+0xa0>
 8006358:	6820      	ldr	r0, [r4, #0]
 800635a:	b938      	cbnz	r0, 800636c <__pow5mult+0x9c>
 800635c:	4622      	mov	r2, r4
 800635e:	4621      	mov	r1, r4
 8006360:	4630      	mov	r0, r6
 8006362:	f7ff ff0b 	bl	800617c <__multiply>
 8006366:	6020      	str	r0, [r4, #0]
 8006368:	f8c0 9000 	str.w	r9, [r0]
 800636c:	4604      	mov	r4, r0
 800636e:	e7e4      	b.n	800633a <__pow5mult+0x6a>
 8006370:	4638      	mov	r0, r7
 8006372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006376:	bf00      	nop
 8006378:	08007140 	.word	0x08007140
 800637c:	08006f11 	.word	0x08006f11
 8006380:	08006ff4 	.word	0x08006ff4

08006384 <__lshift>:
 8006384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006388:	460c      	mov	r4, r1
 800638a:	6849      	ldr	r1, [r1, #4]
 800638c:	6923      	ldr	r3, [r4, #16]
 800638e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006392:	68a3      	ldr	r3, [r4, #8]
 8006394:	4607      	mov	r7, r0
 8006396:	4691      	mov	r9, r2
 8006398:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800639c:	f108 0601 	add.w	r6, r8, #1
 80063a0:	42b3      	cmp	r3, r6
 80063a2:	db0b      	blt.n	80063bc <__lshift+0x38>
 80063a4:	4638      	mov	r0, r7
 80063a6:	f7ff fddb 	bl	8005f60 <_Balloc>
 80063aa:	4605      	mov	r5, r0
 80063ac:	b948      	cbnz	r0, 80063c2 <__lshift+0x3e>
 80063ae:	4602      	mov	r2, r0
 80063b0:	4b2a      	ldr	r3, [pc, #168]	; (800645c <__lshift+0xd8>)
 80063b2:	482b      	ldr	r0, [pc, #172]	; (8006460 <__lshift+0xdc>)
 80063b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80063b8:	f000 fc0c 	bl	8006bd4 <__assert_func>
 80063bc:	3101      	adds	r1, #1
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	e7ee      	b.n	80063a0 <__lshift+0x1c>
 80063c2:	2300      	movs	r3, #0
 80063c4:	f100 0114 	add.w	r1, r0, #20
 80063c8:	f100 0210 	add.w	r2, r0, #16
 80063cc:	4618      	mov	r0, r3
 80063ce:	4553      	cmp	r3, sl
 80063d0:	db37      	blt.n	8006442 <__lshift+0xbe>
 80063d2:	6920      	ldr	r0, [r4, #16]
 80063d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80063d8:	f104 0314 	add.w	r3, r4, #20
 80063dc:	f019 091f 	ands.w	r9, r9, #31
 80063e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80063e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80063e8:	d02f      	beq.n	800644a <__lshift+0xc6>
 80063ea:	f1c9 0e20 	rsb	lr, r9, #32
 80063ee:	468a      	mov	sl, r1
 80063f0:	f04f 0c00 	mov.w	ip, #0
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	fa02 f209 	lsl.w	r2, r2, r9
 80063fa:	ea42 020c 	orr.w	r2, r2, ip
 80063fe:	f84a 2b04 	str.w	r2, [sl], #4
 8006402:	f853 2b04 	ldr.w	r2, [r3], #4
 8006406:	4298      	cmp	r0, r3
 8006408:	fa22 fc0e 	lsr.w	ip, r2, lr
 800640c:	d8f2      	bhi.n	80063f4 <__lshift+0x70>
 800640e:	1b03      	subs	r3, r0, r4
 8006410:	3b15      	subs	r3, #21
 8006412:	f023 0303 	bic.w	r3, r3, #3
 8006416:	3304      	adds	r3, #4
 8006418:	f104 0215 	add.w	r2, r4, #21
 800641c:	4290      	cmp	r0, r2
 800641e:	bf38      	it	cc
 8006420:	2304      	movcc	r3, #4
 8006422:	f841 c003 	str.w	ip, [r1, r3]
 8006426:	f1bc 0f00 	cmp.w	ip, #0
 800642a:	d001      	beq.n	8006430 <__lshift+0xac>
 800642c:	f108 0602 	add.w	r6, r8, #2
 8006430:	3e01      	subs	r6, #1
 8006432:	4638      	mov	r0, r7
 8006434:	612e      	str	r6, [r5, #16]
 8006436:	4621      	mov	r1, r4
 8006438:	f7ff fdd2 	bl	8005fe0 <_Bfree>
 800643c:	4628      	mov	r0, r5
 800643e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006442:	f842 0f04 	str.w	r0, [r2, #4]!
 8006446:	3301      	adds	r3, #1
 8006448:	e7c1      	b.n	80063ce <__lshift+0x4a>
 800644a:	3904      	subs	r1, #4
 800644c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006450:	f841 2f04 	str.w	r2, [r1, #4]!
 8006454:	4298      	cmp	r0, r3
 8006456:	d8f9      	bhi.n	800644c <__lshift+0xc8>
 8006458:	e7ea      	b.n	8006430 <__lshift+0xac>
 800645a:	bf00      	nop
 800645c:	08006f83 	.word	0x08006f83
 8006460:	08006ff4 	.word	0x08006ff4

08006464 <__mcmp>:
 8006464:	b530      	push	{r4, r5, lr}
 8006466:	6902      	ldr	r2, [r0, #16]
 8006468:	690c      	ldr	r4, [r1, #16]
 800646a:	1b12      	subs	r2, r2, r4
 800646c:	d10e      	bne.n	800648c <__mcmp+0x28>
 800646e:	f100 0314 	add.w	r3, r0, #20
 8006472:	3114      	adds	r1, #20
 8006474:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006478:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800647c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006480:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006484:	42a5      	cmp	r5, r4
 8006486:	d003      	beq.n	8006490 <__mcmp+0x2c>
 8006488:	d305      	bcc.n	8006496 <__mcmp+0x32>
 800648a:	2201      	movs	r2, #1
 800648c:	4610      	mov	r0, r2
 800648e:	bd30      	pop	{r4, r5, pc}
 8006490:	4283      	cmp	r3, r0
 8006492:	d3f3      	bcc.n	800647c <__mcmp+0x18>
 8006494:	e7fa      	b.n	800648c <__mcmp+0x28>
 8006496:	f04f 32ff 	mov.w	r2, #4294967295
 800649a:	e7f7      	b.n	800648c <__mcmp+0x28>

0800649c <__mdiff>:
 800649c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a0:	460c      	mov	r4, r1
 80064a2:	4606      	mov	r6, r0
 80064a4:	4611      	mov	r1, r2
 80064a6:	4620      	mov	r0, r4
 80064a8:	4690      	mov	r8, r2
 80064aa:	f7ff ffdb 	bl	8006464 <__mcmp>
 80064ae:	1e05      	subs	r5, r0, #0
 80064b0:	d110      	bne.n	80064d4 <__mdiff+0x38>
 80064b2:	4629      	mov	r1, r5
 80064b4:	4630      	mov	r0, r6
 80064b6:	f7ff fd53 	bl	8005f60 <_Balloc>
 80064ba:	b930      	cbnz	r0, 80064ca <__mdiff+0x2e>
 80064bc:	4b3a      	ldr	r3, [pc, #232]	; (80065a8 <__mdiff+0x10c>)
 80064be:	4602      	mov	r2, r0
 80064c0:	f240 2132 	movw	r1, #562	; 0x232
 80064c4:	4839      	ldr	r0, [pc, #228]	; (80065ac <__mdiff+0x110>)
 80064c6:	f000 fb85 	bl	8006bd4 <__assert_func>
 80064ca:	2301      	movs	r3, #1
 80064cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80064d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d4:	bfa4      	itt	ge
 80064d6:	4643      	movge	r3, r8
 80064d8:	46a0      	movge	r8, r4
 80064da:	4630      	mov	r0, r6
 80064dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80064e0:	bfa6      	itte	ge
 80064e2:	461c      	movge	r4, r3
 80064e4:	2500      	movge	r5, #0
 80064e6:	2501      	movlt	r5, #1
 80064e8:	f7ff fd3a 	bl	8005f60 <_Balloc>
 80064ec:	b920      	cbnz	r0, 80064f8 <__mdiff+0x5c>
 80064ee:	4b2e      	ldr	r3, [pc, #184]	; (80065a8 <__mdiff+0x10c>)
 80064f0:	4602      	mov	r2, r0
 80064f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80064f6:	e7e5      	b.n	80064c4 <__mdiff+0x28>
 80064f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80064fc:	6926      	ldr	r6, [r4, #16]
 80064fe:	60c5      	str	r5, [r0, #12]
 8006500:	f104 0914 	add.w	r9, r4, #20
 8006504:	f108 0514 	add.w	r5, r8, #20
 8006508:	f100 0e14 	add.w	lr, r0, #20
 800650c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006510:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006514:	f108 0210 	add.w	r2, r8, #16
 8006518:	46f2      	mov	sl, lr
 800651a:	2100      	movs	r1, #0
 800651c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006520:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006524:	fa1f f883 	uxth.w	r8, r3
 8006528:	fa11 f18b 	uxtah	r1, r1, fp
 800652c:	0c1b      	lsrs	r3, r3, #16
 800652e:	eba1 0808 	sub.w	r8, r1, r8
 8006532:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006536:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800653a:	fa1f f888 	uxth.w	r8, r8
 800653e:	1419      	asrs	r1, r3, #16
 8006540:	454e      	cmp	r6, r9
 8006542:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006546:	f84a 3b04 	str.w	r3, [sl], #4
 800654a:	d8e7      	bhi.n	800651c <__mdiff+0x80>
 800654c:	1b33      	subs	r3, r6, r4
 800654e:	3b15      	subs	r3, #21
 8006550:	f023 0303 	bic.w	r3, r3, #3
 8006554:	3304      	adds	r3, #4
 8006556:	3415      	adds	r4, #21
 8006558:	42a6      	cmp	r6, r4
 800655a:	bf38      	it	cc
 800655c:	2304      	movcc	r3, #4
 800655e:	441d      	add	r5, r3
 8006560:	4473      	add	r3, lr
 8006562:	469e      	mov	lr, r3
 8006564:	462e      	mov	r6, r5
 8006566:	4566      	cmp	r6, ip
 8006568:	d30e      	bcc.n	8006588 <__mdiff+0xec>
 800656a:	f10c 0203 	add.w	r2, ip, #3
 800656e:	1b52      	subs	r2, r2, r5
 8006570:	f022 0203 	bic.w	r2, r2, #3
 8006574:	3d03      	subs	r5, #3
 8006576:	45ac      	cmp	ip, r5
 8006578:	bf38      	it	cc
 800657a:	2200      	movcc	r2, #0
 800657c:	441a      	add	r2, r3
 800657e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006582:	b17b      	cbz	r3, 80065a4 <__mdiff+0x108>
 8006584:	6107      	str	r7, [r0, #16]
 8006586:	e7a3      	b.n	80064d0 <__mdiff+0x34>
 8006588:	f856 8b04 	ldr.w	r8, [r6], #4
 800658c:	fa11 f288 	uxtah	r2, r1, r8
 8006590:	1414      	asrs	r4, r2, #16
 8006592:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006596:	b292      	uxth	r2, r2
 8006598:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800659c:	f84e 2b04 	str.w	r2, [lr], #4
 80065a0:	1421      	asrs	r1, r4, #16
 80065a2:	e7e0      	b.n	8006566 <__mdiff+0xca>
 80065a4:	3f01      	subs	r7, #1
 80065a6:	e7ea      	b.n	800657e <__mdiff+0xe2>
 80065a8:	08006f83 	.word	0x08006f83
 80065ac:	08006ff4 	.word	0x08006ff4

080065b0 <__d2b>:
 80065b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80065b4:	4689      	mov	r9, r1
 80065b6:	2101      	movs	r1, #1
 80065b8:	ec57 6b10 	vmov	r6, r7, d0
 80065bc:	4690      	mov	r8, r2
 80065be:	f7ff fccf 	bl	8005f60 <_Balloc>
 80065c2:	4604      	mov	r4, r0
 80065c4:	b930      	cbnz	r0, 80065d4 <__d2b+0x24>
 80065c6:	4602      	mov	r2, r0
 80065c8:	4b25      	ldr	r3, [pc, #148]	; (8006660 <__d2b+0xb0>)
 80065ca:	4826      	ldr	r0, [pc, #152]	; (8006664 <__d2b+0xb4>)
 80065cc:	f240 310a 	movw	r1, #778	; 0x30a
 80065d0:	f000 fb00 	bl	8006bd4 <__assert_func>
 80065d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80065d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80065dc:	bb35      	cbnz	r5, 800662c <__d2b+0x7c>
 80065de:	2e00      	cmp	r6, #0
 80065e0:	9301      	str	r3, [sp, #4]
 80065e2:	d028      	beq.n	8006636 <__d2b+0x86>
 80065e4:	4668      	mov	r0, sp
 80065e6:	9600      	str	r6, [sp, #0]
 80065e8:	f7ff fd82 	bl	80060f0 <__lo0bits>
 80065ec:	9900      	ldr	r1, [sp, #0]
 80065ee:	b300      	cbz	r0, 8006632 <__d2b+0x82>
 80065f0:	9a01      	ldr	r2, [sp, #4]
 80065f2:	f1c0 0320 	rsb	r3, r0, #32
 80065f6:	fa02 f303 	lsl.w	r3, r2, r3
 80065fa:	430b      	orrs	r3, r1
 80065fc:	40c2      	lsrs	r2, r0
 80065fe:	6163      	str	r3, [r4, #20]
 8006600:	9201      	str	r2, [sp, #4]
 8006602:	9b01      	ldr	r3, [sp, #4]
 8006604:	61a3      	str	r3, [r4, #24]
 8006606:	2b00      	cmp	r3, #0
 8006608:	bf14      	ite	ne
 800660a:	2202      	movne	r2, #2
 800660c:	2201      	moveq	r2, #1
 800660e:	6122      	str	r2, [r4, #16]
 8006610:	b1d5      	cbz	r5, 8006648 <__d2b+0x98>
 8006612:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006616:	4405      	add	r5, r0
 8006618:	f8c9 5000 	str.w	r5, [r9]
 800661c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006620:	f8c8 0000 	str.w	r0, [r8]
 8006624:	4620      	mov	r0, r4
 8006626:	b003      	add	sp, #12
 8006628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800662c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006630:	e7d5      	b.n	80065de <__d2b+0x2e>
 8006632:	6161      	str	r1, [r4, #20]
 8006634:	e7e5      	b.n	8006602 <__d2b+0x52>
 8006636:	a801      	add	r0, sp, #4
 8006638:	f7ff fd5a 	bl	80060f0 <__lo0bits>
 800663c:	9b01      	ldr	r3, [sp, #4]
 800663e:	6163      	str	r3, [r4, #20]
 8006640:	2201      	movs	r2, #1
 8006642:	6122      	str	r2, [r4, #16]
 8006644:	3020      	adds	r0, #32
 8006646:	e7e3      	b.n	8006610 <__d2b+0x60>
 8006648:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800664c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006650:	f8c9 0000 	str.w	r0, [r9]
 8006654:	6918      	ldr	r0, [r3, #16]
 8006656:	f7ff fd2b 	bl	80060b0 <__hi0bits>
 800665a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800665e:	e7df      	b.n	8006620 <__d2b+0x70>
 8006660:	08006f83 	.word	0x08006f83
 8006664:	08006ff4 	.word	0x08006ff4

08006668 <_calloc_r>:
 8006668:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800666a:	fba1 2402 	umull	r2, r4, r1, r2
 800666e:	b94c      	cbnz	r4, 8006684 <_calloc_r+0x1c>
 8006670:	4611      	mov	r1, r2
 8006672:	9201      	str	r2, [sp, #4]
 8006674:	f000 f87a 	bl	800676c <_malloc_r>
 8006678:	9a01      	ldr	r2, [sp, #4]
 800667a:	4605      	mov	r5, r0
 800667c:	b930      	cbnz	r0, 800668c <_calloc_r+0x24>
 800667e:	4628      	mov	r0, r5
 8006680:	b003      	add	sp, #12
 8006682:	bd30      	pop	{r4, r5, pc}
 8006684:	220c      	movs	r2, #12
 8006686:	6002      	str	r2, [r0, #0]
 8006688:	2500      	movs	r5, #0
 800668a:	e7f8      	b.n	800667e <_calloc_r+0x16>
 800668c:	4621      	mov	r1, r4
 800668e:	f7fd fd23 	bl	80040d8 <memset>
 8006692:	e7f4      	b.n	800667e <_calloc_r+0x16>

08006694 <_free_r>:
 8006694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006696:	2900      	cmp	r1, #0
 8006698:	d044      	beq.n	8006724 <_free_r+0x90>
 800669a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800669e:	9001      	str	r0, [sp, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f1a1 0404 	sub.w	r4, r1, #4
 80066a6:	bfb8      	it	lt
 80066a8:	18e4      	addlt	r4, r4, r3
 80066aa:	f000 fb19 	bl	8006ce0 <__malloc_lock>
 80066ae:	4a1e      	ldr	r2, [pc, #120]	; (8006728 <_free_r+0x94>)
 80066b0:	9801      	ldr	r0, [sp, #4]
 80066b2:	6813      	ldr	r3, [r2, #0]
 80066b4:	b933      	cbnz	r3, 80066c4 <_free_r+0x30>
 80066b6:	6063      	str	r3, [r4, #4]
 80066b8:	6014      	str	r4, [r2, #0]
 80066ba:	b003      	add	sp, #12
 80066bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066c0:	f000 bb14 	b.w	8006cec <__malloc_unlock>
 80066c4:	42a3      	cmp	r3, r4
 80066c6:	d908      	bls.n	80066da <_free_r+0x46>
 80066c8:	6825      	ldr	r5, [r4, #0]
 80066ca:	1961      	adds	r1, r4, r5
 80066cc:	428b      	cmp	r3, r1
 80066ce:	bf01      	itttt	eq
 80066d0:	6819      	ldreq	r1, [r3, #0]
 80066d2:	685b      	ldreq	r3, [r3, #4]
 80066d4:	1949      	addeq	r1, r1, r5
 80066d6:	6021      	streq	r1, [r4, #0]
 80066d8:	e7ed      	b.n	80066b6 <_free_r+0x22>
 80066da:	461a      	mov	r2, r3
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	b10b      	cbz	r3, 80066e4 <_free_r+0x50>
 80066e0:	42a3      	cmp	r3, r4
 80066e2:	d9fa      	bls.n	80066da <_free_r+0x46>
 80066e4:	6811      	ldr	r1, [r2, #0]
 80066e6:	1855      	adds	r5, r2, r1
 80066e8:	42a5      	cmp	r5, r4
 80066ea:	d10b      	bne.n	8006704 <_free_r+0x70>
 80066ec:	6824      	ldr	r4, [r4, #0]
 80066ee:	4421      	add	r1, r4
 80066f0:	1854      	adds	r4, r2, r1
 80066f2:	42a3      	cmp	r3, r4
 80066f4:	6011      	str	r1, [r2, #0]
 80066f6:	d1e0      	bne.n	80066ba <_free_r+0x26>
 80066f8:	681c      	ldr	r4, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	6053      	str	r3, [r2, #4]
 80066fe:	4421      	add	r1, r4
 8006700:	6011      	str	r1, [r2, #0]
 8006702:	e7da      	b.n	80066ba <_free_r+0x26>
 8006704:	d902      	bls.n	800670c <_free_r+0x78>
 8006706:	230c      	movs	r3, #12
 8006708:	6003      	str	r3, [r0, #0]
 800670a:	e7d6      	b.n	80066ba <_free_r+0x26>
 800670c:	6825      	ldr	r5, [r4, #0]
 800670e:	1961      	adds	r1, r4, r5
 8006710:	428b      	cmp	r3, r1
 8006712:	bf04      	itt	eq
 8006714:	6819      	ldreq	r1, [r3, #0]
 8006716:	685b      	ldreq	r3, [r3, #4]
 8006718:	6063      	str	r3, [r4, #4]
 800671a:	bf04      	itt	eq
 800671c:	1949      	addeq	r1, r1, r5
 800671e:	6021      	streq	r1, [r4, #0]
 8006720:	6054      	str	r4, [r2, #4]
 8006722:	e7ca      	b.n	80066ba <_free_r+0x26>
 8006724:	b003      	add	sp, #12
 8006726:	bd30      	pop	{r4, r5, pc}
 8006728:	20000360 	.word	0x20000360

0800672c <sbrk_aligned>:
 800672c:	b570      	push	{r4, r5, r6, lr}
 800672e:	4e0e      	ldr	r6, [pc, #56]	; (8006768 <sbrk_aligned+0x3c>)
 8006730:	460c      	mov	r4, r1
 8006732:	6831      	ldr	r1, [r6, #0]
 8006734:	4605      	mov	r5, r0
 8006736:	b911      	cbnz	r1, 800673e <sbrk_aligned+0x12>
 8006738:	f000 f9e6 	bl	8006b08 <_sbrk_r>
 800673c:	6030      	str	r0, [r6, #0]
 800673e:	4621      	mov	r1, r4
 8006740:	4628      	mov	r0, r5
 8006742:	f000 f9e1 	bl	8006b08 <_sbrk_r>
 8006746:	1c43      	adds	r3, r0, #1
 8006748:	d00a      	beq.n	8006760 <sbrk_aligned+0x34>
 800674a:	1cc4      	adds	r4, r0, #3
 800674c:	f024 0403 	bic.w	r4, r4, #3
 8006750:	42a0      	cmp	r0, r4
 8006752:	d007      	beq.n	8006764 <sbrk_aligned+0x38>
 8006754:	1a21      	subs	r1, r4, r0
 8006756:	4628      	mov	r0, r5
 8006758:	f000 f9d6 	bl	8006b08 <_sbrk_r>
 800675c:	3001      	adds	r0, #1
 800675e:	d101      	bne.n	8006764 <sbrk_aligned+0x38>
 8006760:	f04f 34ff 	mov.w	r4, #4294967295
 8006764:	4620      	mov	r0, r4
 8006766:	bd70      	pop	{r4, r5, r6, pc}
 8006768:	20000364 	.word	0x20000364

0800676c <_malloc_r>:
 800676c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006770:	1ccd      	adds	r5, r1, #3
 8006772:	f025 0503 	bic.w	r5, r5, #3
 8006776:	3508      	adds	r5, #8
 8006778:	2d0c      	cmp	r5, #12
 800677a:	bf38      	it	cc
 800677c:	250c      	movcc	r5, #12
 800677e:	2d00      	cmp	r5, #0
 8006780:	4607      	mov	r7, r0
 8006782:	db01      	blt.n	8006788 <_malloc_r+0x1c>
 8006784:	42a9      	cmp	r1, r5
 8006786:	d905      	bls.n	8006794 <_malloc_r+0x28>
 8006788:	230c      	movs	r3, #12
 800678a:	603b      	str	r3, [r7, #0]
 800678c:	2600      	movs	r6, #0
 800678e:	4630      	mov	r0, r6
 8006790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006794:	4e2e      	ldr	r6, [pc, #184]	; (8006850 <_malloc_r+0xe4>)
 8006796:	f000 faa3 	bl	8006ce0 <__malloc_lock>
 800679a:	6833      	ldr	r3, [r6, #0]
 800679c:	461c      	mov	r4, r3
 800679e:	bb34      	cbnz	r4, 80067ee <_malloc_r+0x82>
 80067a0:	4629      	mov	r1, r5
 80067a2:	4638      	mov	r0, r7
 80067a4:	f7ff ffc2 	bl	800672c <sbrk_aligned>
 80067a8:	1c43      	adds	r3, r0, #1
 80067aa:	4604      	mov	r4, r0
 80067ac:	d14d      	bne.n	800684a <_malloc_r+0xde>
 80067ae:	6834      	ldr	r4, [r6, #0]
 80067b0:	4626      	mov	r6, r4
 80067b2:	2e00      	cmp	r6, #0
 80067b4:	d140      	bne.n	8006838 <_malloc_r+0xcc>
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	4631      	mov	r1, r6
 80067ba:	4638      	mov	r0, r7
 80067bc:	eb04 0803 	add.w	r8, r4, r3
 80067c0:	f000 f9a2 	bl	8006b08 <_sbrk_r>
 80067c4:	4580      	cmp	r8, r0
 80067c6:	d13a      	bne.n	800683e <_malloc_r+0xd2>
 80067c8:	6821      	ldr	r1, [r4, #0]
 80067ca:	3503      	adds	r5, #3
 80067cc:	1a6d      	subs	r5, r5, r1
 80067ce:	f025 0503 	bic.w	r5, r5, #3
 80067d2:	3508      	adds	r5, #8
 80067d4:	2d0c      	cmp	r5, #12
 80067d6:	bf38      	it	cc
 80067d8:	250c      	movcc	r5, #12
 80067da:	4629      	mov	r1, r5
 80067dc:	4638      	mov	r0, r7
 80067de:	f7ff ffa5 	bl	800672c <sbrk_aligned>
 80067e2:	3001      	adds	r0, #1
 80067e4:	d02b      	beq.n	800683e <_malloc_r+0xd2>
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	442b      	add	r3, r5
 80067ea:	6023      	str	r3, [r4, #0]
 80067ec:	e00e      	b.n	800680c <_malloc_r+0xa0>
 80067ee:	6822      	ldr	r2, [r4, #0]
 80067f0:	1b52      	subs	r2, r2, r5
 80067f2:	d41e      	bmi.n	8006832 <_malloc_r+0xc6>
 80067f4:	2a0b      	cmp	r2, #11
 80067f6:	d916      	bls.n	8006826 <_malloc_r+0xba>
 80067f8:	1961      	adds	r1, r4, r5
 80067fa:	42a3      	cmp	r3, r4
 80067fc:	6025      	str	r5, [r4, #0]
 80067fe:	bf18      	it	ne
 8006800:	6059      	strne	r1, [r3, #4]
 8006802:	6863      	ldr	r3, [r4, #4]
 8006804:	bf08      	it	eq
 8006806:	6031      	streq	r1, [r6, #0]
 8006808:	5162      	str	r2, [r4, r5]
 800680a:	604b      	str	r3, [r1, #4]
 800680c:	4638      	mov	r0, r7
 800680e:	f104 060b 	add.w	r6, r4, #11
 8006812:	f000 fa6b 	bl	8006cec <__malloc_unlock>
 8006816:	f026 0607 	bic.w	r6, r6, #7
 800681a:	1d23      	adds	r3, r4, #4
 800681c:	1af2      	subs	r2, r6, r3
 800681e:	d0b6      	beq.n	800678e <_malloc_r+0x22>
 8006820:	1b9b      	subs	r3, r3, r6
 8006822:	50a3      	str	r3, [r4, r2]
 8006824:	e7b3      	b.n	800678e <_malloc_r+0x22>
 8006826:	6862      	ldr	r2, [r4, #4]
 8006828:	42a3      	cmp	r3, r4
 800682a:	bf0c      	ite	eq
 800682c:	6032      	streq	r2, [r6, #0]
 800682e:	605a      	strne	r2, [r3, #4]
 8006830:	e7ec      	b.n	800680c <_malloc_r+0xa0>
 8006832:	4623      	mov	r3, r4
 8006834:	6864      	ldr	r4, [r4, #4]
 8006836:	e7b2      	b.n	800679e <_malloc_r+0x32>
 8006838:	4634      	mov	r4, r6
 800683a:	6876      	ldr	r6, [r6, #4]
 800683c:	e7b9      	b.n	80067b2 <_malloc_r+0x46>
 800683e:	230c      	movs	r3, #12
 8006840:	603b      	str	r3, [r7, #0]
 8006842:	4638      	mov	r0, r7
 8006844:	f000 fa52 	bl	8006cec <__malloc_unlock>
 8006848:	e7a1      	b.n	800678e <_malloc_r+0x22>
 800684a:	6025      	str	r5, [r4, #0]
 800684c:	e7de      	b.n	800680c <_malloc_r+0xa0>
 800684e:	bf00      	nop
 8006850:	20000360 	.word	0x20000360

08006854 <__sfputc_r>:
 8006854:	6893      	ldr	r3, [r2, #8]
 8006856:	3b01      	subs	r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	b410      	push	{r4}
 800685c:	6093      	str	r3, [r2, #8]
 800685e:	da08      	bge.n	8006872 <__sfputc_r+0x1e>
 8006860:	6994      	ldr	r4, [r2, #24]
 8006862:	42a3      	cmp	r3, r4
 8006864:	db01      	blt.n	800686a <__sfputc_r+0x16>
 8006866:	290a      	cmp	r1, #10
 8006868:	d103      	bne.n	8006872 <__sfputc_r+0x1e>
 800686a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800686e:	f7fe ba01 	b.w	8004c74 <__swbuf_r>
 8006872:	6813      	ldr	r3, [r2, #0]
 8006874:	1c58      	adds	r0, r3, #1
 8006876:	6010      	str	r0, [r2, #0]
 8006878:	7019      	strb	r1, [r3, #0]
 800687a:	4608      	mov	r0, r1
 800687c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006880:	4770      	bx	lr

08006882 <__sfputs_r>:
 8006882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006884:	4606      	mov	r6, r0
 8006886:	460f      	mov	r7, r1
 8006888:	4614      	mov	r4, r2
 800688a:	18d5      	adds	r5, r2, r3
 800688c:	42ac      	cmp	r4, r5
 800688e:	d101      	bne.n	8006894 <__sfputs_r+0x12>
 8006890:	2000      	movs	r0, #0
 8006892:	e007      	b.n	80068a4 <__sfputs_r+0x22>
 8006894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006898:	463a      	mov	r2, r7
 800689a:	4630      	mov	r0, r6
 800689c:	f7ff ffda 	bl	8006854 <__sfputc_r>
 80068a0:	1c43      	adds	r3, r0, #1
 80068a2:	d1f3      	bne.n	800688c <__sfputs_r+0xa>
 80068a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068a8 <_vfiprintf_r>:
 80068a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ac:	460d      	mov	r5, r1
 80068ae:	b09d      	sub	sp, #116	; 0x74
 80068b0:	4614      	mov	r4, r2
 80068b2:	4698      	mov	r8, r3
 80068b4:	4606      	mov	r6, r0
 80068b6:	b118      	cbz	r0, 80068c0 <_vfiprintf_r+0x18>
 80068b8:	6983      	ldr	r3, [r0, #24]
 80068ba:	b90b      	cbnz	r3, 80068c0 <_vfiprintf_r+0x18>
 80068bc:	f7ff fa30 	bl	8005d20 <__sinit>
 80068c0:	4b89      	ldr	r3, [pc, #548]	; (8006ae8 <_vfiprintf_r+0x240>)
 80068c2:	429d      	cmp	r5, r3
 80068c4:	d11b      	bne.n	80068fe <_vfiprintf_r+0x56>
 80068c6:	6875      	ldr	r5, [r6, #4]
 80068c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068ca:	07d9      	lsls	r1, r3, #31
 80068cc:	d405      	bmi.n	80068da <_vfiprintf_r+0x32>
 80068ce:	89ab      	ldrh	r3, [r5, #12]
 80068d0:	059a      	lsls	r2, r3, #22
 80068d2:	d402      	bmi.n	80068da <_vfiprintf_r+0x32>
 80068d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068d6:	f7ff fac6 	bl	8005e66 <__retarget_lock_acquire_recursive>
 80068da:	89ab      	ldrh	r3, [r5, #12]
 80068dc:	071b      	lsls	r3, r3, #28
 80068de:	d501      	bpl.n	80068e4 <_vfiprintf_r+0x3c>
 80068e0:	692b      	ldr	r3, [r5, #16]
 80068e2:	b9eb      	cbnz	r3, 8006920 <_vfiprintf_r+0x78>
 80068e4:	4629      	mov	r1, r5
 80068e6:	4630      	mov	r0, r6
 80068e8:	f7fe fa16 	bl	8004d18 <__swsetup_r>
 80068ec:	b1c0      	cbz	r0, 8006920 <_vfiprintf_r+0x78>
 80068ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068f0:	07dc      	lsls	r4, r3, #31
 80068f2:	d50e      	bpl.n	8006912 <_vfiprintf_r+0x6a>
 80068f4:	f04f 30ff 	mov.w	r0, #4294967295
 80068f8:	b01d      	add	sp, #116	; 0x74
 80068fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068fe:	4b7b      	ldr	r3, [pc, #492]	; (8006aec <_vfiprintf_r+0x244>)
 8006900:	429d      	cmp	r5, r3
 8006902:	d101      	bne.n	8006908 <_vfiprintf_r+0x60>
 8006904:	68b5      	ldr	r5, [r6, #8]
 8006906:	e7df      	b.n	80068c8 <_vfiprintf_r+0x20>
 8006908:	4b79      	ldr	r3, [pc, #484]	; (8006af0 <_vfiprintf_r+0x248>)
 800690a:	429d      	cmp	r5, r3
 800690c:	bf08      	it	eq
 800690e:	68f5      	ldreq	r5, [r6, #12]
 8006910:	e7da      	b.n	80068c8 <_vfiprintf_r+0x20>
 8006912:	89ab      	ldrh	r3, [r5, #12]
 8006914:	0598      	lsls	r0, r3, #22
 8006916:	d4ed      	bmi.n	80068f4 <_vfiprintf_r+0x4c>
 8006918:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800691a:	f7ff faa5 	bl	8005e68 <__retarget_lock_release_recursive>
 800691e:	e7e9      	b.n	80068f4 <_vfiprintf_r+0x4c>
 8006920:	2300      	movs	r3, #0
 8006922:	9309      	str	r3, [sp, #36]	; 0x24
 8006924:	2320      	movs	r3, #32
 8006926:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800692a:	f8cd 800c 	str.w	r8, [sp, #12]
 800692e:	2330      	movs	r3, #48	; 0x30
 8006930:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006af4 <_vfiprintf_r+0x24c>
 8006934:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006938:	f04f 0901 	mov.w	r9, #1
 800693c:	4623      	mov	r3, r4
 800693e:	469a      	mov	sl, r3
 8006940:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006944:	b10a      	cbz	r2, 800694a <_vfiprintf_r+0xa2>
 8006946:	2a25      	cmp	r2, #37	; 0x25
 8006948:	d1f9      	bne.n	800693e <_vfiprintf_r+0x96>
 800694a:	ebba 0b04 	subs.w	fp, sl, r4
 800694e:	d00b      	beq.n	8006968 <_vfiprintf_r+0xc0>
 8006950:	465b      	mov	r3, fp
 8006952:	4622      	mov	r2, r4
 8006954:	4629      	mov	r1, r5
 8006956:	4630      	mov	r0, r6
 8006958:	f7ff ff93 	bl	8006882 <__sfputs_r>
 800695c:	3001      	adds	r0, #1
 800695e:	f000 80aa 	beq.w	8006ab6 <_vfiprintf_r+0x20e>
 8006962:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006964:	445a      	add	r2, fp
 8006966:	9209      	str	r2, [sp, #36]	; 0x24
 8006968:	f89a 3000 	ldrb.w	r3, [sl]
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 80a2 	beq.w	8006ab6 <_vfiprintf_r+0x20e>
 8006972:	2300      	movs	r3, #0
 8006974:	f04f 32ff 	mov.w	r2, #4294967295
 8006978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800697c:	f10a 0a01 	add.w	sl, sl, #1
 8006980:	9304      	str	r3, [sp, #16]
 8006982:	9307      	str	r3, [sp, #28]
 8006984:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006988:	931a      	str	r3, [sp, #104]	; 0x68
 800698a:	4654      	mov	r4, sl
 800698c:	2205      	movs	r2, #5
 800698e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006992:	4858      	ldr	r0, [pc, #352]	; (8006af4 <_vfiprintf_r+0x24c>)
 8006994:	f7f9 fc24 	bl	80001e0 <memchr>
 8006998:	9a04      	ldr	r2, [sp, #16]
 800699a:	b9d8      	cbnz	r0, 80069d4 <_vfiprintf_r+0x12c>
 800699c:	06d1      	lsls	r1, r2, #27
 800699e:	bf44      	itt	mi
 80069a0:	2320      	movmi	r3, #32
 80069a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069a6:	0713      	lsls	r3, r2, #28
 80069a8:	bf44      	itt	mi
 80069aa:	232b      	movmi	r3, #43	; 0x2b
 80069ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069b0:	f89a 3000 	ldrb.w	r3, [sl]
 80069b4:	2b2a      	cmp	r3, #42	; 0x2a
 80069b6:	d015      	beq.n	80069e4 <_vfiprintf_r+0x13c>
 80069b8:	9a07      	ldr	r2, [sp, #28]
 80069ba:	4654      	mov	r4, sl
 80069bc:	2000      	movs	r0, #0
 80069be:	f04f 0c0a 	mov.w	ip, #10
 80069c2:	4621      	mov	r1, r4
 80069c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069c8:	3b30      	subs	r3, #48	; 0x30
 80069ca:	2b09      	cmp	r3, #9
 80069cc:	d94e      	bls.n	8006a6c <_vfiprintf_r+0x1c4>
 80069ce:	b1b0      	cbz	r0, 80069fe <_vfiprintf_r+0x156>
 80069d0:	9207      	str	r2, [sp, #28]
 80069d2:	e014      	b.n	80069fe <_vfiprintf_r+0x156>
 80069d4:	eba0 0308 	sub.w	r3, r0, r8
 80069d8:	fa09 f303 	lsl.w	r3, r9, r3
 80069dc:	4313      	orrs	r3, r2
 80069de:	9304      	str	r3, [sp, #16]
 80069e0:	46a2      	mov	sl, r4
 80069e2:	e7d2      	b.n	800698a <_vfiprintf_r+0xe2>
 80069e4:	9b03      	ldr	r3, [sp, #12]
 80069e6:	1d19      	adds	r1, r3, #4
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	9103      	str	r1, [sp, #12]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	bfbb      	ittet	lt
 80069f0:	425b      	neglt	r3, r3
 80069f2:	f042 0202 	orrlt.w	r2, r2, #2
 80069f6:	9307      	strge	r3, [sp, #28]
 80069f8:	9307      	strlt	r3, [sp, #28]
 80069fa:	bfb8      	it	lt
 80069fc:	9204      	strlt	r2, [sp, #16]
 80069fe:	7823      	ldrb	r3, [r4, #0]
 8006a00:	2b2e      	cmp	r3, #46	; 0x2e
 8006a02:	d10c      	bne.n	8006a1e <_vfiprintf_r+0x176>
 8006a04:	7863      	ldrb	r3, [r4, #1]
 8006a06:	2b2a      	cmp	r3, #42	; 0x2a
 8006a08:	d135      	bne.n	8006a76 <_vfiprintf_r+0x1ce>
 8006a0a:	9b03      	ldr	r3, [sp, #12]
 8006a0c:	1d1a      	adds	r2, r3, #4
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	9203      	str	r2, [sp, #12]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	bfb8      	it	lt
 8006a16:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a1a:	3402      	adds	r4, #2
 8006a1c:	9305      	str	r3, [sp, #20]
 8006a1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b04 <_vfiprintf_r+0x25c>
 8006a22:	7821      	ldrb	r1, [r4, #0]
 8006a24:	2203      	movs	r2, #3
 8006a26:	4650      	mov	r0, sl
 8006a28:	f7f9 fbda 	bl	80001e0 <memchr>
 8006a2c:	b140      	cbz	r0, 8006a40 <_vfiprintf_r+0x198>
 8006a2e:	2340      	movs	r3, #64	; 0x40
 8006a30:	eba0 000a 	sub.w	r0, r0, sl
 8006a34:	fa03 f000 	lsl.w	r0, r3, r0
 8006a38:	9b04      	ldr	r3, [sp, #16]
 8006a3a:	4303      	orrs	r3, r0
 8006a3c:	3401      	adds	r4, #1
 8006a3e:	9304      	str	r3, [sp, #16]
 8006a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a44:	482c      	ldr	r0, [pc, #176]	; (8006af8 <_vfiprintf_r+0x250>)
 8006a46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a4a:	2206      	movs	r2, #6
 8006a4c:	f7f9 fbc8 	bl	80001e0 <memchr>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	d03f      	beq.n	8006ad4 <_vfiprintf_r+0x22c>
 8006a54:	4b29      	ldr	r3, [pc, #164]	; (8006afc <_vfiprintf_r+0x254>)
 8006a56:	bb1b      	cbnz	r3, 8006aa0 <_vfiprintf_r+0x1f8>
 8006a58:	9b03      	ldr	r3, [sp, #12]
 8006a5a:	3307      	adds	r3, #7
 8006a5c:	f023 0307 	bic.w	r3, r3, #7
 8006a60:	3308      	adds	r3, #8
 8006a62:	9303      	str	r3, [sp, #12]
 8006a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a66:	443b      	add	r3, r7
 8006a68:	9309      	str	r3, [sp, #36]	; 0x24
 8006a6a:	e767      	b.n	800693c <_vfiprintf_r+0x94>
 8006a6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a70:	460c      	mov	r4, r1
 8006a72:	2001      	movs	r0, #1
 8006a74:	e7a5      	b.n	80069c2 <_vfiprintf_r+0x11a>
 8006a76:	2300      	movs	r3, #0
 8006a78:	3401      	adds	r4, #1
 8006a7a:	9305      	str	r3, [sp, #20]
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	f04f 0c0a 	mov.w	ip, #10
 8006a82:	4620      	mov	r0, r4
 8006a84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a88:	3a30      	subs	r2, #48	; 0x30
 8006a8a:	2a09      	cmp	r2, #9
 8006a8c:	d903      	bls.n	8006a96 <_vfiprintf_r+0x1ee>
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d0c5      	beq.n	8006a1e <_vfiprintf_r+0x176>
 8006a92:	9105      	str	r1, [sp, #20]
 8006a94:	e7c3      	b.n	8006a1e <_vfiprintf_r+0x176>
 8006a96:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e7f0      	b.n	8006a82 <_vfiprintf_r+0x1da>
 8006aa0:	ab03      	add	r3, sp, #12
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	462a      	mov	r2, r5
 8006aa6:	4b16      	ldr	r3, [pc, #88]	; (8006b00 <_vfiprintf_r+0x258>)
 8006aa8:	a904      	add	r1, sp, #16
 8006aaa:	4630      	mov	r0, r6
 8006aac:	f7fd fbbc 	bl	8004228 <_printf_float>
 8006ab0:	4607      	mov	r7, r0
 8006ab2:	1c78      	adds	r0, r7, #1
 8006ab4:	d1d6      	bne.n	8006a64 <_vfiprintf_r+0x1bc>
 8006ab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ab8:	07d9      	lsls	r1, r3, #31
 8006aba:	d405      	bmi.n	8006ac8 <_vfiprintf_r+0x220>
 8006abc:	89ab      	ldrh	r3, [r5, #12]
 8006abe:	059a      	lsls	r2, r3, #22
 8006ac0:	d402      	bmi.n	8006ac8 <_vfiprintf_r+0x220>
 8006ac2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ac4:	f7ff f9d0 	bl	8005e68 <__retarget_lock_release_recursive>
 8006ac8:	89ab      	ldrh	r3, [r5, #12]
 8006aca:	065b      	lsls	r3, r3, #25
 8006acc:	f53f af12 	bmi.w	80068f4 <_vfiprintf_r+0x4c>
 8006ad0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ad2:	e711      	b.n	80068f8 <_vfiprintf_r+0x50>
 8006ad4:	ab03      	add	r3, sp, #12
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	462a      	mov	r2, r5
 8006ada:	4b09      	ldr	r3, [pc, #36]	; (8006b00 <_vfiprintf_r+0x258>)
 8006adc:	a904      	add	r1, sp, #16
 8006ade:	4630      	mov	r0, r6
 8006ae0:	f7fd fe46 	bl	8004770 <_printf_i>
 8006ae4:	e7e4      	b.n	8006ab0 <_vfiprintf_r+0x208>
 8006ae6:	bf00      	nop
 8006ae8:	08006fb4 	.word	0x08006fb4
 8006aec:	08006fd4 	.word	0x08006fd4
 8006af0:	08006f94 	.word	0x08006f94
 8006af4:	0800714c 	.word	0x0800714c
 8006af8:	08007156 	.word	0x08007156
 8006afc:	08004229 	.word	0x08004229
 8006b00:	08006883 	.word	0x08006883
 8006b04:	08007152 	.word	0x08007152

08006b08 <_sbrk_r>:
 8006b08:	b538      	push	{r3, r4, r5, lr}
 8006b0a:	4d06      	ldr	r5, [pc, #24]	; (8006b24 <_sbrk_r+0x1c>)
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	4604      	mov	r4, r0
 8006b10:	4608      	mov	r0, r1
 8006b12:	602b      	str	r3, [r5, #0]
 8006b14:	f7fa fc24 	bl	8001360 <_sbrk>
 8006b18:	1c43      	adds	r3, r0, #1
 8006b1a:	d102      	bne.n	8006b22 <_sbrk_r+0x1a>
 8006b1c:	682b      	ldr	r3, [r5, #0]
 8006b1e:	b103      	cbz	r3, 8006b22 <_sbrk_r+0x1a>
 8006b20:	6023      	str	r3, [r4, #0]
 8006b22:	bd38      	pop	{r3, r4, r5, pc}
 8006b24:	20000368 	.word	0x20000368

08006b28 <__sread>:
 8006b28:	b510      	push	{r4, lr}
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b30:	f000 f8e2 	bl	8006cf8 <_read_r>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	bfab      	itete	ge
 8006b38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b3a:	89a3      	ldrhlt	r3, [r4, #12]
 8006b3c:	181b      	addge	r3, r3, r0
 8006b3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b42:	bfac      	ite	ge
 8006b44:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b46:	81a3      	strhlt	r3, [r4, #12]
 8006b48:	bd10      	pop	{r4, pc}

08006b4a <__swrite>:
 8006b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b4e:	461f      	mov	r7, r3
 8006b50:	898b      	ldrh	r3, [r1, #12]
 8006b52:	05db      	lsls	r3, r3, #23
 8006b54:	4605      	mov	r5, r0
 8006b56:	460c      	mov	r4, r1
 8006b58:	4616      	mov	r6, r2
 8006b5a:	d505      	bpl.n	8006b68 <__swrite+0x1e>
 8006b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b60:	2302      	movs	r3, #2
 8006b62:	2200      	movs	r2, #0
 8006b64:	f000 f898 	bl	8006c98 <_lseek_r>
 8006b68:	89a3      	ldrh	r3, [r4, #12]
 8006b6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b72:	81a3      	strh	r3, [r4, #12]
 8006b74:	4632      	mov	r2, r6
 8006b76:	463b      	mov	r3, r7
 8006b78:	4628      	mov	r0, r5
 8006b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b7e:	f000 b817 	b.w	8006bb0 <_write_r>

08006b82 <__sseek>:
 8006b82:	b510      	push	{r4, lr}
 8006b84:	460c      	mov	r4, r1
 8006b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b8a:	f000 f885 	bl	8006c98 <_lseek_r>
 8006b8e:	1c43      	adds	r3, r0, #1
 8006b90:	89a3      	ldrh	r3, [r4, #12]
 8006b92:	bf15      	itete	ne
 8006b94:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b9e:	81a3      	strheq	r3, [r4, #12]
 8006ba0:	bf18      	it	ne
 8006ba2:	81a3      	strhne	r3, [r4, #12]
 8006ba4:	bd10      	pop	{r4, pc}

08006ba6 <__sclose>:
 8006ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006baa:	f000 b831 	b.w	8006c10 <_close_r>
	...

08006bb0 <_write_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	4d07      	ldr	r5, [pc, #28]	; (8006bd0 <_write_r+0x20>)
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	4608      	mov	r0, r1
 8006bb8:	4611      	mov	r1, r2
 8006bba:	2200      	movs	r2, #0
 8006bbc:	602a      	str	r2, [r5, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f7fa fa5e 	bl	8001080 <_write>
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	d102      	bne.n	8006bce <_write_r+0x1e>
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	b103      	cbz	r3, 8006bce <_write_r+0x1e>
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	bd38      	pop	{r3, r4, r5, pc}
 8006bd0:	20000368 	.word	0x20000368

08006bd4 <__assert_func>:
 8006bd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006bd6:	4614      	mov	r4, r2
 8006bd8:	461a      	mov	r2, r3
 8006bda:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <__assert_func+0x2c>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4605      	mov	r5, r0
 8006be0:	68d8      	ldr	r0, [r3, #12]
 8006be2:	b14c      	cbz	r4, 8006bf8 <__assert_func+0x24>
 8006be4:	4b07      	ldr	r3, [pc, #28]	; (8006c04 <__assert_func+0x30>)
 8006be6:	9100      	str	r1, [sp, #0]
 8006be8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006bec:	4906      	ldr	r1, [pc, #24]	; (8006c08 <__assert_func+0x34>)
 8006bee:	462b      	mov	r3, r5
 8006bf0:	f000 f81e 	bl	8006c30 <fiprintf>
 8006bf4:	f000 f89f 	bl	8006d36 <abort>
 8006bf8:	4b04      	ldr	r3, [pc, #16]	; (8006c0c <__assert_func+0x38>)
 8006bfa:	461c      	mov	r4, r3
 8006bfc:	e7f3      	b.n	8006be6 <__assert_func+0x12>
 8006bfe:	bf00      	nop
 8006c00:	2000000c 	.word	0x2000000c
 8006c04:	0800715d 	.word	0x0800715d
 8006c08:	0800716a 	.word	0x0800716a
 8006c0c:	08007198 	.word	0x08007198

08006c10 <_close_r>:
 8006c10:	b538      	push	{r3, r4, r5, lr}
 8006c12:	4d06      	ldr	r5, [pc, #24]	; (8006c2c <_close_r+0x1c>)
 8006c14:	2300      	movs	r3, #0
 8006c16:	4604      	mov	r4, r0
 8006c18:	4608      	mov	r0, r1
 8006c1a:	602b      	str	r3, [r5, #0]
 8006c1c:	f7fa fb6b 	bl	80012f6 <_close>
 8006c20:	1c43      	adds	r3, r0, #1
 8006c22:	d102      	bne.n	8006c2a <_close_r+0x1a>
 8006c24:	682b      	ldr	r3, [r5, #0]
 8006c26:	b103      	cbz	r3, 8006c2a <_close_r+0x1a>
 8006c28:	6023      	str	r3, [r4, #0]
 8006c2a:	bd38      	pop	{r3, r4, r5, pc}
 8006c2c:	20000368 	.word	0x20000368

08006c30 <fiprintf>:
 8006c30:	b40e      	push	{r1, r2, r3}
 8006c32:	b503      	push	{r0, r1, lr}
 8006c34:	4601      	mov	r1, r0
 8006c36:	ab03      	add	r3, sp, #12
 8006c38:	4805      	ldr	r0, [pc, #20]	; (8006c50 <fiprintf+0x20>)
 8006c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c3e:	6800      	ldr	r0, [r0, #0]
 8006c40:	9301      	str	r3, [sp, #4]
 8006c42:	f7ff fe31 	bl	80068a8 <_vfiprintf_r>
 8006c46:	b002      	add	sp, #8
 8006c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c4c:	b003      	add	sp, #12
 8006c4e:	4770      	bx	lr
 8006c50:	2000000c 	.word	0x2000000c

08006c54 <_fstat_r>:
 8006c54:	b538      	push	{r3, r4, r5, lr}
 8006c56:	4d07      	ldr	r5, [pc, #28]	; (8006c74 <_fstat_r+0x20>)
 8006c58:	2300      	movs	r3, #0
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	4608      	mov	r0, r1
 8006c5e:	4611      	mov	r1, r2
 8006c60:	602b      	str	r3, [r5, #0]
 8006c62:	f7fa fb54 	bl	800130e <_fstat>
 8006c66:	1c43      	adds	r3, r0, #1
 8006c68:	d102      	bne.n	8006c70 <_fstat_r+0x1c>
 8006c6a:	682b      	ldr	r3, [r5, #0]
 8006c6c:	b103      	cbz	r3, 8006c70 <_fstat_r+0x1c>
 8006c6e:	6023      	str	r3, [r4, #0]
 8006c70:	bd38      	pop	{r3, r4, r5, pc}
 8006c72:	bf00      	nop
 8006c74:	20000368 	.word	0x20000368

08006c78 <_isatty_r>:
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	4d06      	ldr	r5, [pc, #24]	; (8006c94 <_isatty_r+0x1c>)
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	4604      	mov	r4, r0
 8006c80:	4608      	mov	r0, r1
 8006c82:	602b      	str	r3, [r5, #0]
 8006c84:	f7fa fb53 	bl	800132e <_isatty>
 8006c88:	1c43      	adds	r3, r0, #1
 8006c8a:	d102      	bne.n	8006c92 <_isatty_r+0x1a>
 8006c8c:	682b      	ldr	r3, [r5, #0]
 8006c8e:	b103      	cbz	r3, 8006c92 <_isatty_r+0x1a>
 8006c90:	6023      	str	r3, [r4, #0]
 8006c92:	bd38      	pop	{r3, r4, r5, pc}
 8006c94:	20000368 	.word	0x20000368

08006c98 <_lseek_r>:
 8006c98:	b538      	push	{r3, r4, r5, lr}
 8006c9a:	4d07      	ldr	r5, [pc, #28]	; (8006cb8 <_lseek_r+0x20>)
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	4608      	mov	r0, r1
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	602a      	str	r2, [r5, #0]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f7fa fb4c 	bl	8001344 <_lseek>
 8006cac:	1c43      	adds	r3, r0, #1
 8006cae:	d102      	bne.n	8006cb6 <_lseek_r+0x1e>
 8006cb0:	682b      	ldr	r3, [r5, #0]
 8006cb2:	b103      	cbz	r3, 8006cb6 <_lseek_r+0x1e>
 8006cb4:	6023      	str	r3, [r4, #0]
 8006cb6:	bd38      	pop	{r3, r4, r5, pc}
 8006cb8:	20000368 	.word	0x20000368

08006cbc <__ascii_mbtowc>:
 8006cbc:	b082      	sub	sp, #8
 8006cbe:	b901      	cbnz	r1, 8006cc2 <__ascii_mbtowc+0x6>
 8006cc0:	a901      	add	r1, sp, #4
 8006cc2:	b142      	cbz	r2, 8006cd6 <__ascii_mbtowc+0x1a>
 8006cc4:	b14b      	cbz	r3, 8006cda <__ascii_mbtowc+0x1e>
 8006cc6:	7813      	ldrb	r3, [r2, #0]
 8006cc8:	600b      	str	r3, [r1, #0]
 8006cca:	7812      	ldrb	r2, [r2, #0]
 8006ccc:	1e10      	subs	r0, r2, #0
 8006cce:	bf18      	it	ne
 8006cd0:	2001      	movne	r0, #1
 8006cd2:	b002      	add	sp, #8
 8006cd4:	4770      	bx	lr
 8006cd6:	4610      	mov	r0, r2
 8006cd8:	e7fb      	b.n	8006cd2 <__ascii_mbtowc+0x16>
 8006cda:	f06f 0001 	mvn.w	r0, #1
 8006cde:	e7f8      	b.n	8006cd2 <__ascii_mbtowc+0x16>

08006ce0 <__malloc_lock>:
 8006ce0:	4801      	ldr	r0, [pc, #4]	; (8006ce8 <__malloc_lock+0x8>)
 8006ce2:	f7ff b8c0 	b.w	8005e66 <__retarget_lock_acquire_recursive>
 8006ce6:	bf00      	nop
 8006ce8:	2000035c 	.word	0x2000035c

08006cec <__malloc_unlock>:
 8006cec:	4801      	ldr	r0, [pc, #4]	; (8006cf4 <__malloc_unlock+0x8>)
 8006cee:	f7ff b8bb 	b.w	8005e68 <__retarget_lock_release_recursive>
 8006cf2:	bf00      	nop
 8006cf4:	2000035c 	.word	0x2000035c

08006cf8 <_read_r>:
 8006cf8:	b538      	push	{r3, r4, r5, lr}
 8006cfa:	4d07      	ldr	r5, [pc, #28]	; (8006d18 <_read_r+0x20>)
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	4608      	mov	r0, r1
 8006d00:	4611      	mov	r1, r2
 8006d02:	2200      	movs	r2, #0
 8006d04:	602a      	str	r2, [r5, #0]
 8006d06:	461a      	mov	r2, r3
 8006d08:	f7fa fad8 	bl	80012bc <_read>
 8006d0c:	1c43      	adds	r3, r0, #1
 8006d0e:	d102      	bne.n	8006d16 <_read_r+0x1e>
 8006d10:	682b      	ldr	r3, [r5, #0]
 8006d12:	b103      	cbz	r3, 8006d16 <_read_r+0x1e>
 8006d14:	6023      	str	r3, [r4, #0]
 8006d16:	bd38      	pop	{r3, r4, r5, pc}
 8006d18:	20000368 	.word	0x20000368

08006d1c <__ascii_wctomb>:
 8006d1c:	b149      	cbz	r1, 8006d32 <__ascii_wctomb+0x16>
 8006d1e:	2aff      	cmp	r2, #255	; 0xff
 8006d20:	bf85      	ittet	hi
 8006d22:	238a      	movhi	r3, #138	; 0x8a
 8006d24:	6003      	strhi	r3, [r0, #0]
 8006d26:	700a      	strbls	r2, [r1, #0]
 8006d28:	f04f 30ff 	movhi.w	r0, #4294967295
 8006d2c:	bf98      	it	ls
 8006d2e:	2001      	movls	r0, #1
 8006d30:	4770      	bx	lr
 8006d32:	4608      	mov	r0, r1
 8006d34:	4770      	bx	lr

08006d36 <abort>:
 8006d36:	b508      	push	{r3, lr}
 8006d38:	2006      	movs	r0, #6
 8006d3a:	f000 f82b 	bl	8006d94 <raise>
 8006d3e:	2001      	movs	r0, #1
 8006d40:	f7fa fab2 	bl	80012a8 <_exit>

08006d44 <_raise_r>:
 8006d44:	291f      	cmp	r1, #31
 8006d46:	b538      	push	{r3, r4, r5, lr}
 8006d48:	4604      	mov	r4, r0
 8006d4a:	460d      	mov	r5, r1
 8006d4c:	d904      	bls.n	8006d58 <_raise_r+0x14>
 8006d4e:	2316      	movs	r3, #22
 8006d50:	6003      	str	r3, [r0, #0]
 8006d52:	f04f 30ff 	mov.w	r0, #4294967295
 8006d56:	bd38      	pop	{r3, r4, r5, pc}
 8006d58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006d5a:	b112      	cbz	r2, 8006d62 <_raise_r+0x1e>
 8006d5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d60:	b94b      	cbnz	r3, 8006d76 <_raise_r+0x32>
 8006d62:	4620      	mov	r0, r4
 8006d64:	f000 f830 	bl	8006dc8 <_getpid_r>
 8006d68:	462a      	mov	r2, r5
 8006d6a:	4601      	mov	r1, r0
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d72:	f000 b817 	b.w	8006da4 <_kill_r>
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d00a      	beq.n	8006d90 <_raise_r+0x4c>
 8006d7a:	1c59      	adds	r1, r3, #1
 8006d7c:	d103      	bne.n	8006d86 <_raise_r+0x42>
 8006d7e:	2316      	movs	r3, #22
 8006d80:	6003      	str	r3, [r0, #0]
 8006d82:	2001      	movs	r0, #1
 8006d84:	e7e7      	b.n	8006d56 <_raise_r+0x12>
 8006d86:	2400      	movs	r4, #0
 8006d88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	4798      	blx	r3
 8006d90:	2000      	movs	r0, #0
 8006d92:	e7e0      	b.n	8006d56 <_raise_r+0x12>

08006d94 <raise>:
 8006d94:	4b02      	ldr	r3, [pc, #8]	; (8006da0 <raise+0xc>)
 8006d96:	4601      	mov	r1, r0
 8006d98:	6818      	ldr	r0, [r3, #0]
 8006d9a:	f7ff bfd3 	b.w	8006d44 <_raise_r>
 8006d9e:	bf00      	nop
 8006da0:	2000000c 	.word	0x2000000c

08006da4 <_kill_r>:
 8006da4:	b538      	push	{r3, r4, r5, lr}
 8006da6:	4d07      	ldr	r5, [pc, #28]	; (8006dc4 <_kill_r+0x20>)
 8006da8:	2300      	movs	r3, #0
 8006daa:	4604      	mov	r4, r0
 8006dac:	4608      	mov	r0, r1
 8006dae:	4611      	mov	r1, r2
 8006db0:	602b      	str	r3, [r5, #0]
 8006db2:	f7fa fa69 	bl	8001288 <_kill>
 8006db6:	1c43      	adds	r3, r0, #1
 8006db8:	d102      	bne.n	8006dc0 <_kill_r+0x1c>
 8006dba:	682b      	ldr	r3, [r5, #0]
 8006dbc:	b103      	cbz	r3, 8006dc0 <_kill_r+0x1c>
 8006dbe:	6023      	str	r3, [r4, #0]
 8006dc0:	bd38      	pop	{r3, r4, r5, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20000368 	.word	0x20000368

08006dc8 <_getpid_r>:
 8006dc8:	f7fa ba56 	b.w	8001278 <_getpid>

08006dcc <_init>:
 8006dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dce:	bf00      	nop
 8006dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dd2:	bc08      	pop	{r3}
 8006dd4:	469e      	mov	lr, r3
 8006dd6:	4770      	bx	lr

08006dd8 <_fini>:
 8006dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dda:	bf00      	nop
 8006ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dde:	bc08      	pop	{r3}
 8006de0:	469e      	mov	lr, r3
 8006de2:	4770      	bx	lr
