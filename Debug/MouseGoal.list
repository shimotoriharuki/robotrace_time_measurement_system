
MouseGoal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08006e20  08006e20  00016e20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800732c  0800732c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800732c  0800732c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800732c  0800732c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800732c  0800732c  0001732c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007330  08007330  00017330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          0000018c  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000036c  2000036c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ecc7  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b76  00000000  00000000  0002eed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c78  00000000  00000000  00030a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bd0  00000000  00000000  000316c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bf35  00000000  00000000  00032298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e8c2  00000000  00000000  0004e1cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a5fb2  00000000  00000000  0005ca8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00102a41  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045a8  00000000  00000000  00102a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e04 	.word	0x08006e04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08006e04 	.word	0x08006e04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	time += 0.001;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bb6:	a310      	add	r3, pc, #64	; (adr r3, 8000bf8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bbc:	f7ff fb66 	bl	800028c <__adddf3>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	4910      	ldr	r1, [pc, #64]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bc6:	e9c1 2300 	strd	r2, r3, [r1]
	if(time >= 999999) time = 999999;
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bd0:	a30b      	add	r3, pc, #44	; (adr r3, 8000c00 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd6:	f7ff ff95 	bl	8000b04 <__aeabi_dcmpge>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d100      	bne.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0x3a>
}
 8000be0:	e005      	b.n	8000bee <HAL_TIM_PeriodElapsedCallback+0x46>
	if(time >= 999999) time = 999999;
 8000be2:	4909      	ldr	r1, [pc, #36]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000be4:	a306      	add	r3, pc, #24	; (adr r3, 8000c00 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bea:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	d2f1a9fc 	.word	0xd2f1a9fc
 8000bfc:	3f50624d 	.word	0x3f50624d
 8000c00:	00000000 	.word	0x00000000
 8000c04:	412e847e 	.word	0x412e847e
 8000c08:	20000320 	.word	0x20000320

08000c0c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_7){ //START
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	2b80      	cmp	r3, #128	; 0x80
 8000c1a:	d121      	bne.n	8000c60 <HAL_GPIO_EXTI_Callback+0x54>
		time = 0;
 8000c1c:	493f      	ldr	r1, [pc, #252]	; (8000d1c <HAL_GPIO_EXTI_Callback+0x110>)
 8000c1e:	f04f 0200 	mov.w	r2, #0
 8000c22:	f04f 0300 	mov.w	r3, #0
 8000c26:	e9c1 2300 	strd	r2, r3, [r1]

		if(is_running == SET){ //走行中に反応したら一個前の走行はコースアウト判定
 8000c2a:	4b3d      	ldr	r3, [pc, #244]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d10f      	bne.n	8000c52 <HAL_GPIO_EXTI_Callback+0x46>
			number_of_run++;
 8000c32:	4b3c      	ldr	r3, [pc, #240]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x118>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b3a      	ldr	r3, [pc, #232]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x118>)
 8000c3c:	701a      	strb	r2, [r3, #0]
			printf("Run %2d Course Out\r\n", number_of_run);
 8000c3e:	4b39      	ldr	r3, [pc, #228]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x118>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	4619      	mov	r1, r3
 8000c44:	4838      	ldr	r0, [pc, #224]	; (8000d28 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000c46:	f003 fed5 	bl	80049f4 <iprintf>
			printf("\r\nRunning...\r\n");
 8000c4a:	4838      	ldr	r0, [pc, #224]	; (8000d2c <HAL_GPIO_EXTI_Callback+0x120>)
 8000c4c:	f003 ff58 	bl	8004b00 <puts>

		if(number_of_run != 5){
			printf("\r\nRun %2d, Waiting...\r\n", number_of_run + 1);
		}
	}
}
 8000c50:	e05f      	b.n	8000d12 <HAL_GPIO_EXTI_Callback+0x106>
			is_running = SET;
 8000c52:	4b33      	ldr	r3, [pc, #204]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
			printf("Running...\r\n");
 8000c58:	4835      	ldr	r0, [pc, #212]	; (8000d30 <HAL_GPIO_EXTI_Callback+0x124>)
 8000c5a:	f003 ff51 	bl	8004b00 <puts>
}
 8000c5e:	e058      	b.n	8000d12 <HAL_GPIO_EXTI_Callback+0x106>
	else if(GPIO_Pin == GPIO_PIN_0 && is_running == SET){ //GOAL
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d155      	bne.n	8000d12 <HAL_GPIO_EXTI_Callback+0x106>
 8000c66:	4b2e      	ldr	r3, [pc, #184]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d151      	bne.n	8000d12 <HAL_GPIO_EXTI_Callback+0x106>
		number_of_run++;
 8000c6e:	4b2d      	ldr	r3, [pc, #180]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x118>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	3301      	adds	r3, #1
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b2b      	ldr	r3, [pc, #172]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x118>)
 8000c78:	701a      	strb	r2, [r3, #0]
		double record = time;
 8000c7a:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <HAL_GPIO_EXTI_Callback+0x110>)
 8000c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c80:	e9c7 2302 	strd	r2, r3, [r7, #8]
		if(number_of_run == 1){
 8000c84:	4b27      	ldr	r3, [pc, #156]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x118>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d105      	bne.n	8000c98 <HAL_GPIO_EXTI_Callback+0x8c>
			first_time = record;
 8000c8c:	4929      	ldr	r1, [pc, #164]	; (8000d34 <HAL_GPIO_EXTI_Callback+0x128>)
 8000c8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c92:	e9c1 2300 	strd	r2, r3, [r1]
 8000c96:	e026      	b.n	8000ce6 <HAL_GPIO_EXTI_Callback+0xda>
		else if(number_of_run == 2){
 8000c98:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x118>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d105      	bne.n	8000cac <HAL_GPIO_EXTI_Callback+0xa0>
			second_time = record;
 8000ca0:	4925      	ldr	r1, [pc, #148]	; (8000d38 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000ca2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ca6:	e9c1 2300 	strd	r2, r3, [r1]
 8000caa:	e01c      	b.n	8000ce6 <HAL_GPIO_EXTI_Callback+0xda>
		else if(number_of_run == 3){
 8000cac:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x118>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	d105      	bne.n	8000cc0 <HAL_GPIO_EXTI_Callback+0xb4>
			third_time = record;
 8000cb4:	4921      	ldr	r1, [pc, #132]	; (8000d3c <HAL_GPIO_EXTI_Callback+0x130>)
 8000cb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000cba:	e9c1 2300 	strd	r2, r3, [r1]
 8000cbe:	e012      	b.n	8000ce6 <HAL_GPIO_EXTI_Callback+0xda>
		else if(number_of_run == 4){
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x118>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b04      	cmp	r3, #4
 8000cc6:	d105      	bne.n	8000cd4 <HAL_GPIO_EXTI_Callback+0xc8>
			fourth_time = record;
 8000cc8:	491d      	ldr	r1, [pc, #116]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x134>)
 8000cca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000cce:	e9c1 2300 	strd	r2, r3, [r1]
 8000cd2:	e008      	b.n	8000ce6 <HAL_GPIO_EXTI_Callback+0xda>
		else if(number_of_run == 5){
 8000cd4:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x118>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b05      	cmp	r3, #5
 8000cda:	d104      	bne.n	8000ce6 <HAL_GPIO_EXTI_Callback+0xda>
			fifth_time = record;
 8000cdc:	4919      	ldr	r1, [pc, #100]	; (8000d44 <HAL_GPIO_EXTI_Callback+0x138>)
 8000cde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ce2:	e9c1 2300 	strd	r2, r3, [r1]
		is_running = RESET;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
		printf("Run %2d, %.4f\r\n", number_of_run, record);
 8000cec:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x118>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000cf6:	4814      	ldr	r0, [pc, #80]	; (8000d48 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000cf8:	f003 fe7c 	bl	80049f4 <iprintf>
		if(number_of_run != 5){
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x118>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b05      	cmp	r3, #5
 8000d02:	d006      	beq.n	8000d12 <HAL_GPIO_EXTI_Callback+0x106>
			printf("\r\nRun %2d, Waiting...\r\n", number_of_run + 1);
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x118>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480f      	ldr	r0, [pc, #60]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x140>)
 8000d0e:	f003 fe71 	bl	80049f4 <iprintf>
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000320 	.word	0x20000320
 8000d20:	2000031c 	.word	0x2000031c
 8000d24:	20000350 	.word	0x20000350
 8000d28:	08006e20 	.word	0x08006e20
 8000d2c:	08006e38 	.word	0x08006e38
 8000d30:	08006e48 	.word	0x08006e48
 8000d34:	20000328 	.word	0x20000328
 8000d38:	20000330 	.word	0x20000330
 8000d3c:	20000338 	.word	0x20000338
 8000d40:	20000340 	.word	0x20000340
 8000d44:	20000348 	.word	0x20000348
 8000d48:	08006e54 	.word	0x08006e54
 8000d4c:	08006e64 	.word	0x08006e64

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout,NULL);
 8000d54:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <main+0xa8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 fed7 	bl	8004b10 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d62:	f000 fb8b 	bl	800147c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d66:	f000 f869 	bl	8000e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6a:	f000 f95d 	bl	8001028 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d6e:	f000 f92b 	bl	8000fc8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d72:	f000 f8a5 	bl	8000ec0 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000d76:	f000 f8f1 	bl	8000f5c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000d7a:	4820      	ldr	r0, [pc, #128]	; (8000dfc <main+0xac>)
 8000d7c:	f002 f970 	bl	8003060 <HAL_TIM_Base_Start_IT>

  number_of_run = 0;
 8000d80:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <main+0xb0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
  printf("###Program Start###\r\n");
 8000d86:	481f      	ldr	r0, [pc, #124]	; (8000e04 <main+0xb4>)
 8000d88:	f003 feba 	bl	8004b00 <puts>

  printf("\r\nRun 1, Waiting...\r\n");
 8000d8c:	481e      	ldr	r0, [pc, #120]	; (8000e08 <main+0xb8>)
 8000d8e:	f003 feb7 	bl	8004b00 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(number_of_run == 5){
 8000d92:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <main+0xb0>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b05      	cmp	r3, #5
 8000d98:	d129      	bne.n	8000dee <main+0x9e>
		  printf("\r\n----Total Result----\r\n");
 8000d9a:	481c      	ldr	r0, [pc, #112]	; (8000e0c <main+0xbc>)
 8000d9c:	f003 feb0 	bl	8004b00 <puts>
		  printf("01: %.4f\r\n", first_time);
 8000da0:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <main+0xc0>)
 8000da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da6:	481b      	ldr	r0, [pc, #108]	; (8000e14 <main+0xc4>)
 8000da8:	f003 fe24 	bl	80049f4 <iprintf>
		  printf("02: %.4f\r\n", second_time);
 8000dac:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <main+0xc8>)
 8000dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db2:	481a      	ldr	r0, [pc, #104]	; (8000e1c <main+0xcc>)
 8000db4:	f003 fe1e 	bl	80049f4 <iprintf>
		  printf("03: %.4f\r\n", third_time);
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <main+0xd0>)
 8000dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dbe:	4819      	ldr	r0, [pc, #100]	; (8000e24 <main+0xd4>)
 8000dc0:	f003 fe18 	bl	80049f4 <iprintf>
		  printf("04: %.4f\r\n", fourth_time);
 8000dc4:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <main+0xd8>)
 8000dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dca:	4818      	ldr	r0, [pc, #96]	; (8000e2c <main+0xdc>)
 8000dcc:	f003 fe12 	bl	80049f4 <iprintf>
		  printf("05: %.4f\r\n", fifth_time);
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <main+0xe0>)
 8000dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd6:	4817      	ldr	r0, [pc, #92]	; (8000e34 <main+0xe4>)
 8000dd8:	f003 fe0c 	bl	80049f4 <iprintf>
		  printf("--------------------\r\n");
 8000ddc:	4816      	ldr	r0, [pc, #88]	; (8000e38 <main+0xe8>)
 8000dde:	f003 fe8f 	bl	8004b00 <puts>

		  printf("\r\nRun 1, Waiting...\r\n");
 8000de2:	4809      	ldr	r0, [pc, #36]	; (8000e08 <main+0xb8>)
 8000de4:	f003 fe8c 	bl	8004b00 <puts>
		  number_of_run = 0;
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <main+0xb0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_Delay(100);
 8000dee:	2064      	movs	r0, #100	; 0x64
 8000df0:	f000 fbaa 	bl	8001548 <HAL_Delay>
	  if(number_of_run == 5){
 8000df4:	e7cd      	b.n	8000d92 <main+0x42>
 8000df6:	bf00      	nop
 8000df8:	2000000c 	.word	0x2000000c
 8000dfc:	20000248 	.word	0x20000248
 8000e00:	20000350 	.word	0x20000350
 8000e04:	08006e7c 	.word	0x08006e7c
 8000e08:	08006e94 	.word	0x08006e94
 8000e0c:	08006eac 	.word	0x08006eac
 8000e10:	20000328 	.word	0x20000328
 8000e14:	08006ec4 	.word	0x08006ec4
 8000e18:	20000330 	.word	0x20000330
 8000e1c:	08006ed0 	.word	0x08006ed0
 8000e20:	20000338 	.word	0x20000338
 8000e24:	08006edc 	.word	0x08006edc
 8000e28:	20000340 	.word	0x20000340
 8000e2c:	08006ee8 	.word	0x08006ee8
 8000e30:	20000348 	.word	0x20000348
 8000e34:	08006ef4 	.word	0x08006ef4
 8000e38:	08006f00 	.word	0x08006f00

08000e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b090      	sub	sp, #64	; 0x40
 8000e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e42:	f107 0318 	add.w	r3, r7, #24
 8000e46:	2228      	movs	r2, #40	; 0x28
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f003 f960 	bl	8004110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e62:	2301      	movs	r3, #1
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e66:	2310      	movs	r3, #16
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e72:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e78:	f107 0318 	add.w	r3, r7, #24
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 fe23 	bl	8001ac8 <HAL_RCC_OscConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e88:	f000 f92a 	bl	80010e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e90:	2302      	movs	r3, #2
 8000e92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2102      	movs	r1, #2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f001 fe4c 	bl	8002b44 <HAL_RCC_ClockConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000eb2:	f000 f915 	bl	80010e0 <Error_Handler>
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	3740      	adds	r7, #64	; 0x40
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ede:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <MX_TIM2_Init+0x98>)
 8000ee0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <MX_TIM2_Init+0x98>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_TIM2_Init+0x98>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <MX_TIM2_Init+0x98>)
 8000ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <MX_TIM2_Init+0x98>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_TIM2_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f06:	4814      	ldr	r0, [pc, #80]	; (8000f58 <MX_TIM2_Init+0x98>)
 8000f08:	f002 f852 	bl	8002fb0 <HAL_TIM_Base_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f12:	f000 f8e5 	bl	80010e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4619      	mov	r1, r3
 8000f22:	480d      	ldr	r0, [pc, #52]	; (8000f58 <MX_TIM2_Init+0x98>)
 8000f24:	f002 fa17 	bl	8003356 <HAL_TIM_ConfigClockSource>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f2e:	f000 f8d7 	bl	80010e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4806      	ldr	r0, [pc, #24]	; (8000f58 <MX_TIM2_Init+0x98>)
 8000f40:	f002 fc0c 	bl	800375c <HAL_TIMEx_MasterConfigSynchronization>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f4a:	f000 f8c9 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	3720      	adds	r7, #32
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200001fc 	.word	0x200001fc

08000f5c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <MX_TIM6_Init+0x64>)
 8000f6e:	4a15      	ldr	r2, [pc, #84]	; (8000fc4 <MX_TIM6_Init+0x68>)
 8000f70:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63;
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <MX_TIM6_Init+0x64>)
 8000f74:	223f      	movs	r2, #63	; 0x3f
 8000f76:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_TIM6_Init+0x64>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <MX_TIM6_Init+0x64>)
 8000f80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f84:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_TIM6_Init+0x64>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <MX_TIM6_Init+0x64>)
 8000f8e:	f002 f80f 	bl	8002fb0 <HAL_TIM_Base_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f98:	f000 f8a2 	bl	80010e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_TIM6_Init+0x64>)
 8000faa:	f002 fbd7 	bl	800375c <HAL_TIMEx_MasterConfigSynchronization>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000fb4:	f000 f894 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000248 	.word	0x20000248
 8000fc4:	40001000 	.word	0x40001000

08000fc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_USART2_UART_Init+0x58>)
 8000fce:	4a15      	ldr	r2, [pc, #84]	; (8001024 <MX_USART2_UART_Init+0x5c>)
 8000fd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <MX_USART2_UART_Init+0x58>)
 8000fd4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_USART2_UART_Init+0x58>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_USART2_UART_Init+0x58>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_USART2_UART_Init+0x58>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_USART2_UART_Init+0x58>)
 8000fee:	220c      	movs	r2, #12
 8000ff0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <MX_USART2_UART_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_USART2_UART_Init+0x58>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <MX_USART2_UART_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_USART2_UART_Init+0x58>)
 8001006:	2200      	movs	r2, #0
 8001008:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_USART2_UART_Init+0x58>)
 800100c:	f002 fc32 	bl	8003874 <HAL_UART_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001016:	f000 f863 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000294 	.word	0x20000294
 8001024:	40004400 	.word	0x40004400

08001028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800103e:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <MX_GPIO_Init+0x8c>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <MX_GPIO_Init+0x8c>)
 8001044:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001048:	6153      	str	r3, [r2, #20]
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_GPIO_Init+0x8c>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MX_GPIO_Init+0x8c>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	4a16      	ldr	r2, [pc, #88]	; (80010b4 <MX_GPIO_Init+0x8c>)
 800105c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001060:	6153      	str	r3, [r2, #20]
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_GPIO_Init+0x8c>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA0 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 800106e:	2381      	movs	r3, #129	; 0x81
 8001070:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001072:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	4619      	mov	r1, r3
 8001082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001086:	f000 fb95 	bl	80017b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	2006      	movs	r0, #6
 8001090:	f000 fb59 	bl	8001746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001094:	2006      	movs	r0, #6
 8001096:	f000 fb72 	bl	800177e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	2017      	movs	r0, #23
 80010a0:	f000 fb51 	bl	8001746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010a4:	2017      	movs	r0, #23
 80010a6:	f000 fb6a 	bl	800177e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010aa:	bf00      	nop
 80010ac:	3720      	adds	r7, #32
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40021000 	.word	0x40021000

080010b8 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	230a      	movs	r3, #10
 80010ca:	68b9      	ldr	r1, [r7, #8]
 80010cc:	4803      	ldr	r0, [pc, #12]	; (80010dc <_write+0x24>)
 80010ce:	f002 fc1f 	bl	8003910 <HAL_UART_Transmit>
  return len;
 80010d2:	687b      	ldr	r3, [r7, #4]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000294 	.word	0x20000294

080010e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
}
 80010e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <Error_Handler+0x8>
	...

080010ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_MspInit+0x44>)
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <HAL_MspInit+0x44>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6193      	str	r3, [r2, #24]
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_MspInit+0x44>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_MspInit+0x44>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_MspInit+0x44>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001114:	61d3      	str	r3, [r2, #28]
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_MspInit+0x44>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000

08001134 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001144:	d10c      	bne.n	8001160 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <HAL_TIM_Base_MspInit+0x68>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	4a14      	ldr	r2, [pc, #80]	; (800119c <HAL_TIM_Base_MspInit+0x68>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	61d3      	str	r3, [r2, #28]
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_TIM_Base_MspInit+0x68>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800115e:	e018      	b.n	8001192 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <HAL_TIM_Base_MspInit+0x6c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d113      	bne.n	8001192 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_TIM_Base_MspInit+0x68>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4a0b      	ldr	r2, [pc, #44]	; (800119c <HAL_TIM_Base_MspInit+0x68>)
 8001170:	f043 0310 	orr.w	r3, r3, #16
 8001174:	61d3      	str	r3, [r2, #28]
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <HAL_TIM_Base_MspInit+0x68>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	f003 0310 	and.w	r3, r3, #16
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	2036      	movs	r0, #54	; 0x36
 8001188:	f000 fadd 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 800118c:	2036      	movs	r0, #54	; 0x36
 800118e:	f000 faf6 	bl	800177e <HAL_NVIC_EnableIRQ>
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000
 80011a0:	40001000 	.word	0x40001000

080011a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a18      	ldr	r2, [pc, #96]	; (8001224 <HAL_UART_MspInit+0x80>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d129      	bne.n	800121a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_UART_MspInit+0x84>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	4a17      	ldr	r2, [pc, #92]	; (8001228 <HAL_UART_MspInit+0x84>)
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d0:	61d3      	str	r3, [r2, #28]
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_UART_MspInit+0x84>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_UART_MspInit+0x84>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	4a11      	ldr	r2, [pc, #68]	; (8001228 <HAL_UART_MspInit+0x84>)
 80011e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e8:	6153      	str	r3, [r2, #20]
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <HAL_UART_MspInit+0x84>)
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80011f6:	f248 0304 	movw	r3, #32772	; 0x8004
 80011fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001208:	2307      	movs	r3, #7
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001216:	f000 facd 	bl	80017b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	; 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40004400 	.word	0x40004400
 8001228:	40021000 	.word	0x40021000

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <NMI_Handler+0x4>

08001232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <MemManage_Handler+0x4>

0800123e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <BusFault_Handler+0x4>

08001244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <UsageFault_Handler+0x4>

0800124a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001278:	f000 f946 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001284:	2001      	movs	r0, #1
 8001286:	f000 fc07 	bl	8001a98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}

0800128e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001292:	2080      	movs	r0, #128	; 0x80
 8001294:	f000 fc00 	bl	8001a98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <TIM6_DAC1_IRQHandler+0x10>)
 80012a2:	f001 ff39 	bl	8003118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000248 	.word	0x20000248

080012b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return 1;
 80012b4:	2301      	movs	r3, #1
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <_kill>:

int _kill(int pid, int sig)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012ca:	f002 fef7 	bl	80040bc <__errno>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2216      	movs	r2, #22
 80012d2:	601a      	str	r2, [r3, #0]
  return -1;
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_exit>:

void _exit (int status)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ffe7 	bl	80012c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012f2:	e7fe      	b.n	80012f2 <_exit+0x12>

080012f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	e00a      	b.n	800131c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001306:	f3af 8000 	nop.w
 800130a:	4601      	mov	r1, r0
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	60ba      	str	r2, [r7, #8]
 8001312:	b2ca      	uxtb	r2, r1
 8001314:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	429a      	cmp	r2, r3
 8001322:	dbf0      	blt.n	8001306 <_read+0x12>
  }

  return len;
 8001324:	687b      	ldr	r3, [r7, #4]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <_close>:
  }
  return len;
}

int _close(int file)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001356:	605a      	str	r2, [r3, #4]
  return 0;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <_isatty>:

int _isatty(int file)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <_sbrk+0x5c>)
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <_sbrk+0x60>)
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <_sbrk+0x64>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <_sbrk+0x68>)
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d207      	bcs.n	80013d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c8:	f002 fe78 	bl	80040bc <__errno>
 80013cc:	4603      	mov	r3, r0
 80013ce:	220c      	movs	r2, #12
 80013d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e009      	b.n	80013ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <_sbrk+0x64>)
 80013e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20003000 	.word	0x20003000
 80013f8:	00000400 	.word	0x00000400
 80013fc:	20000354 	.word	0x20000354
 8001400:	20000370 	.word	0x20000370

08001404 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <SystemInit+0x20>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <SystemInit+0x20>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001460 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800142c:	f7ff ffea 	bl	8001404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001430:	480c      	ldr	r0, [pc, #48]	; (8001464 <LoopForever+0x6>)
  ldr r1, =_edata
 8001432:	490d      	ldr	r1, [pc, #52]	; (8001468 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001434:	4a0d      	ldr	r2, [pc, #52]	; (800146c <LoopForever+0xe>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001438:	e002      	b.n	8001440 <LoopCopyDataInit>

0800143a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800143c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143e:	3304      	adds	r3, #4

08001440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001444:	d3f9      	bcc.n	800143a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001448:	4c0a      	ldr	r4, [pc, #40]	; (8001474 <LoopForever+0x16>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800144c:	e001      	b.n	8001452 <LoopFillZerobss>

0800144e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001450:	3204      	adds	r2, #4

08001452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001454:	d3fb      	bcc.n	800144e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001456:	f002 fe37 	bl	80040c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800145a:	f7ff fc79 	bl	8000d50 <main>

0800145e <LoopForever>:

LoopForever:
    b LoopForever
 800145e:	e7fe      	b.n	800145e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001460:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001468:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800146c:	08007334 	.word	0x08007334
  ldr r2, =_sbss
 8001470:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001474:	2000036c 	.word	0x2000036c

08001478 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC1_2_IRQHandler>
	...

0800147c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_Init+0x28>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_Init+0x28>)
 8001486:	f043 0310 	orr.w	r3, r3, #16
 800148a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148c:	2003      	movs	r0, #3
 800148e:	f000 f94f 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001492:	2000      	movs	r0, #0
 8001494:	f000 f808 	bl	80014a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001498:	f7ff fe28 	bl	80010ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40022000 	.word	0x40022000

080014a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x54>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_InitTick+0x58>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014be:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f967 	bl	800179a <HAL_SYSTICK_Config>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00e      	b.n	80014f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d80a      	bhi.n	80014f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014dc:	2200      	movs	r2, #0
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f000 f92f 	bl	8001746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e8:	4a06      	ldr	r2, [pc, #24]	; (8001504 <HAL_InitTick+0x5c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000000 	.word	0x20000000
 8001500:	20000008 	.word	0x20000008
 8001504:	20000004 	.word	0x20000004

08001508 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x20>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x24>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <HAL_IncTick+0x24>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000008 	.word	0x20000008
 800152c:	20000358 	.word	0x20000358

08001530 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;  
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_GetTick+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000358 	.word	0x20000358

08001548 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff ffee 	bl	8001530 <HAL_GetTick>
 8001554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001560:	d005      	beq.n	800156e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_Delay+0x44>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800156e:	bf00      	nop
 8001570:	f7ff ffde 	bl	8001530 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	429a      	cmp	r2, r3
 800157e:	d8f7      	bhi.n	8001570 <HAL_Delay+0x28>
  {
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000008 	.word	0x20000008

08001590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ac:	4013      	ands	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c2:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	60d3      	str	r3, [r2, #12]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <__NVIC_GetPriorityGrouping+0x18>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	f003 0307 	and.w	r3, r3, #7
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	db0b      	blt.n	800161e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	4907      	ldr	r1, [pc, #28]	; (800162c <__NVIC_EnableIRQ+0x38>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	2001      	movs	r0, #1
 8001616:	fa00 f202 	lsl.w	r2, r0, r2
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000e100 	.word	0xe000e100

08001630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001640:	2b00      	cmp	r3, #0
 8001642:	db0a      	blt.n	800165a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	490c      	ldr	r1, [pc, #48]	; (800167c <__NVIC_SetPriority+0x4c>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	0112      	lsls	r2, r2, #4
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	440b      	add	r3, r1
 8001654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001658:	e00a      	b.n	8001670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4908      	ldr	r1, [pc, #32]	; (8001680 <__NVIC_SetPriority+0x50>)
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	3b04      	subs	r3, #4
 8001668:	0112      	lsls	r2, r2, #4
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	440b      	add	r3, r1
 800166e:	761a      	strb	r2, [r3, #24]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000e100 	.word	0xe000e100
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	; 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f1c3 0307 	rsb	r3, r3, #7
 800169e:	2b04      	cmp	r3, #4
 80016a0:	bf28      	it	cs
 80016a2:	2304      	movcs	r3, #4
 80016a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3304      	adds	r3, #4
 80016aa:	2b06      	cmp	r3, #6
 80016ac:	d902      	bls.n	80016b4 <NVIC_EncodePriority+0x30>
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3b03      	subs	r3, #3
 80016b2:	e000      	b.n	80016b6 <NVIC_EncodePriority+0x32>
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43da      	mvns	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	401a      	ands	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016cc:	f04f 31ff 	mov.w	r1, #4294967295
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	43d9      	mvns	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	4313      	orrs	r3, r2
         );
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3724      	adds	r7, #36	; 0x24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016fc:	d301      	bcc.n	8001702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fe:	2301      	movs	r3, #1
 8001700:	e00f      	b.n	8001722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <SysTick_Config+0x40>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170a:	210f      	movs	r1, #15
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f7ff ff8e 	bl	8001630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <SysTick_Config+0x40>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <SysTick_Config+0x40>)
 800171c:	2207      	movs	r2, #7
 800171e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	e000e010 	.word	0xe000e010

08001730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff29 	bl	8001590 <__NVIC_SetPriorityGrouping>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001758:	f7ff ff3e 	bl	80015d8 <__NVIC_GetPriorityGrouping>
 800175c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f7ff ff8e 	bl	8001684 <NVIC_EncodePriority>
 8001768:	4602      	mov	r2, r0
 800176a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5d 	bl	8001630 <__NVIC_SetPriority>
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff31 	bl	80015f4 <__NVIC_EnableIRQ>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ffa2 	bl	80016ec <SysTick_Config>
 80017a8:	4603      	mov	r3, r0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c2:	e14e      	b.n	8001a62 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	2101      	movs	r1, #1
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	fa01 f303 	lsl.w	r3, r1, r3
 80017d0:	4013      	ands	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 8140 	beq.w	8001a5c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d005      	beq.n	80017f4 <HAL_GPIO_Init+0x40>
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d130      	bne.n	8001856 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	2203      	movs	r2, #3
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4013      	ands	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800182a:	2201      	movs	r2, #1
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	091b      	lsrs	r3, r3, #4
 8001840:	f003 0201 	and.w	r2, r3, #1
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	2b03      	cmp	r3, #3
 8001860:	d017      	beq.n	8001892 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	2203      	movs	r2, #3
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d123      	bne.n	80018e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	08da      	lsrs	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3208      	adds	r2, #8
 80018a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	220f      	movs	r2, #15
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	691a      	ldr	r2, [r3, #16]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	08da      	lsrs	r2, r3, #3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3208      	adds	r2, #8
 80018e0:	6939      	ldr	r1, [r7, #16]
 80018e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0203 	and.w	r2, r3, #3
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 809a 	beq.w	8001a5c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001928:	4b55      	ldr	r3, [pc, #340]	; (8001a80 <HAL_GPIO_Init+0x2cc>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	4a54      	ldr	r2, [pc, #336]	; (8001a80 <HAL_GPIO_Init+0x2cc>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6193      	str	r3, [r2, #24]
 8001934:	4b52      	ldr	r3, [pc, #328]	; (8001a80 <HAL_GPIO_Init+0x2cc>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001940:	4a50      	ldr	r2, [pc, #320]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	220f      	movs	r2, #15
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800196a:	d013      	beq.n	8001994 <HAL_GPIO_Init+0x1e0>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a46      	ldr	r2, [pc, #280]	; (8001a88 <HAL_GPIO_Init+0x2d4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d00d      	beq.n	8001990 <HAL_GPIO_Init+0x1dc>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a45      	ldr	r2, [pc, #276]	; (8001a8c <HAL_GPIO_Init+0x2d8>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d007      	beq.n	800198c <HAL_GPIO_Init+0x1d8>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a44      	ldr	r2, [pc, #272]	; (8001a90 <HAL_GPIO_Init+0x2dc>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d101      	bne.n	8001988 <HAL_GPIO_Init+0x1d4>
 8001984:	2303      	movs	r3, #3
 8001986:	e006      	b.n	8001996 <HAL_GPIO_Init+0x1e2>
 8001988:	2305      	movs	r3, #5
 800198a:	e004      	b.n	8001996 <HAL_GPIO_Init+0x1e2>
 800198c:	2302      	movs	r3, #2
 800198e:	e002      	b.n	8001996 <HAL_GPIO_Init+0x1e2>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_GPIO_Init+0x1e2>
 8001994:	2300      	movs	r3, #0
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	f002 0203 	and.w	r2, r2, #3
 800199c:	0092      	lsls	r2, r2, #2
 800199e:	4093      	lsls	r3, r2
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019a6:	4937      	ldr	r1, [pc, #220]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019b4:	4b37      	ldr	r3, [pc, #220]	; (8001a94 <HAL_GPIO_Init+0x2e0>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019d8:	4a2e      	ldr	r2, [pc, #184]	; (8001a94 <HAL_GPIO_Init+0x2e0>)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019de:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <HAL_GPIO_Init+0x2e0>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a02:	4a24      	ldr	r2, [pc, #144]	; (8001a94 <HAL_GPIO_Init+0x2e0>)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a08:	4b22      	ldr	r3, [pc, #136]	; (8001a94 <HAL_GPIO_Init+0x2e0>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a2c:	4a19      	ldr	r2, [pc, #100]	; (8001a94 <HAL_GPIO_Init+0x2e0>)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <HAL_GPIO_Init+0x2e0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a56:	4a0f      	ldr	r2, [pc, #60]	; (8001a94 <HAL_GPIO_Init+0x2e0>)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f47f aea9 	bne.w	80017c4 <HAL_GPIO_Init+0x10>
  }
}
 8001a72:	bf00      	nop
 8001a74:	bf00      	nop
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40010000 	.word	0x40010000
 8001a88:	48000400 	.word	0x48000400
 8001a8c:	48000800 	.word	0x48000800
 8001a90:	48000c00 	.word	0x48000c00
 8001a94:	40010400 	.word	0x40010400

08001a98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d006      	beq.n	8001abc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aae:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f8a8 	bl	8000c0c <HAL_GPIO_EXTI_Callback>
  }
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40010400 	.word	0x40010400

08001ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ad8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ade:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d102      	bne.n	8001aee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	f001 b823 	b.w	8002b34 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 817d 	beq.w	8001dfe <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b04:	4bbc      	ldr	r3, [pc, #752]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 030c 	and.w	r3, r3, #12
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d00c      	beq.n	8001b2a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b10:	4bb9      	ldr	r3, [pc, #740]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d15c      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x10e>
 8001b1c:	4bb6      	ldr	r3, [pc, #728]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b28:	d155      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x10e>
 8001b2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b2e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b3e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b42:	fab3 f383 	clz	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	095b      	lsrs	r3, r3, #5
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d102      	bne.n	8001b5c <HAL_RCC_OscConfig+0x94>
 8001b56:	4ba8      	ldr	r3, [pc, #672]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	e015      	b.n	8001b88 <HAL_RCC_OscConfig+0xc0>
 8001b5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b60:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001b68:	fa93 f3a3 	rbit	r3, r3
 8001b6c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b74:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b78:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001b84:	4b9c      	ldr	r3, [pc, #624]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b8c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001b90:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b94:	fa92 f2a2 	rbit	r2, r2
 8001b98:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001b9c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001ba0:	fab2 f282 	clz	r2, r2
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	f042 0220 	orr.w	r2, r2, #32
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	f002 021f 	and.w	r2, r2, #31
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 811f 	beq.w	8001dfc <HAL_RCC_OscConfig+0x334>
 8001bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f040 8116 	bne.w	8001dfc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	f000 bfaf 	b.w	8002b34 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be6:	d106      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x12e>
 8001be8:	4b83      	ldr	r3, [pc, #524]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a82      	ldr	r2, [pc, #520]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	e036      	b.n	8001c64 <HAL_RCC_OscConfig+0x19c>
 8001bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10c      	bne.n	8001c20 <HAL_RCC_OscConfig+0x158>
 8001c06:	4b7c      	ldr	r3, [pc, #496]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a7b      	ldr	r2, [pc, #492]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	4b79      	ldr	r3, [pc, #484]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a78      	ldr	r2, [pc, #480]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	e021      	b.n	8001c64 <HAL_RCC_OscConfig+0x19c>
 8001c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x184>
 8001c32:	4b71      	ldr	r3, [pc, #452]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a70      	ldr	r2, [pc, #448]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b6e      	ldr	r3, [pc, #440]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a6d      	ldr	r2, [pc, #436]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e00b      	b.n	8001c64 <HAL_RCC_OscConfig+0x19c>
 8001c4c:	4b6a      	ldr	r3, [pc, #424]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a69      	ldr	r2, [pc, #420]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	4b67      	ldr	r3, [pc, #412]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a66      	ldr	r2, [pc, #408]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c62:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c64:	4b64      	ldr	r3, [pc, #400]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	f023 020f 	bic.w	r2, r3, #15
 8001c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	495f      	ldr	r1, [pc, #380]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d059      	beq.n	8001d42 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7ff fc4f 	bl	8001530 <HAL_GetTick>
 8001c92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c98:	f7ff fc4a 	bl	8001530 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b64      	cmp	r3, #100	; 0x64
 8001ca6:	d902      	bls.n	8001cae <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	f000 bf43 	b.w	8002b34 <HAL_RCC_OscConfig+0x106c>
 8001cae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cb2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001cba:	fa93 f3a3 	rbit	r3, r3
 8001cbe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001cc2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	095b      	lsrs	r3, r3, #5
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d102      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x218>
 8001cda:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	e015      	b.n	8001d0c <HAL_RCC_OscConfig+0x244>
 8001ce0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ce4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001cf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cf8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001cfc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001d08:	4b3b      	ldr	r3, [pc, #236]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d10:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001d14:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d18:	fa92 f2a2 	rbit	r2, r2
 8001d1c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001d20:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001d24:	fab2 f282 	clz	r2, r2
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	f042 0220 	orr.w	r2, r2, #32
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	f002 021f 	and.w	r2, r2, #31
 8001d34:	2101      	movs	r1, #1
 8001d36:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0ab      	beq.n	8001c98 <HAL_RCC_OscConfig+0x1d0>
 8001d40:	e05d      	b.n	8001dfe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d42:	f7ff fbf5 	bl	8001530 <HAL_GetTick>
 8001d46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	e00a      	b.n	8001d62 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff fbf0 	bl	8001530 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b64      	cmp	r3, #100	; 0x64
 8001d5a:	d902      	bls.n	8001d62 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	f000 bee9 	b.w	8002b34 <HAL_RCC_OscConfig+0x106c>
 8001d62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d66:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001d76:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7a:	fab3 f383 	clz	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	095b      	lsrs	r3, r3, #5
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d102      	bne.n	8001d94 <HAL_RCC_OscConfig+0x2cc>
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	e015      	b.n	8001dc0 <HAL_RCC_OscConfig+0x2f8>
 8001d94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d98:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001da0:	fa93 f3a3 	rbit	r3, r3
 8001da4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001da8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dac:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001db0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dc4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001dc8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001dcc:	fa92 f2a2 	rbit	r2, r2
 8001dd0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001dd4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001dd8:	fab2 f282 	clz	r2, r2
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	f042 0220 	orr.w	r2, r2, #32
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	f002 021f 	and.w	r2, r2, #31
 8001de8:	2101      	movs	r1, #1
 8001dea:	fa01 f202 	lsl.w	r2, r1, r2
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1ab      	bne.n	8001d4c <HAL_RCC_OscConfig+0x284>
 8001df4:	e003      	b.n	8001dfe <HAL_RCC_OscConfig+0x336>
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 817d 	beq.w	800210e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e14:	4ba6      	ldr	r3, [pc, #664]	; (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 030c 	and.w	r3, r3, #12
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00b      	beq.n	8001e38 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e20:	4ba3      	ldr	r3, [pc, #652]	; (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d172      	bne.n	8001f12 <HAL_RCC_OscConfig+0x44a>
 8001e2c:	4ba0      	ldr	r3, [pc, #640]	; (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d16c      	bne.n	8001f12 <HAL_RCC_OscConfig+0x44a>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001e42:	fa93 f3a3 	rbit	r3, r3
 8001e46:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001e4a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	095b      	lsrs	r3, r3, #5
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d102      	bne.n	8001e68 <HAL_RCC_OscConfig+0x3a0>
 8001e62:	4b93      	ldr	r3, [pc, #588]	; (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	e013      	b.n	8001e90 <HAL_RCC_OscConfig+0x3c8>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e80:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001e8c:	4b88      	ldr	r3, [pc, #544]	; (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	2202      	movs	r2, #2
 8001e92:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001e96:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e9a:	fa92 f2a2 	rbit	r2, r2
 8001e9e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001ea2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001ea6:	fab2 f282 	clz	r2, r2
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	f042 0220 	orr.w	r2, r2, #32
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	f002 021f 	and.w	r2, r2, #31
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00a      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x410>
 8001ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d002      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	f000 be2e 	b.w	8002b34 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed8:	4b75      	ldr	r3, [pc, #468]	; (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	21f8      	movs	r1, #248	; 0xf8
 8001eee:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ef6:	fa91 f1a1 	rbit	r1, r1
 8001efa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001efe:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001f02:	fab1 f181 	clz	r1, r1
 8001f06:	b2c9      	uxtb	r1, r1
 8001f08:	408b      	lsls	r3, r1
 8001f0a:	4969      	ldr	r1, [pc, #420]	; (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f10:	e0fd      	b.n	800210e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 8088 	beq.w	8002034 <HAL_RCC_OscConfig+0x56c>
 8001f24:	2301      	movs	r3, #1
 8001f26:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001f36:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7ff faee 	bl	8001530 <HAL_GetTick>
 8001f54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f58:	e00a      	b.n	8001f70 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f5a:	f7ff fae9 	bl	8001530 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d902      	bls.n	8001f70 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	f000 bde2 	b.w	8002b34 <HAL_RCC_OscConfig+0x106c>
 8001f70:	2302      	movs	r3, #2
 8001f72:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001f82:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	095b      	lsrs	r3, r3, #5
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d102      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4d8>
 8001f9a:	4b45      	ldr	r3, [pc, #276]	; (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	e013      	b.n	8001fc8 <HAL_RCC_OscConfig+0x500>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001fb8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001fc4:	4b3a      	ldr	r3, [pc, #232]	; (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	2202      	movs	r2, #2
 8001fca:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001fce:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001fd2:	fa92 f2a2 	rbit	r2, r2
 8001fd6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001fda:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001fde:	fab2 f282 	clz	r2, r2
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	f042 0220 	orr.w	r2, r2, #32
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	f002 021f 	and.w	r2, r2, #31
 8001fee:	2101      	movs	r1, #1
 8001ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0af      	beq.n	8001f5a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffa:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002006:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	21f8      	movs	r1, #248	; 0xf8
 8002010:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002018:	fa91 f1a1 	rbit	r1, r1
 800201c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002020:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002024:	fab1 f181 	clz	r1, r1
 8002028:	b2c9      	uxtb	r1, r1
 800202a:	408b      	lsls	r3, r1
 800202c:	4920      	ldr	r1, [pc, #128]	; (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]
 8002032:	e06c      	b.n	800210e <HAL_RCC_OscConfig+0x646>
 8002034:	2301      	movs	r3, #1
 8002036:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002046:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204a:	fab3 f383 	clz	r3, r3
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002054:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	461a      	mov	r2, r3
 800205c:	2300      	movs	r3, #0
 800205e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7ff fa66 	bl	8001530 <HAL_GetTick>
 8002064:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002068:	e00a      	b.n	8002080 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800206a:	f7ff fa61 	bl	8001530 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d902      	bls.n	8002080 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	f000 bd5a 	b.w	8002b34 <HAL_RCC_OscConfig+0x106c>
 8002080:	2302      	movs	r3, #2
 8002082:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	095b      	lsrs	r3, r3, #5
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d104      	bne.n	80020b4 <HAL_RCC_OscConfig+0x5ec>
 80020aa:	4b01      	ldr	r3, [pc, #4]	; (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	e015      	b.n	80020dc <HAL_RCC_OscConfig+0x614>
 80020b0:	40021000 	.word	0x40021000
 80020b4:	2302      	movs	r3, #2
 80020b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80020c6:	2302      	movs	r3, #2
 80020c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80020cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80020d0:	fa93 f3a3 	rbit	r3, r3
 80020d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80020d8:	4bc8      	ldr	r3, [pc, #800]	; (80023fc <HAL_RCC_OscConfig+0x934>)
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	2202      	movs	r2, #2
 80020de:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80020e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80020e6:	fa92 f2a2 	rbit	r2, r2
 80020ea:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80020ee:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80020f2:	fab2 f282 	clz	r2, r2
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	f042 0220 	orr.w	r2, r2, #32
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	f002 021f 	and.w	r2, r2, #31
 8002102:	2101      	movs	r1, #1
 8002104:	fa01 f202 	lsl.w	r2, r1, r2
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1ad      	bne.n	800206a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800210e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8110 	beq.w	8002344 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002128:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d079      	beq.n	8002228 <HAL_RCC_OscConfig+0x760>
 8002134:	2301      	movs	r3, #1
 8002136:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002146:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	4bab      	ldr	r3, [pc, #684]	; (8002400 <HAL_RCC_OscConfig+0x938>)
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	461a      	mov	r2, r3
 800215a:	2301      	movs	r3, #1
 800215c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215e:	f7ff f9e7 	bl	8001530 <HAL_GetTick>
 8002162:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002166:	e00a      	b.n	800217e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002168:	f7ff f9e2 	bl	8001530 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d902      	bls.n	800217e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	f000 bcdb 	b.w	8002b34 <HAL_RCC_OscConfig+0x106c>
 800217e:	2302      	movs	r3, #2
 8002180:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002188:	fa93 f3a3 	rbit	r3, r3
 800218c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002194:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002198:	2202      	movs	r2, #2
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	fa93 f2a3 	rbit	r2, r3
 80021aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80021bc:	2202      	movs	r2, #2
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	fa93 f2a3 	rbit	r2, r3
 80021ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021d6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d8:	4b88      	ldr	r3, [pc, #544]	; (80023fc <HAL_RCC_OscConfig+0x934>)
 80021da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021e4:	2102      	movs	r1, #2
 80021e6:	6019      	str	r1, [r3, #0]
 80021e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	fa93 f1a3 	rbit	r1, r3
 80021f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80021fe:	6019      	str	r1, [r3, #0]
  return result;
 8002200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002204:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	fab3 f383 	clz	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	2101      	movs	r1, #1
 800221c:	fa01 f303 	lsl.w	r3, r1, r3
 8002220:	4013      	ands	r3, r2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0a0      	beq.n	8002168 <HAL_RCC_OscConfig+0x6a0>
 8002226:	e08d      	b.n	8002344 <HAL_RCC_OscConfig+0x87c>
 8002228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002230:	2201      	movs	r2, #1
 8002232:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002238:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	fa93 f2a3 	rbit	r2, r3
 8002242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002246:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800224a:	601a      	str	r2, [r3, #0]
  return result;
 800224c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002250:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002254:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002256:	fab3 f383 	clz	r3, r3
 800225a:	b2db      	uxtb	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	4b68      	ldr	r3, [pc, #416]	; (8002400 <HAL_RCC_OscConfig+0x938>)
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	461a      	mov	r2, r3
 8002266:	2300      	movs	r3, #0
 8002268:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226a:	f7ff f961 	bl	8001530 <HAL_GetTick>
 800226e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002272:	e00a      	b.n	800228a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002274:	f7ff f95c 	bl	8001530 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d902      	bls.n	800228a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	f000 bc55 	b.w	8002b34 <HAL_RCC_OscConfig+0x106c>
 800228a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002292:	2202      	movs	r2, #2
 8002294:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	fa93 f2a3 	rbit	r2, r3
 80022a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022b6:	2202      	movs	r2, #2
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	fa93 f2a3 	rbit	r2, r3
 80022c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80022da:	2202      	movs	r2, #2
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	fa93 f2a3 	rbit	r2, r3
 80022ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80022f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f6:	4b41      	ldr	r3, [pc, #260]	; (80023fc <HAL_RCC_OscConfig+0x934>)
 80022f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002302:	2102      	movs	r1, #2
 8002304:	6019      	str	r1, [r3, #0]
 8002306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	fa93 f1a3 	rbit	r1, r3
 8002314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002318:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800231c:	6019      	str	r1, [r3, #0]
  return result;
 800231e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002322:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	fab3 f383 	clz	r3, r3
 800232c:	b2db      	uxtb	r3, r3
 800232e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002332:	b2db      	uxtb	r3, r3
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	2101      	movs	r1, #1
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	4013      	ands	r3, r2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d197      	bne.n	8002274 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002348:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 81a1 	beq.w	800269c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002360:	4b26      	ldr	r3, [pc, #152]	; (80023fc <HAL_RCC_OscConfig+0x934>)
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d116      	bne.n	800239a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236c:	4b23      	ldr	r3, [pc, #140]	; (80023fc <HAL_RCC_OscConfig+0x934>)
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	4a22      	ldr	r2, [pc, #136]	; (80023fc <HAL_RCC_OscConfig+0x934>)
 8002372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002376:	61d3      	str	r3, [r2, #28]
 8002378:	4b20      	ldr	r3, [pc, #128]	; (80023fc <HAL_RCC_OscConfig+0x934>)
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002384:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002392:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002394:	2301      	movs	r3, #1
 8002396:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239a:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <HAL_RCC_OscConfig+0x93c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d11a      	bne.n	80023dc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a6:	4b17      	ldr	r3, [pc, #92]	; (8002404 <HAL_RCC_OscConfig+0x93c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a16      	ldr	r2, [pc, #88]	; (8002404 <HAL_RCC_OscConfig+0x93c>)
 80023ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b2:	f7ff f8bd 	bl	8001530 <HAL_GetTick>
 80023b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ba:	e009      	b.n	80023d0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023bc:	f7ff f8b8 	bl	8001530 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b64      	cmp	r3, #100	; 0x64
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e3b1      	b.n	8002b34 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <HAL_RCC_OscConfig+0x93c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ef      	beq.n	80023bc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d10d      	bne.n	8002408 <HAL_RCC_OscConfig+0x940>
 80023ec:	4b03      	ldr	r3, [pc, #12]	; (80023fc <HAL_RCC_OscConfig+0x934>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4a02      	ldr	r2, [pc, #8]	; (80023fc <HAL_RCC_OscConfig+0x934>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6213      	str	r3, [r2, #32]
 80023f8:	e03c      	b.n	8002474 <HAL_RCC_OscConfig+0x9ac>
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	10908120 	.word	0x10908120
 8002404:	40007000 	.word	0x40007000
 8002408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10c      	bne.n	8002432 <HAL_RCC_OscConfig+0x96a>
 8002418:	4bc1      	ldr	r3, [pc, #772]	; (8002720 <HAL_RCC_OscConfig+0xc58>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4ac0      	ldr	r2, [pc, #768]	; (8002720 <HAL_RCC_OscConfig+0xc58>)
 800241e:	f023 0301 	bic.w	r3, r3, #1
 8002422:	6213      	str	r3, [r2, #32]
 8002424:	4bbe      	ldr	r3, [pc, #760]	; (8002720 <HAL_RCC_OscConfig+0xc58>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	4abd      	ldr	r2, [pc, #756]	; (8002720 <HAL_RCC_OscConfig+0xc58>)
 800242a:	f023 0304 	bic.w	r3, r3, #4
 800242e:	6213      	str	r3, [r2, #32]
 8002430:	e020      	b.n	8002474 <HAL_RCC_OscConfig+0x9ac>
 8002432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002436:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b05      	cmp	r3, #5
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x994>
 8002442:	4bb7      	ldr	r3, [pc, #732]	; (8002720 <HAL_RCC_OscConfig+0xc58>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4ab6      	ldr	r2, [pc, #728]	; (8002720 <HAL_RCC_OscConfig+0xc58>)
 8002448:	f043 0304 	orr.w	r3, r3, #4
 800244c:	6213      	str	r3, [r2, #32]
 800244e:	4bb4      	ldr	r3, [pc, #720]	; (8002720 <HAL_RCC_OscConfig+0xc58>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4ab3      	ldr	r2, [pc, #716]	; (8002720 <HAL_RCC_OscConfig+0xc58>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6213      	str	r3, [r2, #32]
 800245a:	e00b      	b.n	8002474 <HAL_RCC_OscConfig+0x9ac>
 800245c:	4bb0      	ldr	r3, [pc, #704]	; (8002720 <HAL_RCC_OscConfig+0xc58>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	4aaf      	ldr	r2, [pc, #700]	; (8002720 <HAL_RCC_OscConfig+0xc58>)
 8002462:	f023 0301 	bic.w	r3, r3, #1
 8002466:	6213      	str	r3, [r2, #32]
 8002468:	4bad      	ldr	r3, [pc, #692]	; (8002720 <HAL_RCC_OscConfig+0xc58>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4aac      	ldr	r2, [pc, #688]	; (8002720 <HAL_RCC_OscConfig+0xc58>)
 800246e:	f023 0304 	bic.w	r3, r3, #4
 8002472:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002478:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 8081 	beq.w	8002588 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002486:	f7ff f853 	bl	8001530 <HAL_GetTick>
 800248a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248e:	e00b      	b.n	80024a8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002490:	f7ff f84e 	bl	8001530 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e345      	b.n	8002b34 <HAL_RCC_OscConfig+0x106c>
 80024a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ac:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80024b0:	2202      	movs	r2, #2
 80024b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	fa93 f2a3 	rbit	r2, r3
 80024c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80024d4:	2202      	movs	r2, #2
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	fa93 f2a3 	rbit	r2, r3
 80024e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80024ee:	601a      	str	r2, [r3, #0]
  return result;
 80024f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80024f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	095b      	lsrs	r3, r3, #5
 8002502:	b2db      	uxtb	r3, r3
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d102      	bne.n	8002514 <HAL_RCC_OscConfig+0xa4c>
 800250e:	4b84      	ldr	r3, [pc, #528]	; (8002720 <HAL_RCC_OscConfig+0xc58>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	e013      	b.n	800253c <HAL_RCC_OscConfig+0xa74>
 8002514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002518:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800251c:	2202      	movs	r2, #2
 800251e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002524:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	fa93 f2a3 	rbit	r2, r3
 800252e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002532:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	4b79      	ldr	r3, [pc, #484]	; (8002720 <HAL_RCC_OscConfig+0xc58>)
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002540:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002544:	2102      	movs	r1, #2
 8002546:	6011      	str	r1, [r2, #0]
 8002548:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800254c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	fa92 f1a2 	rbit	r1, r2
 8002556:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800255a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800255e:	6011      	str	r1, [r2, #0]
  return result;
 8002560:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002564:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	fab2 f282 	clz	r2, r2
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	f002 021f 	and.w	r2, r2, #31
 800257a:	2101      	movs	r1, #1
 800257c:	fa01 f202 	lsl.w	r2, r1, r2
 8002580:	4013      	ands	r3, r2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d084      	beq.n	8002490 <HAL_RCC_OscConfig+0x9c8>
 8002586:	e07f      	b.n	8002688 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002588:	f7fe ffd2 	bl	8001530 <HAL_GetTick>
 800258c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002590:	e00b      	b.n	80025aa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe ffcd 	bl	8001530 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e2c4      	b.n	8002b34 <HAL_RCC_OscConfig+0x106c>
 80025aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ae:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80025b2:	2202      	movs	r2, #2
 80025b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	fa93 f2a3 	rbit	r2, r3
 80025c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80025d6:	2202      	movs	r2, #2
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	fa93 f2a3 	rbit	r2, r3
 80025e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ec:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80025f0:	601a      	str	r2, [r3, #0]
  return result;
 80025f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80025fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025fc:	fab3 f383 	clz	r3, r3
 8002600:	b2db      	uxtb	r3, r3
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	b2db      	uxtb	r3, r3
 8002606:	f043 0302 	orr.w	r3, r3, #2
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d102      	bne.n	8002616 <HAL_RCC_OscConfig+0xb4e>
 8002610:	4b43      	ldr	r3, [pc, #268]	; (8002720 <HAL_RCC_OscConfig+0xc58>)
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	e013      	b.n	800263e <HAL_RCC_OscConfig+0xb76>
 8002616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800261e:	2202      	movs	r2, #2
 8002620:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002626:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	fa93 f2a3 	rbit	r2, r3
 8002630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002634:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	4b39      	ldr	r3, [pc, #228]	; (8002720 <HAL_RCC_OscConfig+0xc58>)
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002642:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002646:	2102      	movs	r1, #2
 8002648:	6011      	str	r1, [r2, #0]
 800264a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800264e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	fa92 f1a2 	rbit	r1, r2
 8002658:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800265c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002660:	6011      	str	r1, [r2, #0]
  return result;
 8002662:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002666:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	fab2 f282 	clz	r2, r2
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	f002 021f 	and.w	r2, r2, #31
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f202 	lsl.w	r2, r1, r2
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d184      	bne.n	8002592 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002688:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800268c:	2b01      	cmp	r3, #1
 800268e:	d105      	bne.n	800269c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002690:	4b23      	ldr	r3, [pc, #140]	; (8002720 <HAL_RCC_OscConfig+0xc58>)
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	4a22      	ldr	r2, [pc, #136]	; (8002720 <HAL_RCC_OscConfig+0xc58>)
 8002696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800269c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 8242 	beq.w	8002b32 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ae:	4b1c      	ldr	r3, [pc, #112]	; (8002720 <HAL_RCC_OscConfig+0xc58>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	f000 8213 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	f040 8162 	bne.w	8002992 <HAL_RCC_OscConfig+0xeca>
 80026ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80026d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	fa93 f2a3 	rbit	r2, r3
 80026ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ee:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80026f2:	601a      	str	r2, [r3, #0]
  return result;
 80026f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80026fc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002708:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	461a      	mov	r2, r3
 8002710:	2300      	movs	r3, #0
 8002712:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7fe ff0c 	bl	8001530 <HAL_GetTick>
 8002718:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271c:	e00c      	b.n	8002738 <HAL_RCC_OscConfig+0xc70>
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002724:	f7fe ff04 	bl	8001530 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e1fd      	b.n	8002b34 <HAL_RCC_OscConfig+0x106c>
 8002738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002740:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002744:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	fa93 f2a3 	rbit	r2, r3
 8002754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002758:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800275c:	601a      	str	r2, [r3, #0]
  return result;
 800275e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002762:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002766:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d102      	bne.n	8002782 <HAL_RCC_OscConfig+0xcba>
 800277c:	4bb0      	ldr	r3, [pc, #704]	; (8002a40 <HAL_RCC_OscConfig+0xf78>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	e027      	b.n	80027d2 <HAL_RCC_OscConfig+0xd0a>
 8002782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002786:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800278a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800278e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002794:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	fa93 f2a3 	rbit	r2, r3
 800279e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ac:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80027b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ba:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	fa93 f2a3 	rbit	r2, r3
 80027c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	4b9c      	ldr	r3, [pc, #624]	; (8002a40 <HAL_RCC_OscConfig+0xf78>)
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027d6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80027da:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027de:	6011      	str	r1, [r2, #0]
 80027e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027e4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80027e8:	6812      	ldr	r2, [r2, #0]
 80027ea:	fa92 f1a2 	rbit	r1, r2
 80027ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027f2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80027f6:	6011      	str	r1, [r2, #0]
  return result;
 80027f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027fc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	fab2 f282 	clz	r2, r2
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	f042 0220 	orr.w	r2, r2, #32
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	f002 021f 	and.w	r2, r2, #31
 8002812:	2101      	movs	r1, #1
 8002814:	fa01 f202 	lsl.w	r2, r1, r2
 8002818:	4013      	ands	r3, r2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d182      	bne.n	8002724 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800281e:	4b88      	ldr	r3, [pc, #544]	; (8002a40 <HAL_RCC_OscConfig+0xf78>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	430b      	orrs	r3, r1
 8002840:	497f      	ldr	r1, [pc, #508]	; (8002a40 <HAL_RCC_OscConfig+0xf78>)
 8002842:	4313      	orrs	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
 8002846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800284e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002852:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002858:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	fa93 f2a3 	rbit	r2, r3
 8002862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002866:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800286a:	601a      	str	r2, [r3, #0]
  return result;
 800286c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002870:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002874:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002880:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	461a      	mov	r2, r3
 8002888:	2301      	movs	r3, #1
 800288a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe fe50 	bl	8001530 <HAL_GetTick>
 8002890:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002894:	e009      	b.n	80028aa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002896:	f7fe fe4b 	bl	8001530 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e144      	b.n	8002b34 <HAL_RCC_OscConfig+0x106c>
 80028aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ae:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80028b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028bc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	fa93 f2a3 	rbit	r2, r3
 80028c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ca:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80028ce:	601a      	str	r2, [r3, #0]
  return result;
 80028d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80028d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d102      	bne.n	80028f4 <HAL_RCC_OscConfig+0xe2c>
 80028ee:	4b54      	ldr	r3, [pc, #336]	; (8002a40 <HAL_RCC_OscConfig+0xf78>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	e027      	b.n	8002944 <HAL_RCC_OscConfig+0xe7c>
 80028f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80028fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002900:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002906:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	fa93 f2a3 	rbit	r2, r3
 8002910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002914:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002922:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	fa93 f2a3 	rbit	r2, r3
 8002936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	4b3f      	ldr	r3, [pc, #252]	; (8002a40 <HAL_RCC_OscConfig+0xf78>)
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002948:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800294c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002950:	6011      	str	r1, [r2, #0]
 8002952:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002956:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	fa92 f1a2 	rbit	r1, r2
 8002960:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002964:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002968:	6011      	str	r1, [r2, #0]
  return result;
 800296a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800296e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	fab2 f282 	clz	r2, r2
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	f042 0220 	orr.w	r2, r2, #32
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	f002 021f 	and.w	r2, r2, #31
 8002984:	2101      	movs	r1, #1
 8002986:	fa01 f202 	lsl.w	r2, r1, r2
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d082      	beq.n	8002896 <HAL_RCC_OscConfig+0xdce>
 8002990:	e0cf      	b.n	8002b32 <HAL_RCC_OscConfig+0x106a>
 8002992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002996:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800299a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800299e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	fa93 f2a3 	rbit	r2, r3
 80029ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80029b6:	601a      	str	r2, [r3, #0]
  return result;
 80029b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029bc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80029c0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	461a      	mov	r2, r3
 80029d4:	2300      	movs	r3, #0
 80029d6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fe fdaa 	bl	8001530 <HAL_GetTick>
 80029dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e0:	e009      	b.n	80029f6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e2:	f7fe fda5 	bl	8001530 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e09e      	b.n	8002b34 <HAL_RCC_OscConfig+0x106c>
 80029f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80029fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a08:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	fa93 f2a3 	rbit	r2, r3
 8002a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a16:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a1a:	601a      	str	r2, [r3, #0]
  return result;
 8002a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a20:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a24:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	095b      	lsrs	r3, r3, #5
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d104      	bne.n	8002a44 <HAL_RCC_OscConfig+0xf7c>
 8002a3a:	4b01      	ldr	r3, [pc, #4]	; (8002a40 <HAL_RCC_OscConfig+0xf78>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	e029      	b.n	8002a94 <HAL_RCC_OscConfig+0xfcc>
 8002a40:	40021000 	.word	0x40021000
 8002a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a48:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a56:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	fa93 f2a3 	rbit	r2, r3
 8002a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a64:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	fa93 f2a3 	rbit	r2, r3
 8002a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	4b2b      	ldr	r3, [pc, #172]	; (8002b40 <HAL_RCC_OscConfig+0x1078>)
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a98:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a9c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002aa0:	6011      	str	r1, [r2, #0]
 8002aa2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aa6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002aaa:	6812      	ldr	r2, [r2, #0]
 8002aac:	fa92 f1a2 	rbit	r1, r2
 8002ab0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ab4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ab8:	6011      	str	r1, [r2, #0]
  return result;
 8002aba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002abe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	fab2 f282 	clz	r2, r2
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	f042 0220 	orr.w	r2, r2, #32
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	f002 021f 	and.w	r2, r2, #31
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d180      	bne.n	80029e2 <HAL_RCC_OscConfig+0xf1a>
 8002ae0:	e027      	b.n	8002b32 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e01e      	b.n	8002b34 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002af6:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_RCC_OscConfig+0x1078>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002afe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b02:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d10b      	bne.n	8002b2e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b16:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d001      	beq.n	8002b32 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40021000 	.word	0x40021000

08002b44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b09e      	sub	sp, #120	; 0x78
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e162      	b.n	8002e22 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b90      	ldr	r3, [pc, #576]	; (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d910      	bls.n	8002b8c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b8d      	ldr	r3, [pc, #564]	; (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 0207 	bic.w	r2, r3, #7
 8002b72:	498b      	ldr	r1, [pc, #556]	; (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b89      	ldr	r3, [pc, #548]	; (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e14a      	b.n	8002e22 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b98:	4b82      	ldr	r3, [pc, #520]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	497f      	ldr	r1, [pc, #508]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 80dc 	beq.w	8002d70 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d13c      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xf6>
 8002bc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bc4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd0:	fab3 f383 	clz	r3, r3
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d102      	bne.n	8002bea <HAL_RCC_ClockConfig+0xa6>
 8002be4:	4b6f      	ldr	r3, [pc, #444]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	e00f      	b.n	8002c0a <HAL_RCC_ClockConfig+0xc6>
 8002bea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bf2:	fa93 f3a3 	rbit	r3, r3
 8002bf6:	667b      	str	r3, [r7, #100]	; 0x64
 8002bf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bfc:	663b      	str	r3, [r7, #96]	; 0x60
 8002bfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c00:	fa93 f3a3 	rbit	r3, r3
 8002c04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c06:	4b67      	ldr	r3, [pc, #412]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c0e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c12:	fa92 f2a2 	rbit	r2, r2
 8002c16:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002c18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c1a:	fab2 f282 	clz	r2, r2
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	f042 0220 	orr.w	r2, r2, #32
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	f002 021f 	and.w	r2, r2, #31
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d17b      	bne.n	8002d2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e0f3      	b.n	8002e22 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d13c      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x178>
 8002c42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c46:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c4a:	fa93 f3a3 	rbit	r3, r3
 8002c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d102      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x128>
 8002c66:	4b4f      	ldr	r3, [pc, #316]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	e00f      	b.n	8002c8c <HAL_RCC_ClockConfig+0x148>
 8002c6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c70:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	647b      	str	r3, [r7, #68]	; 0x44
 8002c7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c7e:	643b      	str	r3, [r7, #64]	; 0x40
 8002c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c88:	4b46      	ldr	r3, [pc, #280]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c90:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c94:	fa92 f2a2 	rbit	r2, r2
 8002c98:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c9c:	fab2 f282 	clz	r2, r2
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	f042 0220 	orr.w	r2, r2, #32
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	f002 021f 	and.w	r2, r2, #31
 8002cac:	2101      	movs	r1, #1
 8002cae:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d13a      	bne.n	8002d2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e0b2      	b.n	8002e22 <HAL_RCC_ClockConfig+0x2de>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	fa93 f3a3 	rbit	r3, r3
 8002cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cca:	fab3 f383 	clz	r3, r3
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d102      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x1a0>
 8002cde:	4b31      	ldr	r3, [pc, #196]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	e00d      	b.n	8002d00 <HAL_RCC_ClockConfig+0x1bc>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	623b      	str	r3, [r7, #32]
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	61fb      	str	r3, [r7, #28]
 8002cfc:	4b29      	ldr	r3, [pc, #164]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	2202      	movs	r2, #2
 8002d02:	61ba      	str	r2, [r7, #24]
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	fa92 f2a2 	rbit	r2, r2
 8002d0a:	617a      	str	r2, [r7, #20]
  return result;
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	fab2 f282 	clz	r2, r2
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	f042 0220 	orr.w	r2, r2, #32
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	f002 021f 	and.w	r2, r2, #31
 8002d1e:	2101      	movs	r1, #1
 8002d20:	fa01 f202 	lsl.w	r2, r1, r2
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e079      	b.n	8002e22 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d2e:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f023 0203 	bic.w	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	491a      	ldr	r1, [pc, #104]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d40:	f7fe fbf6 	bl	8001530 <HAL_GetTick>
 8002d44:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d46:	e00a      	b.n	8002d5e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d48:	f7fe fbf2 	bl	8001530 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e061      	b.n	8002e22 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5e:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 020c 	and.w	r2, r3, #12
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d1eb      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d214      	bcs.n	8002da8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 0207 	bic.w	r2, r3, #7
 8002d86:	4906      	ldr	r1, [pc, #24]	; (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e040      	b.n	8002e22 <HAL_RCC_ClockConfig+0x2de>
 8002da0:	40022000 	.word	0x40022000
 8002da4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db4:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <HAL_RCC_ClockConfig+0x2e8>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	491a      	ldr	r1, [pc, #104]	; (8002e2c <HAL_RCC_ClockConfig+0x2e8>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d009      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dd2:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <HAL_RCC_ClockConfig+0x2e8>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4912      	ldr	r1, [pc, #72]	; (8002e2c <HAL_RCC_ClockConfig+0x2e8>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002de6:	f000 f829 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8002dea:	4601      	mov	r1, r0
 8002dec:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <HAL_RCC_ClockConfig+0x2e8>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002df4:	22f0      	movs	r2, #240	; 0xf0
 8002df6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	fa92 f2a2 	rbit	r2, r2
 8002dfe:	60fa      	str	r2, [r7, #12]
  return result;
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	fab2 f282 	clz	r2, r2
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	40d3      	lsrs	r3, r2
 8002e0a:	4a09      	ldr	r2, [pc, #36]	; (8002e30 <HAL_RCC_ClockConfig+0x2ec>)
 8002e0c:	5cd3      	ldrb	r3, [r2, r3]
 8002e0e:	fa21 f303 	lsr.w	r3, r1, r3
 8002e12:	4a08      	ldr	r2, [pc, #32]	; (8002e34 <HAL_RCC_ClockConfig+0x2f0>)
 8002e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e16:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <HAL_RCC_ClockConfig+0x2f4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe fb44 	bl	80014a8 <HAL_InitTick>
  
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3778      	adds	r7, #120	; 0x78
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	08006f18 	.word	0x08006f18
 8002e34:	20000000 	.word	0x20000000
 8002e38:	20000004 	.word	0x20000004

08002e3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b08b      	sub	sp, #44	; 0x2c
 8002e40:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
 8002e46:	2300      	movs	r3, #0
 8002e48:	61bb      	str	r3, [r7, #24]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002e56:	4b29      	ldr	r3, [pc, #164]	; (8002efc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d002      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0x30>
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d003      	beq.n	8002e72 <HAL_RCC_GetSysClockFreq+0x36>
 8002e6a:	e03c      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e6c:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e6e:	623b      	str	r3, [r7, #32]
      break;
 8002e70:	e03c      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e78:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002e7c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	fa92 f2a2 	rbit	r2, r2
 8002e84:	607a      	str	r2, [r7, #4]
  return result;
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	fab2 f282 	clz	r2, r2
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	40d3      	lsrs	r3, r2
 8002e90:	4a1c      	ldr	r2, [pc, #112]	; (8002f04 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e92:	5cd3      	ldrb	r3, [r2, r3]
 8002e94:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e96:	4b19      	ldr	r3, [pc, #100]	; (8002efc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	220f      	movs	r2, #15
 8002ea0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	fa92 f2a2 	rbit	r2, r2
 8002ea8:	60fa      	str	r2, [r7, #12]
  return result;
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	fab2 f282 	clz	r2, r2
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	40d3      	lsrs	r3, r2
 8002eb4:	4a14      	ldr	r2, [pc, #80]	; (8002f08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002eb6:	5cd3      	ldrb	r3, [r2, r3]
 8002eb8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ec4:	4a0e      	ldr	r2, [pc, #56]	; (8002f00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	fb02 f303 	mul.w	r3, r2, r3
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed4:	e004      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	4a0c      	ldr	r2, [pc, #48]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	623b      	str	r3, [r7, #32]
      break;
 8002ee4:	e002      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ee8:	623b      	str	r3, [r7, #32]
      break;
 8002eea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eec:	6a3b      	ldr	r3, [r7, #32]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	372c      	adds	r7, #44	; 0x2c
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	007a1200 	.word	0x007a1200
 8002f04:	08006f30 	.word	0x08006f30
 8002f08:	08006f40 	.word	0x08006f40
 8002f0c:	003d0900 	.word	0x003d0900

08002f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f16:	681b      	ldr	r3, [r3, #0]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	20000000 	.word	0x20000000

08002f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f2e:	f7ff ffef 	bl	8002f10 <HAL_RCC_GetHCLKFreq>
 8002f32:	4601      	mov	r1, r0
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f3c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f40:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	fa92 f2a2 	rbit	r2, r2
 8002f48:	603a      	str	r2, [r7, #0]
  return result;
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	fab2 f282 	clz	r2, r2
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	40d3      	lsrs	r3, r2
 8002f54:	4a04      	ldr	r2, [pc, #16]	; (8002f68 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f56:	5cd3      	ldrb	r3, [r2, r3]
 8002f58:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000
 8002f68:	08006f28 	.word	0x08006f28

08002f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f72:	f7ff ffcd 	bl	8002f10 <HAL_RCC_GetHCLKFreq>
 8002f76:	4601      	mov	r1, r0
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002f80:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002f84:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	fa92 f2a2 	rbit	r2, r2
 8002f8c:	603a      	str	r2, [r7, #0]
  return result;
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	fab2 f282 	clz	r2, r2
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	40d3      	lsrs	r3, r2
 8002f98:	4a04      	ldr	r2, [pc, #16]	; (8002fac <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f9a:	5cd3      	ldrb	r3, [r2, r3]
 8002f9c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	08006f28 	.word	0x08006f28

08002fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e049      	b.n	8003056 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fe f8ac 	bl	8001134 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3304      	adds	r3, #4
 8002fec:	4619      	mov	r1, r3
 8002fee:	4610      	mov	r0, r2
 8002ff0:	f000 faa2 	bl	8003538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b01      	cmp	r3, #1
 8003072:	d001      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e040      	b.n	80030fa <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1c      	ldr	r2, [pc, #112]	; (8003108 <HAL_TIM_Base_Start_IT+0xa8>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00e      	beq.n	80030b8 <HAL_TIM_Base_Start_IT+0x58>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a2:	d009      	beq.n	80030b8 <HAL_TIM_Base_Start_IT+0x58>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a18      	ldr	r2, [pc, #96]	; (800310c <HAL_TIM_Base_Start_IT+0xac>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d004      	beq.n	80030b8 <HAL_TIM_Base_Start_IT+0x58>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a17      	ldr	r2, [pc, #92]	; (8003110 <HAL_TIM_Base_Start_IT+0xb0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d115      	bne.n	80030e4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	4b15      	ldr	r3, [pc, #84]	; (8003114 <HAL_TIM_Base_Start_IT+0xb4>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b06      	cmp	r3, #6
 80030c8:	d015      	beq.n	80030f6 <HAL_TIM_Base_Start_IT+0x96>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d0:	d011      	beq.n	80030f6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 0201 	orr.w	r2, r2, #1
 80030e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e2:	e008      	b.n	80030f6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	e000      	b.n	80030f8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40012c00 	.word	0x40012c00
 800310c:	40000400 	.word	0x40000400
 8003110:	40014000 	.word	0x40014000
 8003114:	00010007 	.word	0x00010007

08003118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b02      	cmp	r3, #2
 800312c:	d122      	bne.n	8003174 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b02      	cmp	r3, #2
 800313a:	d11b      	bne.n	8003174 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0202 	mvn.w	r2, #2
 8003144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f9ce 	bl	80034fc <HAL_TIM_IC_CaptureCallback>
 8003160:	e005      	b.n	800316e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f9c0 	bl	80034e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f9d1 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b04      	cmp	r3, #4
 8003180:	d122      	bne.n	80031c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b04      	cmp	r3, #4
 800318e:	d11b      	bne.n	80031c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0204 	mvn.w	r2, #4
 8003198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2202      	movs	r2, #2
 800319e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f9a4 	bl	80034fc <HAL_TIM_IC_CaptureCallback>
 80031b4:	e005      	b.n	80031c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f996 	bl	80034e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f9a7 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d122      	bne.n	800321c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d11b      	bne.n	800321c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0208 	mvn.w	r2, #8
 80031ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2204      	movs	r2, #4
 80031f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f97a 	bl	80034fc <HAL_TIM_IC_CaptureCallback>
 8003208:	e005      	b.n	8003216 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f96c 	bl	80034e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f97d 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b10      	cmp	r3, #16
 8003228:	d122      	bne.n	8003270 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f003 0310 	and.w	r3, r3, #16
 8003234:	2b10      	cmp	r3, #16
 8003236:	d11b      	bne.n	8003270 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0210 	mvn.w	r2, #16
 8003240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2208      	movs	r2, #8
 8003246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f950 	bl	80034fc <HAL_TIM_IC_CaptureCallback>
 800325c:	e005      	b.n	800326a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f942 	bl	80034e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f953 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b01      	cmp	r3, #1
 800327c:	d10e      	bne.n	800329c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b01      	cmp	r3, #1
 800328a:	d107      	bne.n	800329c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0201 	mvn.w	r2, #1
 8003294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fd fc86 	bl	8000ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a6:	2b80      	cmp	r3, #128	; 0x80
 80032a8:	d10e      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b4:	2b80      	cmp	r3, #128	; 0x80
 80032b6:	d107      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fac2 	bl	800384c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032d6:	d10e      	bne.n	80032f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e2:	2b80      	cmp	r3, #128	; 0x80
 80032e4:	d107      	bne.n	80032f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fab5 	bl	8003860 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	d10e      	bne.n	8003322 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330e:	2b40      	cmp	r3, #64	; 0x40
 8003310:	d107      	bne.n	8003322 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800331a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f901 	bl	8003524 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b20      	cmp	r3, #32
 800332e:	d10e      	bne.n	800334e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b20      	cmp	r3, #32
 800333c:	d107      	bne.n	800334e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f06f 0220 	mvn.w	r2, #32
 8003346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fa75 	bl	8003838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b084      	sub	sp, #16
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800336a:	2b01      	cmp	r3, #1
 800336c:	d101      	bne.n	8003372 <HAL_TIM_ConfigClockSource+0x1c>
 800336e:	2302      	movs	r3, #2
 8003370:	e0b6      	b.n	80034e0 <HAL_TIM_ConfigClockSource+0x18a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2202      	movs	r2, #2
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003390:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003394:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800339c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ae:	d03e      	beq.n	800342e <HAL_TIM_ConfigClockSource+0xd8>
 80033b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033b4:	f200 8087 	bhi.w	80034c6 <HAL_TIM_ConfigClockSource+0x170>
 80033b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033bc:	f000 8086 	beq.w	80034cc <HAL_TIM_ConfigClockSource+0x176>
 80033c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c4:	d87f      	bhi.n	80034c6 <HAL_TIM_ConfigClockSource+0x170>
 80033c6:	2b70      	cmp	r3, #112	; 0x70
 80033c8:	d01a      	beq.n	8003400 <HAL_TIM_ConfigClockSource+0xaa>
 80033ca:	2b70      	cmp	r3, #112	; 0x70
 80033cc:	d87b      	bhi.n	80034c6 <HAL_TIM_ConfigClockSource+0x170>
 80033ce:	2b60      	cmp	r3, #96	; 0x60
 80033d0:	d050      	beq.n	8003474 <HAL_TIM_ConfigClockSource+0x11e>
 80033d2:	2b60      	cmp	r3, #96	; 0x60
 80033d4:	d877      	bhi.n	80034c6 <HAL_TIM_ConfigClockSource+0x170>
 80033d6:	2b50      	cmp	r3, #80	; 0x50
 80033d8:	d03c      	beq.n	8003454 <HAL_TIM_ConfigClockSource+0xfe>
 80033da:	2b50      	cmp	r3, #80	; 0x50
 80033dc:	d873      	bhi.n	80034c6 <HAL_TIM_ConfigClockSource+0x170>
 80033de:	2b40      	cmp	r3, #64	; 0x40
 80033e0:	d058      	beq.n	8003494 <HAL_TIM_ConfigClockSource+0x13e>
 80033e2:	2b40      	cmp	r3, #64	; 0x40
 80033e4:	d86f      	bhi.n	80034c6 <HAL_TIM_ConfigClockSource+0x170>
 80033e6:	2b30      	cmp	r3, #48	; 0x30
 80033e8:	d064      	beq.n	80034b4 <HAL_TIM_ConfigClockSource+0x15e>
 80033ea:	2b30      	cmp	r3, #48	; 0x30
 80033ec:	d86b      	bhi.n	80034c6 <HAL_TIM_ConfigClockSource+0x170>
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	d060      	beq.n	80034b4 <HAL_TIM_ConfigClockSource+0x15e>
 80033f2:	2b20      	cmp	r3, #32
 80033f4:	d867      	bhi.n	80034c6 <HAL_TIM_ConfigClockSource+0x170>
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d05c      	beq.n	80034b4 <HAL_TIM_ConfigClockSource+0x15e>
 80033fa:	2b10      	cmp	r3, #16
 80033fc:	d05a      	beq.n	80034b4 <HAL_TIM_ConfigClockSource+0x15e>
 80033fe:	e062      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	6899      	ldr	r1, [r3, #8]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f000 f984 	bl	800371c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003422:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	609a      	str	r2, [r3, #8]
      break;
 800342c:	e04f      	b.n	80034ce <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	6899      	ldr	r1, [r3, #8]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f000 f96d 	bl	800371c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003450:	609a      	str	r2, [r3, #8]
      break;
 8003452:	e03c      	b.n	80034ce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6859      	ldr	r1, [r3, #4]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	461a      	mov	r2, r3
 8003462:	f000 f8e1 	bl	8003628 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2150      	movs	r1, #80	; 0x50
 800346c:	4618      	mov	r0, r3
 800346e:	f000 f93a 	bl	80036e6 <TIM_ITRx_SetConfig>
      break;
 8003472:	e02c      	b.n	80034ce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	6859      	ldr	r1, [r3, #4]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	461a      	mov	r2, r3
 8003482:	f000 f900 	bl	8003686 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2160      	movs	r1, #96	; 0x60
 800348c:	4618      	mov	r0, r3
 800348e:	f000 f92a 	bl	80036e6 <TIM_ITRx_SetConfig>
      break;
 8003492:	e01c      	b.n	80034ce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	6859      	ldr	r1, [r3, #4]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	461a      	mov	r2, r3
 80034a2:	f000 f8c1 	bl	8003628 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2140      	movs	r1, #64	; 0x40
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 f91a 	bl	80036e6 <TIM_ITRx_SetConfig>
      break;
 80034b2:	e00c      	b.n	80034ce <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4619      	mov	r1, r3
 80034be:	4610      	mov	r0, r2
 80034c0:	f000 f911 	bl	80036e6 <TIM_ITRx_SetConfig>
      break;
 80034c4:	e003      	b.n	80034ce <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	73fb      	strb	r3, [r7, #15]
      break;
 80034ca:	e000      	b.n	80034ce <HAL_TIM_ConfigClockSource+0x178>
      break;
 80034cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034de:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a32      	ldr	r2, [pc, #200]	; (8003614 <TIM_Base_SetConfig+0xdc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d007      	beq.n	8003560 <TIM_Base_SetConfig+0x28>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003556:	d003      	beq.n	8003560 <TIM_Base_SetConfig+0x28>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a2f      	ldr	r2, [pc, #188]	; (8003618 <TIM_Base_SetConfig+0xe0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d108      	bne.n	8003572 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a27      	ldr	r2, [pc, #156]	; (8003614 <TIM_Base_SetConfig+0xdc>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <TIM_Base_SetConfig+0x6a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003580:	d00f      	beq.n	80035a2 <TIM_Base_SetConfig+0x6a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a24      	ldr	r2, [pc, #144]	; (8003618 <TIM_Base_SetConfig+0xe0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00b      	beq.n	80035a2 <TIM_Base_SetConfig+0x6a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a23      	ldr	r2, [pc, #140]	; (800361c <TIM_Base_SetConfig+0xe4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d007      	beq.n	80035a2 <TIM_Base_SetConfig+0x6a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a22      	ldr	r2, [pc, #136]	; (8003620 <TIM_Base_SetConfig+0xe8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d003      	beq.n	80035a2 <TIM_Base_SetConfig+0x6a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a21      	ldr	r2, [pc, #132]	; (8003624 <TIM_Base_SetConfig+0xec>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d108      	bne.n	80035b4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a0e      	ldr	r2, [pc, #56]	; (8003614 <TIM_Base_SetConfig+0xdc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00b      	beq.n	80035f8 <TIM_Base_SetConfig+0xc0>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a0e      	ldr	r2, [pc, #56]	; (800361c <TIM_Base_SetConfig+0xe4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d007      	beq.n	80035f8 <TIM_Base_SetConfig+0xc0>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a0d      	ldr	r2, [pc, #52]	; (8003620 <TIM_Base_SetConfig+0xe8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d003      	beq.n	80035f8 <TIM_Base_SetConfig+0xc0>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a0c      	ldr	r2, [pc, #48]	; (8003624 <TIM_Base_SetConfig+0xec>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d103      	bne.n	8003600 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	615a      	str	r2, [r3, #20]
}
 8003606:	bf00      	nop
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40012c00 	.word	0x40012c00
 8003618:	40000400 	.word	0x40000400
 800361c:	40014000 	.word	0x40014000
 8003620:	40014400 	.word	0x40014400
 8003624:	40014800 	.word	0x40014800

08003628 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	f023 0201 	bic.w	r2, r3, #1
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f023 030a 	bic.w	r3, r3, #10
 8003664:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4313      	orrs	r3, r2
 800366c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	621a      	str	r2, [r3, #32]
}
 800367a:	bf00      	nop
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003686:	b480      	push	{r7}
 8003688:	b087      	sub	sp, #28
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	f023 0210 	bic.w	r2, r3, #16
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	031b      	lsls	r3, r3, #12
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	621a      	str	r2, [r3, #32]
}
 80036da:	bf00      	nop
 80036dc:	371c      	adds	r7, #28
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b085      	sub	sp, #20
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4313      	orrs	r3, r2
 8003704:	f043 0307 	orr.w	r3, r3, #7
 8003708:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	609a      	str	r2, [r3, #8]
}
 8003710:	bf00      	nop
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003736:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	021a      	lsls	r2, r3, #8
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	431a      	orrs	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4313      	orrs	r3, r2
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	4313      	orrs	r3, r2
 8003748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	609a      	str	r2, [r3, #8]
}
 8003750:	bf00      	nop
 8003752:	371c      	adds	r7, #28
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003770:	2302      	movs	r3, #2
 8003772:	e054      	b.n	800381e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a24      	ldr	r2, [pc, #144]	; (800382c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d108      	bne.n	80037b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80037a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a17      	ldr	r2, [pc, #92]	; (800382c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00e      	beq.n	80037f2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037dc:	d009      	beq.n	80037f2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a13      	ldr	r2, [pc, #76]	; (8003830 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d004      	beq.n	80037f2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a11      	ldr	r2, [pc, #68]	; (8003834 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d10c      	bne.n	800380c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	4313      	orrs	r3, r2
 8003802:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40012c00 	.word	0x40012c00
 8003830:	40000400 	.word	0x40000400
 8003834:	40014000 	.word	0x40014000

08003838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e040      	b.n	8003908 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7fd fc84 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2224      	movs	r2, #36	; 0x24
 80038a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0201 	bic.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f8b6 	bl	8003a24 <UART_SetConfig>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e022      	b.n	8003908 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f9e0 	bl	8003c90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0201 	orr.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 fa67 	bl	8003dd4 <UART_CheckIdleState>
 8003906:	4603      	mov	r3, r0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08a      	sub	sp, #40	; 0x28
 8003914:	af02      	add	r7, sp, #8
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	603b      	str	r3, [r7, #0]
 800391c:	4613      	mov	r3, r2
 800391e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003924:	2b20      	cmp	r3, #32
 8003926:	d178      	bne.n	8003a1a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <HAL_UART_Transmit+0x24>
 800392e:	88fb      	ldrh	r3, [r7, #6]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e071      	b.n	8003a1c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2221      	movs	r2, #33	; 0x21
 8003944:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003946:	f7fd fdf3 	bl	8001530 <HAL_GetTick>
 800394a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	88fa      	ldrh	r2, [r7, #6]
 8003950:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	88fa      	ldrh	r2, [r7, #6]
 8003958:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003964:	d108      	bne.n	8003978 <HAL_UART_Transmit+0x68>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d104      	bne.n	8003978 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	e003      	b.n	8003980 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800397c:	2300      	movs	r3, #0
 800397e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003980:	e030      	b.n	80039e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2200      	movs	r2, #0
 800398a:	2180      	movs	r1, #128	; 0x80
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 fac9 	bl	8003f24 <UART_WaitOnFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d004      	beq.n	80039a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2220      	movs	r2, #32
 800399c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e03c      	b.n	8003a1c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10b      	bne.n	80039c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	881a      	ldrh	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039b4:	b292      	uxth	r2, r2
 80039b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	3302      	adds	r3, #2
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	e008      	b.n	80039d2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	781a      	ldrb	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	b292      	uxth	r2, r2
 80039ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	3301      	adds	r3, #1
 80039d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039d8:	b29b      	uxth	r3, r3
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1c8      	bne.n	8003982 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2200      	movs	r2, #0
 80039f8:	2140      	movs	r1, #64	; 0x40
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 fa92 	bl	8003f24 <UART_WaitOnFlagUntilTimeout>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d004      	beq.n	8003a10 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e005      	b.n	8003a1c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e000      	b.n	8003a1c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003a1a:	2302      	movs	r3, #2
  }
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3720      	adds	r7, #32
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4b8a      	ldr	r3, [pc, #552]	; (8003c78 <UART_SetConfig+0x254>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6812      	ldr	r2, [r2, #0]
 8003a56:	6979      	ldr	r1, [r7, #20]
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a78      	ldr	r2, [pc, #480]	; (8003c7c <UART_SetConfig+0x258>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d120      	bne.n	8003ae2 <UART_SetConfig+0xbe>
 8003aa0:	4b77      	ldr	r3, [pc, #476]	; (8003c80 <UART_SetConfig+0x25c>)
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	d817      	bhi.n	8003adc <UART_SetConfig+0xb8>
 8003aac:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <UART_SetConfig+0x90>)
 8003aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab2:	bf00      	nop
 8003ab4:	08003ac5 	.word	0x08003ac5
 8003ab8:	08003ad1 	.word	0x08003ad1
 8003abc:	08003ad7 	.word	0x08003ad7
 8003ac0:	08003acb 	.word	0x08003acb
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	77fb      	strb	r3, [r7, #31]
 8003ac8:	e01d      	b.n	8003b06 <UART_SetConfig+0xe2>
 8003aca:	2302      	movs	r3, #2
 8003acc:	77fb      	strb	r3, [r7, #31]
 8003ace:	e01a      	b.n	8003b06 <UART_SetConfig+0xe2>
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	77fb      	strb	r3, [r7, #31]
 8003ad4:	e017      	b.n	8003b06 <UART_SetConfig+0xe2>
 8003ad6:	2308      	movs	r3, #8
 8003ad8:	77fb      	strb	r3, [r7, #31]
 8003ada:	e014      	b.n	8003b06 <UART_SetConfig+0xe2>
 8003adc:	2310      	movs	r3, #16
 8003ade:	77fb      	strb	r3, [r7, #31]
 8003ae0:	e011      	b.n	8003b06 <UART_SetConfig+0xe2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a67      	ldr	r2, [pc, #412]	; (8003c84 <UART_SetConfig+0x260>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d102      	bne.n	8003af2 <UART_SetConfig+0xce>
 8003aec:	2300      	movs	r3, #0
 8003aee:	77fb      	strb	r3, [r7, #31]
 8003af0:	e009      	b.n	8003b06 <UART_SetConfig+0xe2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a64      	ldr	r2, [pc, #400]	; (8003c88 <UART_SetConfig+0x264>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d102      	bne.n	8003b02 <UART_SetConfig+0xde>
 8003afc:	2300      	movs	r3, #0
 8003afe:	77fb      	strb	r3, [r7, #31]
 8003b00:	e001      	b.n	8003b06 <UART_SetConfig+0xe2>
 8003b02:	2310      	movs	r3, #16
 8003b04:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b0e:	d15a      	bne.n	8003bc6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003b10:	7ffb      	ldrb	r3, [r7, #31]
 8003b12:	2b08      	cmp	r3, #8
 8003b14:	d827      	bhi.n	8003b66 <UART_SetConfig+0x142>
 8003b16:	a201      	add	r2, pc, #4	; (adr r2, 8003b1c <UART_SetConfig+0xf8>)
 8003b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1c:	08003b41 	.word	0x08003b41
 8003b20:	08003b49 	.word	0x08003b49
 8003b24:	08003b51 	.word	0x08003b51
 8003b28:	08003b67 	.word	0x08003b67
 8003b2c:	08003b57 	.word	0x08003b57
 8003b30:	08003b67 	.word	0x08003b67
 8003b34:	08003b67 	.word	0x08003b67
 8003b38:	08003b67 	.word	0x08003b67
 8003b3c:	08003b5f 	.word	0x08003b5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b40:	f7ff f9f2 	bl	8002f28 <HAL_RCC_GetPCLK1Freq>
 8003b44:	61b8      	str	r0, [r7, #24]
        break;
 8003b46:	e013      	b.n	8003b70 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b48:	f7ff fa10 	bl	8002f6c <HAL_RCC_GetPCLK2Freq>
 8003b4c:	61b8      	str	r0, [r7, #24]
        break;
 8003b4e:	e00f      	b.n	8003b70 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b50:	4b4e      	ldr	r3, [pc, #312]	; (8003c8c <UART_SetConfig+0x268>)
 8003b52:	61bb      	str	r3, [r7, #24]
        break;
 8003b54:	e00c      	b.n	8003b70 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b56:	f7ff f971 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8003b5a:	61b8      	str	r0, [r7, #24]
        break;
 8003b5c:	e008      	b.n	8003b70 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b62:	61bb      	str	r3, [r7, #24]
        break;
 8003b64:	e004      	b.n	8003b70 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	77bb      	strb	r3, [r7, #30]
        break;
 8003b6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d074      	beq.n	8003c60 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	005a      	lsls	r2, r3, #1
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	085b      	lsrs	r3, r3, #1
 8003b80:	441a      	add	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	2b0f      	cmp	r3, #15
 8003b90:	d916      	bls.n	8003bc0 <UART_SetConfig+0x19c>
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b98:	d212      	bcs.n	8003bc0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	f023 030f 	bic.w	r3, r3, #15
 8003ba2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	085b      	lsrs	r3, r3, #1
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	89fb      	ldrh	r3, [r7, #14]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	89fa      	ldrh	r2, [r7, #14]
 8003bbc:	60da      	str	r2, [r3, #12]
 8003bbe:	e04f      	b.n	8003c60 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	77bb      	strb	r3, [r7, #30]
 8003bc4:	e04c      	b.n	8003c60 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bc6:	7ffb      	ldrb	r3, [r7, #31]
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d828      	bhi.n	8003c1e <UART_SetConfig+0x1fa>
 8003bcc:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <UART_SetConfig+0x1b0>)
 8003bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd2:	bf00      	nop
 8003bd4:	08003bf9 	.word	0x08003bf9
 8003bd8:	08003c01 	.word	0x08003c01
 8003bdc:	08003c09 	.word	0x08003c09
 8003be0:	08003c1f 	.word	0x08003c1f
 8003be4:	08003c0f 	.word	0x08003c0f
 8003be8:	08003c1f 	.word	0x08003c1f
 8003bec:	08003c1f 	.word	0x08003c1f
 8003bf0:	08003c1f 	.word	0x08003c1f
 8003bf4:	08003c17 	.word	0x08003c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bf8:	f7ff f996 	bl	8002f28 <HAL_RCC_GetPCLK1Freq>
 8003bfc:	61b8      	str	r0, [r7, #24]
        break;
 8003bfe:	e013      	b.n	8003c28 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c00:	f7ff f9b4 	bl	8002f6c <HAL_RCC_GetPCLK2Freq>
 8003c04:	61b8      	str	r0, [r7, #24]
        break;
 8003c06:	e00f      	b.n	8003c28 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c08:	4b20      	ldr	r3, [pc, #128]	; (8003c8c <UART_SetConfig+0x268>)
 8003c0a:	61bb      	str	r3, [r7, #24]
        break;
 8003c0c:	e00c      	b.n	8003c28 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c0e:	f7ff f915 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8003c12:	61b8      	str	r0, [r7, #24]
        break;
 8003c14:	e008      	b.n	8003c28 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c1a:	61bb      	str	r3, [r7, #24]
        break;
 8003c1c:	e004      	b.n	8003c28 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	77bb      	strb	r3, [r7, #30]
        break;
 8003c26:	bf00      	nop
    }

    if (pclk != 0U)
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d018      	beq.n	8003c60 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	085a      	lsrs	r2, r3, #1
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	441a      	add	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b0f      	cmp	r3, #15
 8003c46:	d909      	bls.n	8003c5c <UART_SetConfig+0x238>
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4e:	d205      	bcs.n	8003c5c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	60da      	str	r2, [r3, #12]
 8003c5a:	e001      	b.n	8003c60 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003c6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3720      	adds	r7, #32
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	efff69f3 	.word	0xefff69f3
 8003c7c:	40013800 	.word	0x40013800
 8003c80:	40021000 	.word	0x40021000
 8003c84:	40004400 	.word	0x40004400
 8003c88:	40004800 	.word	0x40004800
 8003c8c:	007a1200 	.word	0x007a1200

08003c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d01a      	beq.n	8003da6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d8e:	d10a      	bne.n	8003da6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	605a      	str	r2, [r3, #4]
  }
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b098      	sub	sp, #96	; 0x60
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003de4:	f7fd fba4 	bl	8001530 <HAL_GetTick>
 8003de8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d12e      	bne.n	8003e56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003df8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e00:	2200      	movs	r2, #0
 8003e02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f88c 	bl	8003f24 <UART_WaitOnFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d021      	beq.n	8003e56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1a:	e853 3f00 	ldrex	r3, [r3]
 8003e1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e26:	653b      	str	r3, [r7, #80]	; 0x50
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e30:	647b      	str	r3, [r7, #68]	; 0x44
 8003e32:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e38:	e841 2300 	strex	r3, r2, [r1]
 8003e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1e6      	bne.n	8003e12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e062      	b.n	8003f1c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d149      	bne.n	8003ef8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f856 	bl	8003f24 <UART_WaitOnFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d03c      	beq.n	8003ef8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	e853 3f00 	ldrex	r3, [r3]
 8003e8a:	623b      	str	r3, [r7, #32]
   return(result);
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e9e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ea4:	e841 2300 	strex	r3, r2, [r1]
 8003ea8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1e6      	bne.n	8003e7e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3308      	adds	r3, #8
 8003eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	e853 3f00 	ldrex	r3, [r3]
 8003ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0301 	bic.w	r3, r3, #1
 8003ec6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3308      	adds	r3, #8
 8003ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ed0:	61fa      	str	r2, [r7, #28]
 8003ed2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed4:	69b9      	ldr	r1, [r7, #24]
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	e841 2300 	strex	r3, r2, [r1]
 8003edc:	617b      	str	r3, [r7, #20]
   return(result);
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1e5      	bne.n	8003eb0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e011      	b.n	8003f1c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2220      	movs	r2, #32
 8003efc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3758      	adds	r7, #88	; 0x58
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	4613      	mov	r3, r2
 8003f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f34:	e049      	b.n	8003fca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3c:	d045      	beq.n	8003fca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f3e:	f7fd faf7 	bl	8001530 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d302      	bcc.n	8003f54 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e048      	b.n	8003fea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d031      	beq.n	8003fca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d110      	bne.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2208      	movs	r2, #8
 8003f7a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f838 	bl	8003ff2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2208      	movs	r2, #8
 8003f86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e029      	b.n	8003fea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa4:	d111      	bne.n	8003fca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 f81e 	bl	8003ff2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e00f      	b.n	8003fea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69da      	ldr	r2, [r3, #28]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	bf0c      	ite	eq
 8003fda:	2301      	moveq	r3, #1
 8003fdc:	2300      	movne	r3, #0
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d0a6      	beq.n	8003f36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b095      	sub	sp, #84	; 0x54
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800400e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004018:	643b      	str	r3, [r7, #64]	; 0x40
 800401a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800401e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e6      	bne.n	8003ffa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3308      	adds	r3, #8
 8004032:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	e853 3f00 	ldrex	r3, [r3]
 800403a:	61fb      	str	r3, [r7, #28]
   return(result);
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f023 0301 	bic.w	r3, r3, #1
 8004042:	64bb      	str	r3, [r7, #72]	; 0x48
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3308      	adds	r3, #8
 800404a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800404c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800404e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004054:	e841 2300 	strex	r3, r2, [r1]
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e5      	bne.n	800402c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004064:	2b01      	cmp	r3, #1
 8004066:	d118      	bne.n	800409a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	e853 3f00 	ldrex	r3, [r3]
 8004074:	60bb      	str	r3, [r7, #8]
   return(result);
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f023 0310 	bic.w	r3, r3, #16
 800407c:	647b      	str	r3, [r7, #68]	; 0x44
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004086:	61bb      	str	r3, [r7, #24]
 8004088:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	6979      	ldr	r1, [r7, #20]
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	e841 2300 	strex	r3, r2, [r1]
 8004092:	613b      	str	r3, [r7, #16]
   return(result);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1e6      	bne.n	8004068 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	669a      	str	r2, [r3, #104]	; 0x68
}
 80040ae:	bf00      	nop
 80040b0:	3754      	adds	r7, #84	; 0x54
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
	...

080040bc <__errno>:
 80040bc:	4b01      	ldr	r3, [pc, #4]	; (80040c4 <__errno+0x8>)
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	2000000c 	.word	0x2000000c

080040c8 <__libc_init_array>:
 80040c8:	b570      	push	{r4, r5, r6, lr}
 80040ca:	4d0d      	ldr	r5, [pc, #52]	; (8004100 <__libc_init_array+0x38>)
 80040cc:	4c0d      	ldr	r4, [pc, #52]	; (8004104 <__libc_init_array+0x3c>)
 80040ce:	1b64      	subs	r4, r4, r5
 80040d0:	10a4      	asrs	r4, r4, #2
 80040d2:	2600      	movs	r6, #0
 80040d4:	42a6      	cmp	r6, r4
 80040d6:	d109      	bne.n	80040ec <__libc_init_array+0x24>
 80040d8:	4d0b      	ldr	r5, [pc, #44]	; (8004108 <__libc_init_array+0x40>)
 80040da:	4c0c      	ldr	r4, [pc, #48]	; (800410c <__libc_init_array+0x44>)
 80040dc:	f002 fe92 	bl	8006e04 <_init>
 80040e0:	1b64      	subs	r4, r4, r5
 80040e2:	10a4      	asrs	r4, r4, #2
 80040e4:	2600      	movs	r6, #0
 80040e6:	42a6      	cmp	r6, r4
 80040e8:	d105      	bne.n	80040f6 <__libc_init_array+0x2e>
 80040ea:	bd70      	pop	{r4, r5, r6, pc}
 80040ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80040f0:	4798      	blx	r3
 80040f2:	3601      	adds	r6, #1
 80040f4:	e7ee      	b.n	80040d4 <__libc_init_array+0xc>
 80040f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040fa:	4798      	blx	r3
 80040fc:	3601      	adds	r6, #1
 80040fe:	e7f2      	b.n	80040e6 <__libc_init_array+0x1e>
 8004100:	0800732c 	.word	0x0800732c
 8004104:	0800732c 	.word	0x0800732c
 8004108:	0800732c 	.word	0x0800732c
 800410c:	08007330 	.word	0x08007330

08004110 <memset>:
 8004110:	4402      	add	r2, r0
 8004112:	4603      	mov	r3, r0
 8004114:	4293      	cmp	r3, r2
 8004116:	d100      	bne.n	800411a <memset+0xa>
 8004118:	4770      	bx	lr
 800411a:	f803 1b01 	strb.w	r1, [r3], #1
 800411e:	e7f9      	b.n	8004114 <memset+0x4>

08004120 <__cvt>:
 8004120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004124:	ec55 4b10 	vmov	r4, r5, d0
 8004128:	2d00      	cmp	r5, #0
 800412a:	460e      	mov	r6, r1
 800412c:	4619      	mov	r1, r3
 800412e:	462b      	mov	r3, r5
 8004130:	bfbb      	ittet	lt
 8004132:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004136:	461d      	movlt	r5, r3
 8004138:	2300      	movge	r3, #0
 800413a:	232d      	movlt	r3, #45	; 0x2d
 800413c:	700b      	strb	r3, [r1, #0]
 800413e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004140:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004144:	4691      	mov	r9, r2
 8004146:	f023 0820 	bic.w	r8, r3, #32
 800414a:	bfbc      	itt	lt
 800414c:	4622      	movlt	r2, r4
 800414e:	4614      	movlt	r4, r2
 8004150:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004154:	d005      	beq.n	8004162 <__cvt+0x42>
 8004156:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800415a:	d100      	bne.n	800415e <__cvt+0x3e>
 800415c:	3601      	adds	r6, #1
 800415e:	2102      	movs	r1, #2
 8004160:	e000      	b.n	8004164 <__cvt+0x44>
 8004162:	2103      	movs	r1, #3
 8004164:	ab03      	add	r3, sp, #12
 8004166:	9301      	str	r3, [sp, #4]
 8004168:	ab02      	add	r3, sp, #8
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	ec45 4b10 	vmov	d0, r4, r5
 8004170:	4653      	mov	r3, sl
 8004172:	4632      	mov	r2, r6
 8004174:	f000 fee8 	bl	8004f48 <_dtoa_r>
 8004178:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800417c:	4607      	mov	r7, r0
 800417e:	d102      	bne.n	8004186 <__cvt+0x66>
 8004180:	f019 0f01 	tst.w	r9, #1
 8004184:	d022      	beq.n	80041cc <__cvt+0xac>
 8004186:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800418a:	eb07 0906 	add.w	r9, r7, r6
 800418e:	d110      	bne.n	80041b2 <__cvt+0x92>
 8004190:	783b      	ldrb	r3, [r7, #0]
 8004192:	2b30      	cmp	r3, #48	; 0x30
 8004194:	d10a      	bne.n	80041ac <__cvt+0x8c>
 8004196:	2200      	movs	r2, #0
 8004198:	2300      	movs	r3, #0
 800419a:	4620      	mov	r0, r4
 800419c:	4629      	mov	r1, r5
 800419e:	f7fc fc93 	bl	8000ac8 <__aeabi_dcmpeq>
 80041a2:	b918      	cbnz	r0, 80041ac <__cvt+0x8c>
 80041a4:	f1c6 0601 	rsb	r6, r6, #1
 80041a8:	f8ca 6000 	str.w	r6, [sl]
 80041ac:	f8da 3000 	ldr.w	r3, [sl]
 80041b0:	4499      	add	r9, r3
 80041b2:	2200      	movs	r2, #0
 80041b4:	2300      	movs	r3, #0
 80041b6:	4620      	mov	r0, r4
 80041b8:	4629      	mov	r1, r5
 80041ba:	f7fc fc85 	bl	8000ac8 <__aeabi_dcmpeq>
 80041be:	b108      	cbz	r0, 80041c4 <__cvt+0xa4>
 80041c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80041c4:	2230      	movs	r2, #48	; 0x30
 80041c6:	9b03      	ldr	r3, [sp, #12]
 80041c8:	454b      	cmp	r3, r9
 80041ca:	d307      	bcc.n	80041dc <__cvt+0xbc>
 80041cc:	9b03      	ldr	r3, [sp, #12]
 80041ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041d0:	1bdb      	subs	r3, r3, r7
 80041d2:	4638      	mov	r0, r7
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	b004      	add	sp, #16
 80041d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041dc:	1c59      	adds	r1, r3, #1
 80041de:	9103      	str	r1, [sp, #12]
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	e7f0      	b.n	80041c6 <__cvt+0xa6>

080041e4 <__exponent>:
 80041e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041e6:	4603      	mov	r3, r0
 80041e8:	2900      	cmp	r1, #0
 80041ea:	bfb8      	it	lt
 80041ec:	4249      	neglt	r1, r1
 80041ee:	f803 2b02 	strb.w	r2, [r3], #2
 80041f2:	bfb4      	ite	lt
 80041f4:	222d      	movlt	r2, #45	; 0x2d
 80041f6:	222b      	movge	r2, #43	; 0x2b
 80041f8:	2909      	cmp	r1, #9
 80041fa:	7042      	strb	r2, [r0, #1]
 80041fc:	dd2a      	ble.n	8004254 <__exponent+0x70>
 80041fe:	f10d 0407 	add.w	r4, sp, #7
 8004202:	46a4      	mov	ip, r4
 8004204:	270a      	movs	r7, #10
 8004206:	46a6      	mov	lr, r4
 8004208:	460a      	mov	r2, r1
 800420a:	fb91 f6f7 	sdiv	r6, r1, r7
 800420e:	fb07 1516 	mls	r5, r7, r6, r1
 8004212:	3530      	adds	r5, #48	; 0x30
 8004214:	2a63      	cmp	r2, #99	; 0x63
 8004216:	f104 34ff 	add.w	r4, r4, #4294967295
 800421a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800421e:	4631      	mov	r1, r6
 8004220:	dcf1      	bgt.n	8004206 <__exponent+0x22>
 8004222:	3130      	adds	r1, #48	; 0x30
 8004224:	f1ae 0502 	sub.w	r5, lr, #2
 8004228:	f804 1c01 	strb.w	r1, [r4, #-1]
 800422c:	1c44      	adds	r4, r0, #1
 800422e:	4629      	mov	r1, r5
 8004230:	4561      	cmp	r1, ip
 8004232:	d30a      	bcc.n	800424a <__exponent+0x66>
 8004234:	f10d 0209 	add.w	r2, sp, #9
 8004238:	eba2 020e 	sub.w	r2, r2, lr
 800423c:	4565      	cmp	r5, ip
 800423e:	bf88      	it	hi
 8004240:	2200      	movhi	r2, #0
 8004242:	4413      	add	r3, r2
 8004244:	1a18      	subs	r0, r3, r0
 8004246:	b003      	add	sp, #12
 8004248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800424a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800424e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004252:	e7ed      	b.n	8004230 <__exponent+0x4c>
 8004254:	2330      	movs	r3, #48	; 0x30
 8004256:	3130      	adds	r1, #48	; 0x30
 8004258:	7083      	strb	r3, [r0, #2]
 800425a:	70c1      	strb	r1, [r0, #3]
 800425c:	1d03      	adds	r3, r0, #4
 800425e:	e7f1      	b.n	8004244 <__exponent+0x60>

08004260 <_printf_float>:
 8004260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004264:	ed2d 8b02 	vpush	{d8}
 8004268:	b08d      	sub	sp, #52	; 0x34
 800426a:	460c      	mov	r4, r1
 800426c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004270:	4616      	mov	r6, r2
 8004272:	461f      	mov	r7, r3
 8004274:	4605      	mov	r5, r0
 8004276:	f001 fe0d 	bl	8005e94 <_localeconv_r>
 800427a:	f8d0 a000 	ldr.w	sl, [r0]
 800427e:	4650      	mov	r0, sl
 8004280:	f7fb ffa6 	bl	80001d0 <strlen>
 8004284:	2300      	movs	r3, #0
 8004286:	930a      	str	r3, [sp, #40]	; 0x28
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	9305      	str	r3, [sp, #20]
 800428c:	f8d8 3000 	ldr.w	r3, [r8]
 8004290:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004294:	3307      	adds	r3, #7
 8004296:	f023 0307 	bic.w	r3, r3, #7
 800429a:	f103 0208 	add.w	r2, r3, #8
 800429e:	f8c8 2000 	str.w	r2, [r8]
 80042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80042aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80042ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80042b2:	9307      	str	r3, [sp, #28]
 80042b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80042b8:	ee08 0a10 	vmov	s16, r0
 80042bc:	4b9f      	ldr	r3, [pc, #636]	; (800453c <_printf_float+0x2dc>)
 80042be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042c2:	f04f 32ff 	mov.w	r2, #4294967295
 80042c6:	f7fc fc31 	bl	8000b2c <__aeabi_dcmpun>
 80042ca:	bb88      	cbnz	r0, 8004330 <_printf_float+0xd0>
 80042cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042d0:	4b9a      	ldr	r3, [pc, #616]	; (800453c <_printf_float+0x2dc>)
 80042d2:	f04f 32ff 	mov.w	r2, #4294967295
 80042d6:	f7fc fc0b 	bl	8000af0 <__aeabi_dcmple>
 80042da:	bb48      	cbnz	r0, 8004330 <_printf_float+0xd0>
 80042dc:	2200      	movs	r2, #0
 80042de:	2300      	movs	r3, #0
 80042e0:	4640      	mov	r0, r8
 80042e2:	4649      	mov	r1, r9
 80042e4:	f7fc fbfa 	bl	8000adc <__aeabi_dcmplt>
 80042e8:	b110      	cbz	r0, 80042f0 <_printf_float+0x90>
 80042ea:	232d      	movs	r3, #45	; 0x2d
 80042ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042f0:	4b93      	ldr	r3, [pc, #588]	; (8004540 <_printf_float+0x2e0>)
 80042f2:	4894      	ldr	r0, [pc, #592]	; (8004544 <_printf_float+0x2e4>)
 80042f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80042f8:	bf94      	ite	ls
 80042fa:	4698      	movls	r8, r3
 80042fc:	4680      	movhi	r8, r0
 80042fe:	2303      	movs	r3, #3
 8004300:	6123      	str	r3, [r4, #16]
 8004302:	9b05      	ldr	r3, [sp, #20]
 8004304:	f023 0204 	bic.w	r2, r3, #4
 8004308:	6022      	str	r2, [r4, #0]
 800430a:	f04f 0900 	mov.w	r9, #0
 800430e:	9700      	str	r7, [sp, #0]
 8004310:	4633      	mov	r3, r6
 8004312:	aa0b      	add	r2, sp, #44	; 0x2c
 8004314:	4621      	mov	r1, r4
 8004316:	4628      	mov	r0, r5
 8004318:	f000 f9d8 	bl	80046cc <_printf_common>
 800431c:	3001      	adds	r0, #1
 800431e:	f040 8090 	bne.w	8004442 <_printf_float+0x1e2>
 8004322:	f04f 30ff 	mov.w	r0, #4294967295
 8004326:	b00d      	add	sp, #52	; 0x34
 8004328:	ecbd 8b02 	vpop	{d8}
 800432c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004330:	4642      	mov	r2, r8
 8004332:	464b      	mov	r3, r9
 8004334:	4640      	mov	r0, r8
 8004336:	4649      	mov	r1, r9
 8004338:	f7fc fbf8 	bl	8000b2c <__aeabi_dcmpun>
 800433c:	b140      	cbz	r0, 8004350 <_printf_float+0xf0>
 800433e:	464b      	mov	r3, r9
 8004340:	2b00      	cmp	r3, #0
 8004342:	bfbc      	itt	lt
 8004344:	232d      	movlt	r3, #45	; 0x2d
 8004346:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800434a:	487f      	ldr	r0, [pc, #508]	; (8004548 <_printf_float+0x2e8>)
 800434c:	4b7f      	ldr	r3, [pc, #508]	; (800454c <_printf_float+0x2ec>)
 800434e:	e7d1      	b.n	80042f4 <_printf_float+0x94>
 8004350:	6863      	ldr	r3, [r4, #4]
 8004352:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004356:	9206      	str	r2, [sp, #24]
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	d13f      	bne.n	80043dc <_printf_float+0x17c>
 800435c:	2306      	movs	r3, #6
 800435e:	6063      	str	r3, [r4, #4]
 8004360:	9b05      	ldr	r3, [sp, #20]
 8004362:	6861      	ldr	r1, [r4, #4]
 8004364:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004368:	2300      	movs	r3, #0
 800436a:	9303      	str	r3, [sp, #12]
 800436c:	ab0a      	add	r3, sp, #40	; 0x28
 800436e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004372:	ab09      	add	r3, sp, #36	; 0x24
 8004374:	ec49 8b10 	vmov	d0, r8, r9
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	6022      	str	r2, [r4, #0]
 800437c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004380:	4628      	mov	r0, r5
 8004382:	f7ff fecd 	bl	8004120 <__cvt>
 8004386:	9b06      	ldr	r3, [sp, #24]
 8004388:	9909      	ldr	r1, [sp, #36]	; 0x24
 800438a:	2b47      	cmp	r3, #71	; 0x47
 800438c:	4680      	mov	r8, r0
 800438e:	d108      	bne.n	80043a2 <_printf_float+0x142>
 8004390:	1cc8      	adds	r0, r1, #3
 8004392:	db02      	blt.n	800439a <_printf_float+0x13a>
 8004394:	6863      	ldr	r3, [r4, #4]
 8004396:	4299      	cmp	r1, r3
 8004398:	dd41      	ble.n	800441e <_printf_float+0x1be>
 800439a:	f1ab 0b02 	sub.w	fp, fp, #2
 800439e:	fa5f fb8b 	uxtb.w	fp, fp
 80043a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80043a6:	d820      	bhi.n	80043ea <_printf_float+0x18a>
 80043a8:	3901      	subs	r1, #1
 80043aa:	465a      	mov	r2, fp
 80043ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80043b0:	9109      	str	r1, [sp, #36]	; 0x24
 80043b2:	f7ff ff17 	bl	80041e4 <__exponent>
 80043b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043b8:	1813      	adds	r3, r2, r0
 80043ba:	2a01      	cmp	r2, #1
 80043bc:	4681      	mov	r9, r0
 80043be:	6123      	str	r3, [r4, #16]
 80043c0:	dc02      	bgt.n	80043c8 <_printf_float+0x168>
 80043c2:	6822      	ldr	r2, [r4, #0]
 80043c4:	07d2      	lsls	r2, r2, #31
 80043c6:	d501      	bpl.n	80043cc <_printf_float+0x16c>
 80043c8:	3301      	adds	r3, #1
 80043ca:	6123      	str	r3, [r4, #16]
 80043cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d09c      	beq.n	800430e <_printf_float+0xae>
 80043d4:	232d      	movs	r3, #45	; 0x2d
 80043d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043da:	e798      	b.n	800430e <_printf_float+0xae>
 80043dc:	9a06      	ldr	r2, [sp, #24]
 80043de:	2a47      	cmp	r2, #71	; 0x47
 80043e0:	d1be      	bne.n	8004360 <_printf_float+0x100>
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1bc      	bne.n	8004360 <_printf_float+0x100>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e7b9      	b.n	800435e <_printf_float+0xfe>
 80043ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80043ee:	d118      	bne.n	8004422 <_printf_float+0x1c2>
 80043f0:	2900      	cmp	r1, #0
 80043f2:	6863      	ldr	r3, [r4, #4]
 80043f4:	dd0b      	ble.n	800440e <_printf_float+0x1ae>
 80043f6:	6121      	str	r1, [r4, #16]
 80043f8:	b913      	cbnz	r3, 8004400 <_printf_float+0x1a0>
 80043fa:	6822      	ldr	r2, [r4, #0]
 80043fc:	07d0      	lsls	r0, r2, #31
 80043fe:	d502      	bpl.n	8004406 <_printf_float+0x1a6>
 8004400:	3301      	adds	r3, #1
 8004402:	440b      	add	r3, r1
 8004404:	6123      	str	r3, [r4, #16]
 8004406:	65a1      	str	r1, [r4, #88]	; 0x58
 8004408:	f04f 0900 	mov.w	r9, #0
 800440c:	e7de      	b.n	80043cc <_printf_float+0x16c>
 800440e:	b913      	cbnz	r3, 8004416 <_printf_float+0x1b6>
 8004410:	6822      	ldr	r2, [r4, #0]
 8004412:	07d2      	lsls	r2, r2, #31
 8004414:	d501      	bpl.n	800441a <_printf_float+0x1ba>
 8004416:	3302      	adds	r3, #2
 8004418:	e7f4      	b.n	8004404 <_printf_float+0x1a4>
 800441a:	2301      	movs	r3, #1
 800441c:	e7f2      	b.n	8004404 <_printf_float+0x1a4>
 800441e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004424:	4299      	cmp	r1, r3
 8004426:	db05      	blt.n	8004434 <_printf_float+0x1d4>
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	6121      	str	r1, [r4, #16]
 800442c:	07d8      	lsls	r0, r3, #31
 800442e:	d5ea      	bpl.n	8004406 <_printf_float+0x1a6>
 8004430:	1c4b      	adds	r3, r1, #1
 8004432:	e7e7      	b.n	8004404 <_printf_float+0x1a4>
 8004434:	2900      	cmp	r1, #0
 8004436:	bfd4      	ite	le
 8004438:	f1c1 0202 	rsble	r2, r1, #2
 800443c:	2201      	movgt	r2, #1
 800443e:	4413      	add	r3, r2
 8004440:	e7e0      	b.n	8004404 <_printf_float+0x1a4>
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	055a      	lsls	r2, r3, #21
 8004446:	d407      	bmi.n	8004458 <_printf_float+0x1f8>
 8004448:	6923      	ldr	r3, [r4, #16]
 800444a:	4642      	mov	r2, r8
 800444c:	4631      	mov	r1, r6
 800444e:	4628      	mov	r0, r5
 8004450:	47b8      	blx	r7
 8004452:	3001      	adds	r0, #1
 8004454:	d12c      	bne.n	80044b0 <_printf_float+0x250>
 8004456:	e764      	b.n	8004322 <_printf_float+0xc2>
 8004458:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800445c:	f240 80e0 	bls.w	8004620 <_printf_float+0x3c0>
 8004460:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004464:	2200      	movs	r2, #0
 8004466:	2300      	movs	r3, #0
 8004468:	f7fc fb2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800446c:	2800      	cmp	r0, #0
 800446e:	d034      	beq.n	80044da <_printf_float+0x27a>
 8004470:	4a37      	ldr	r2, [pc, #220]	; (8004550 <_printf_float+0x2f0>)
 8004472:	2301      	movs	r3, #1
 8004474:	4631      	mov	r1, r6
 8004476:	4628      	mov	r0, r5
 8004478:	47b8      	blx	r7
 800447a:	3001      	adds	r0, #1
 800447c:	f43f af51 	beq.w	8004322 <_printf_float+0xc2>
 8004480:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004484:	429a      	cmp	r2, r3
 8004486:	db02      	blt.n	800448e <_printf_float+0x22e>
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	07d8      	lsls	r0, r3, #31
 800448c:	d510      	bpl.n	80044b0 <_printf_float+0x250>
 800448e:	ee18 3a10 	vmov	r3, s16
 8004492:	4652      	mov	r2, sl
 8004494:	4631      	mov	r1, r6
 8004496:	4628      	mov	r0, r5
 8004498:	47b8      	blx	r7
 800449a:	3001      	adds	r0, #1
 800449c:	f43f af41 	beq.w	8004322 <_printf_float+0xc2>
 80044a0:	f04f 0800 	mov.w	r8, #0
 80044a4:	f104 091a 	add.w	r9, r4, #26
 80044a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044aa:	3b01      	subs	r3, #1
 80044ac:	4543      	cmp	r3, r8
 80044ae:	dc09      	bgt.n	80044c4 <_printf_float+0x264>
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	079b      	lsls	r3, r3, #30
 80044b4:	f100 8105 	bmi.w	80046c2 <_printf_float+0x462>
 80044b8:	68e0      	ldr	r0, [r4, #12]
 80044ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044bc:	4298      	cmp	r0, r3
 80044be:	bfb8      	it	lt
 80044c0:	4618      	movlt	r0, r3
 80044c2:	e730      	b.n	8004326 <_printf_float+0xc6>
 80044c4:	2301      	movs	r3, #1
 80044c6:	464a      	mov	r2, r9
 80044c8:	4631      	mov	r1, r6
 80044ca:	4628      	mov	r0, r5
 80044cc:	47b8      	blx	r7
 80044ce:	3001      	adds	r0, #1
 80044d0:	f43f af27 	beq.w	8004322 <_printf_float+0xc2>
 80044d4:	f108 0801 	add.w	r8, r8, #1
 80044d8:	e7e6      	b.n	80044a8 <_printf_float+0x248>
 80044da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044dc:	2b00      	cmp	r3, #0
 80044de:	dc39      	bgt.n	8004554 <_printf_float+0x2f4>
 80044e0:	4a1b      	ldr	r2, [pc, #108]	; (8004550 <_printf_float+0x2f0>)
 80044e2:	2301      	movs	r3, #1
 80044e4:	4631      	mov	r1, r6
 80044e6:	4628      	mov	r0, r5
 80044e8:	47b8      	blx	r7
 80044ea:	3001      	adds	r0, #1
 80044ec:	f43f af19 	beq.w	8004322 <_printf_float+0xc2>
 80044f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044f4:	4313      	orrs	r3, r2
 80044f6:	d102      	bne.n	80044fe <_printf_float+0x29e>
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	07d9      	lsls	r1, r3, #31
 80044fc:	d5d8      	bpl.n	80044b0 <_printf_float+0x250>
 80044fe:	ee18 3a10 	vmov	r3, s16
 8004502:	4652      	mov	r2, sl
 8004504:	4631      	mov	r1, r6
 8004506:	4628      	mov	r0, r5
 8004508:	47b8      	blx	r7
 800450a:	3001      	adds	r0, #1
 800450c:	f43f af09 	beq.w	8004322 <_printf_float+0xc2>
 8004510:	f04f 0900 	mov.w	r9, #0
 8004514:	f104 0a1a 	add.w	sl, r4, #26
 8004518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800451a:	425b      	negs	r3, r3
 800451c:	454b      	cmp	r3, r9
 800451e:	dc01      	bgt.n	8004524 <_printf_float+0x2c4>
 8004520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004522:	e792      	b.n	800444a <_printf_float+0x1ea>
 8004524:	2301      	movs	r3, #1
 8004526:	4652      	mov	r2, sl
 8004528:	4631      	mov	r1, r6
 800452a:	4628      	mov	r0, r5
 800452c:	47b8      	blx	r7
 800452e:	3001      	adds	r0, #1
 8004530:	f43f aef7 	beq.w	8004322 <_printf_float+0xc2>
 8004534:	f109 0901 	add.w	r9, r9, #1
 8004538:	e7ee      	b.n	8004518 <_printf_float+0x2b8>
 800453a:	bf00      	nop
 800453c:	7fefffff 	.word	0x7fefffff
 8004540:	08006f54 	.word	0x08006f54
 8004544:	08006f58 	.word	0x08006f58
 8004548:	08006f60 	.word	0x08006f60
 800454c:	08006f5c 	.word	0x08006f5c
 8004550:	08006f64 	.word	0x08006f64
 8004554:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004556:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004558:	429a      	cmp	r2, r3
 800455a:	bfa8      	it	ge
 800455c:	461a      	movge	r2, r3
 800455e:	2a00      	cmp	r2, #0
 8004560:	4691      	mov	r9, r2
 8004562:	dc37      	bgt.n	80045d4 <_printf_float+0x374>
 8004564:	f04f 0b00 	mov.w	fp, #0
 8004568:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800456c:	f104 021a 	add.w	r2, r4, #26
 8004570:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004572:	9305      	str	r3, [sp, #20]
 8004574:	eba3 0309 	sub.w	r3, r3, r9
 8004578:	455b      	cmp	r3, fp
 800457a:	dc33      	bgt.n	80045e4 <_printf_float+0x384>
 800457c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004580:	429a      	cmp	r2, r3
 8004582:	db3b      	blt.n	80045fc <_printf_float+0x39c>
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	07da      	lsls	r2, r3, #31
 8004588:	d438      	bmi.n	80045fc <_printf_float+0x39c>
 800458a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800458c:	9a05      	ldr	r2, [sp, #20]
 800458e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004590:	1a9a      	subs	r2, r3, r2
 8004592:	eba3 0901 	sub.w	r9, r3, r1
 8004596:	4591      	cmp	r9, r2
 8004598:	bfa8      	it	ge
 800459a:	4691      	movge	r9, r2
 800459c:	f1b9 0f00 	cmp.w	r9, #0
 80045a0:	dc35      	bgt.n	800460e <_printf_float+0x3ae>
 80045a2:	f04f 0800 	mov.w	r8, #0
 80045a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045aa:	f104 0a1a 	add.w	sl, r4, #26
 80045ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	eba3 0309 	sub.w	r3, r3, r9
 80045b8:	4543      	cmp	r3, r8
 80045ba:	f77f af79 	ble.w	80044b0 <_printf_float+0x250>
 80045be:	2301      	movs	r3, #1
 80045c0:	4652      	mov	r2, sl
 80045c2:	4631      	mov	r1, r6
 80045c4:	4628      	mov	r0, r5
 80045c6:	47b8      	blx	r7
 80045c8:	3001      	adds	r0, #1
 80045ca:	f43f aeaa 	beq.w	8004322 <_printf_float+0xc2>
 80045ce:	f108 0801 	add.w	r8, r8, #1
 80045d2:	e7ec      	b.n	80045ae <_printf_float+0x34e>
 80045d4:	4613      	mov	r3, r2
 80045d6:	4631      	mov	r1, r6
 80045d8:	4642      	mov	r2, r8
 80045da:	4628      	mov	r0, r5
 80045dc:	47b8      	blx	r7
 80045de:	3001      	adds	r0, #1
 80045e0:	d1c0      	bne.n	8004564 <_printf_float+0x304>
 80045e2:	e69e      	b.n	8004322 <_printf_float+0xc2>
 80045e4:	2301      	movs	r3, #1
 80045e6:	4631      	mov	r1, r6
 80045e8:	4628      	mov	r0, r5
 80045ea:	9205      	str	r2, [sp, #20]
 80045ec:	47b8      	blx	r7
 80045ee:	3001      	adds	r0, #1
 80045f0:	f43f ae97 	beq.w	8004322 <_printf_float+0xc2>
 80045f4:	9a05      	ldr	r2, [sp, #20]
 80045f6:	f10b 0b01 	add.w	fp, fp, #1
 80045fa:	e7b9      	b.n	8004570 <_printf_float+0x310>
 80045fc:	ee18 3a10 	vmov	r3, s16
 8004600:	4652      	mov	r2, sl
 8004602:	4631      	mov	r1, r6
 8004604:	4628      	mov	r0, r5
 8004606:	47b8      	blx	r7
 8004608:	3001      	adds	r0, #1
 800460a:	d1be      	bne.n	800458a <_printf_float+0x32a>
 800460c:	e689      	b.n	8004322 <_printf_float+0xc2>
 800460e:	9a05      	ldr	r2, [sp, #20]
 8004610:	464b      	mov	r3, r9
 8004612:	4442      	add	r2, r8
 8004614:	4631      	mov	r1, r6
 8004616:	4628      	mov	r0, r5
 8004618:	47b8      	blx	r7
 800461a:	3001      	adds	r0, #1
 800461c:	d1c1      	bne.n	80045a2 <_printf_float+0x342>
 800461e:	e680      	b.n	8004322 <_printf_float+0xc2>
 8004620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004622:	2a01      	cmp	r2, #1
 8004624:	dc01      	bgt.n	800462a <_printf_float+0x3ca>
 8004626:	07db      	lsls	r3, r3, #31
 8004628:	d538      	bpl.n	800469c <_printf_float+0x43c>
 800462a:	2301      	movs	r3, #1
 800462c:	4642      	mov	r2, r8
 800462e:	4631      	mov	r1, r6
 8004630:	4628      	mov	r0, r5
 8004632:	47b8      	blx	r7
 8004634:	3001      	adds	r0, #1
 8004636:	f43f ae74 	beq.w	8004322 <_printf_float+0xc2>
 800463a:	ee18 3a10 	vmov	r3, s16
 800463e:	4652      	mov	r2, sl
 8004640:	4631      	mov	r1, r6
 8004642:	4628      	mov	r0, r5
 8004644:	47b8      	blx	r7
 8004646:	3001      	adds	r0, #1
 8004648:	f43f ae6b 	beq.w	8004322 <_printf_float+0xc2>
 800464c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004650:	2200      	movs	r2, #0
 8004652:	2300      	movs	r3, #0
 8004654:	f7fc fa38 	bl	8000ac8 <__aeabi_dcmpeq>
 8004658:	b9d8      	cbnz	r0, 8004692 <_printf_float+0x432>
 800465a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800465c:	f108 0201 	add.w	r2, r8, #1
 8004660:	3b01      	subs	r3, #1
 8004662:	4631      	mov	r1, r6
 8004664:	4628      	mov	r0, r5
 8004666:	47b8      	blx	r7
 8004668:	3001      	adds	r0, #1
 800466a:	d10e      	bne.n	800468a <_printf_float+0x42a>
 800466c:	e659      	b.n	8004322 <_printf_float+0xc2>
 800466e:	2301      	movs	r3, #1
 8004670:	4652      	mov	r2, sl
 8004672:	4631      	mov	r1, r6
 8004674:	4628      	mov	r0, r5
 8004676:	47b8      	blx	r7
 8004678:	3001      	adds	r0, #1
 800467a:	f43f ae52 	beq.w	8004322 <_printf_float+0xc2>
 800467e:	f108 0801 	add.w	r8, r8, #1
 8004682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004684:	3b01      	subs	r3, #1
 8004686:	4543      	cmp	r3, r8
 8004688:	dcf1      	bgt.n	800466e <_printf_float+0x40e>
 800468a:	464b      	mov	r3, r9
 800468c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004690:	e6dc      	b.n	800444c <_printf_float+0x1ec>
 8004692:	f04f 0800 	mov.w	r8, #0
 8004696:	f104 0a1a 	add.w	sl, r4, #26
 800469a:	e7f2      	b.n	8004682 <_printf_float+0x422>
 800469c:	2301      	movs	r3, #1
 800469e:	4642      	mov	r2, r8
 80046a0:	e7df      	b.n	8004662 <_printf_float+0x402>
 80046a2:	2301      	movs	r3, #1
 80046a4:	464a      	mov	r2, r9
 80046a6:	4631      	mov	r1, r6
 80046a8:	4628      	mov	r0, r5
 80046aa:	47b8      	blx	r7
 80046ac:	3001      	adds	r0, #1
 80046ae:	f43f ae38 	beq.w	8004322 <_printf_float+0xc2>
 80046b2:	f108 0801 	add.w	r8, r8, #1
 80046b6:	68e3      	ldr	r3, [r4, #12]
 80046b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046ba:	1a5b      	subs	r3, r3, r1
 80046bc:	4543      	cmp	r3, r8
 80046be:	dcf0      	bgt.n	80046a2 <_printf_float+0x442>
 80046c0:	e6fa      	b.n	80044b8 <_printf_float+0x258>
 80046c2:	f04f 0800 	mov.w	r8, #0
 80046c6:	f104 0919 	add.w	r9, r4, #25
 80046ca:	e7f4      	b.n	80046b6 <_printf_float+0x456>

080046cc <_printf_common>:
 80046cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046d0:	4616      	mov	r6, r2
 80046d2:	4699      	mov	r9, r3
 80046d4:	688a      	ldr	r2, [r1, #8]
 80046d6:	690b      	ldr	r3, [r1, #16]
 80046d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046dc:	4293      	cmp	r3, r2
 80046de:	bfb8      	it	lt
 80046e0:	4613      	movlt	r3, r2
 80046e2:	6033      	str	r3, [r6, #0]
 80046e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046e8:	4607      	mov	r7, r0
 80046ea:	460c      	mov	r4, r1
 80046ec:	b10a      	cbz	r2, 80046f2 <_printf_common+0x26>
 80046ee:	3301      	adds	r3, #1
 80046f0:	6033      	str	r3, [r6, #0]
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	0699      	lsls	r1, r3, #26
 80046f6:	bf42      	ittt	mi
 80046f8:	6833      	ldrmi	r3, [r6, #0]
 80046fa:	3302      	addmi	r3, #2
 80046fc:	6033      	strmi	r3, [r6, #0]
 80046fe:	6825      	ldr	r5, [r4, #0]
 8004700:	f015 0506 	ands.w	r5, r5, #6
 8004704:	d106      	bne.n	8004714 <_printf_common+0x48>
 8004706:	f104 0a19 	add.w	sl, r4, #25
 800470a:	68e3      	ldr	r3, [r4, #12]
 800470c:	6832      	ldr	r2, [r6, #0]
 800470e:	1a9b      	subs	r3, r3, r2
 8004710:	42ab      	cmp	r3, r5
 8004712:	dc26      	bgt.n	8004762 <_printf_common+0x96>
 8004714:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004718:	1e13      	subs	r3, r2, #0
 800471a:	6822      	ldr	r2, [r4, #0]
 800471c:	bf18      	it	ne
 800471e:	2301      	movne	r3, #1
 8004720:	0692      	lsls	r2, r2, #26
 8004722:	d42b      	bmi.n	800477c <_printf_common+0xb0>
 8004724:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004728:	4649      	mov	r1, r9
 800472a:	4638      	mov	r0, r7
 800472c:	47c0      	blx	r8
 800472e:	3001      	adds	r0, #1
 8004730:	d01e      	beq.n	8004770 <_printf_common+0xa4>
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	68e5      	ldr	r5, [r4, #12]
 8004736:	6832      	ldr	r2, [r6, #0]
 8004738:	f003 0306 	and.w	r3, r3, #6
 800473c:	2b04      	cmp	r3, #4
 800473e:	bf08      	it	eq
 8004740:	1aad      	subeq	r5, r5, r2
 8004742:	68a3      	ldr	r3, [r4, #8]
 8004744:	6922      	ldr	r2, [r4, #16]
 8004746:	bf0c      	ite	eq
 8004748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800474c:	2500      	movne	r5, #0
 800474e:	4293      	cmp	r3, r2
 8004750:	bfc4      	itt	gt
 8004752:	1a9b      	subgt	r3, r3, r2
 8004754:	18ed      	addgt	r5, r5, r3
 8004756:	2600      	movs	r6, #0
 8004758:	341a      	adds	r4, #26
 800475a:	42b5      	cmp	r5, r6
 800475c:	d11a      	bne.n	8004794 <_printf_common+0xc8>
 800475e:	2000      	movs	r0, #0
 8004760:	e008      	b.n	8004774 <_printf_common+0xa8>
 8004762:	2301      	movs	r3, #1
 8004764:	4652      	mov	r2, sl
 8004766:	4649      	mov	r1, r9
 8004768:	4638      	mov	r0, r7
 800476a:	47c0      	blx	r8
 800476c:	3001      	adds	r0, #1
 800476e:	d103      	bne.n	8004778 <_printf_common+0xac>
 8004770:	f04f 30ff 	mov.w	r0, #4294967295
 8004774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004778:	3501      	adds	r5, #1
 800477a:	e7c6      	b.n	800470a <_printf_common+0x3e>
 800477c:	18e1      	adds	r1, r4, r3
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	2030      	movs	r0, #48	; 0x30
 8004782:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004786:	4422      	add	r2, r4
 8004788:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800478c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004790:	3302      	adds	r3, #2
 8004792:	e7c7      	b.n	8004724 <_printf_common+0x58>
 8004794:	2301      	movs	r3, #1
 8004796:	4622      	mov	r2, r4
 8004798:	4649      	mov	r1, r9
 800479a:	4638      	mov	r0, r7
 800479c:	47c0      	blx	r8
 800479e:	3001      	adds	r0, #1
 80047a0:	d0e6      	beq.n	8004770 <_printf_common+0xa4>
 80047a2:	3601      	adds	r6, #1
 80047a4:	e7d9      	b.n	800475a <_printf_common+0x8e>
	...

080047a8 <_printf_i>:
 80047a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047ac:	7e0f      	ldrb	r7, [r1, #24]
 80047ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047b0:	2f78      	cmp	r7, #120	; 0x78
 80047b2:	4691      	mov	r9, r2
 80047b4:	4680      	mov	r8, r0
 80047b6:	460c      	mov	r4, r1
 80047b8:	469a      	mov	sl, r3
 80047ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047be:	d807      	bhi.n	80047d0 <_printf_i+0x28>
 80047c0:	2f62      	cmp	r7, #98	; 0x62
 80047c2:	d80a      	bhi.n	80047da <_printf_i+0x32>
 80047c4:	2f00      	cmp	r7, #0
 80047c6:	f000 80d8 	beq.w	800497a <_printf_i+0x1d2>
 80047ca:	2f58      	cmp	r7, #88	; 0x58
 80047cc:	f000 80a3 	beq.w	8004916 <_printf_i+0x16e>
 80047d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047d8:	e03a      	b.n	8004850 <_printf_i+0xa8>
 80047da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047de:	2b15      	cmp	r3, #21
 80047e0:	d8f6      	bhi.n	80047d0 <_printf_i+0x28>
 80047e2:	a101      	add	r1, pc, #4	; (adr r1, 80047e8 <_printf_i+0x40>)
 80047e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047e8:	08004841 	.word	0x08004841
 80047ec:	08004855 	.word	0x08004855
 80047f0:	080047d1 	.word	0x080047d1
 80047f4:	080047d1 	.word	0x080047d1
 80047f8:	080047d1 	.word	0x080047d1
 80047fc:	080047d1 	.word	0x080047d1
 8004800:	08004855 	.word	0x08004855
 8004804:	080047d1 	.word	0x080047d1
 8004808:	080047d1 	.word	0x080047d1
 800480c:	080047d1 	.word	0x080047d1
 8004810:	080047d1 	.word	0x080047d1
 8004814:	08004961 	.word	0x08004961
 8004818:	08004885 	.word	0x08004885
 800481c:	08004943 	.word	0x08004943
 8004820:	080047d1 	.word	0x080047d1
 8004824:	080047d1 	.word	0x080047d1
 8004828:	08004983 	.word	0x08004983
 800482c:	080047d1 	.word	0x080047d1
 8004830:	08004885 	.word	0x08004885
 8004834:	080047d1 	.word	0x080047d1
 8004838:	080047d1 	.word	0x080047d1
 800483c:	0800494b 	.word	0x0800494b
 8004840:	682b      	ldr	r3, [r5, #0]
 8004842:	1d1a      	adds	r2, r3, #4
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	602a      	str	r2, [r5, #0]
 8004848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800484c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004850:	2301      	movs	r3, #1
 8004852:	e0a3      	b.n	800499c <_printf_i+0x1f4>
 8004854:	6820      	ldr	r0, [r4, #0]
 8004856:	6829      	ldr	r1, [r5, #0]
 8004858:	0606      	lsls	r6, r0, #24
 800485a:	f101 0304 	add.w	r3, r1, #4
 800485e:	d50a      	bpl.n	8004876 <_printf_i+0xce>
 8004860:	680e      	ldr	r6, [r1, #0]
 8004862:	602b      	str	r3, [r5, #0]
 8004864:	2e00      	cmp	r6, #0
 8004866:	da03      	bge.n	8004870 <_printf_i+0xc8>
 8004868:	232d      	movs	r3, #45	; 0x2d
 800486a:	4276      	negs	r6, r6
 800486c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004870:	485e      	ldr	r0, [pc, #376]	; (80049ec <_printf_i+0x244>)
 8004872:	230a      	movs	r3, #10
 8004874:	e019      	b.n	80048aa <_printf_i+0x102>
 8004876:	680e      	ldr	r6, [r1, #0]
 8004878:	602b      	str	r3, [r5, #0]
 800487a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800487e:	bf18      	it	ne
 8004880:	b236      	sxthne	r6, r6
 8004882:	e7ef      	b.n	8004864 <_printf_i+0xbc>
 8004884:	682b      	ldr	r3, [r5, #0]
 8004886:	6820      	ldr	r0, [r4, #0]
 8004888:	1d19      	adds	r1, r3, #4
 800488a:	6029      	str	r1, [r5, #0]
 800488c:	0601      	lsls	r1, r0, #24
 800488e:	d501      	bpl.n	8004894 <_printf_i+0xec>
 8004890:	681e      	ldr	r6, [r3, #0]
 8004892:	e002      	b.n	800489a <_printf_i+0xf2>
 8004894:	0646      	lsls	r6, r0, #25
 8004896:	d5fb      	bpl.n	8004890 <_printf_i+0xe8>
 8004898:	881e      	ldrh	r6, [r3, #0]
 800489a:	4854      	ldr	r0, [pc, #336]	; (80049ec <_printf_i+0x244>)
 800489c:	2f6f      	cmp	r7, #111	; 0x6f
 800489e:	bf0c      	ite	eq
 80048a0:	2308      	moveq	r3, #8
 80048a2:	230a      	movne	r3, #10
 80048a4:	2100      	movs	r1, #0
 80048a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048aa:	6865      	ldr	r5, [r4, #4]
 80048ac:	60a5      	str	r5, [r4, #8]
 80048ae:	2d00      	cmp	r5, #0
 80048b0:	bfa2      	ittt	ge
 80048b2:	6821      	ldrge	r1, [r4, #0]
 80048b4:	f021 0104 	bicge.w	r1, r1, #4
 80048b8:	6021      	strge	r1, [r4, #0]
 80048ba:	b90e      	cbnz	r6, 80048c0 <_printf_i+0x118>
 80048bc:	2d00      	cmp	r5, #0
 80048be:	d04d      	beq.n	800495c <_printf_i+0x1b4>
 80048c0:	4615      	mov	r5, r2
 80048c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80048c6:	fb03 6711 	mls	r7, r3, r1, r6
 80048ca:	5dc7      	ldrb	r7, [r0, r7]
 80048cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048d0:	4637      	mov	r7, r6
 80048d2:	42bb      	cmp	r3, r7
 80048d4:	460e      	mov	r6, r1
 80048d6:	d9f4      	bls.n	80048c2 <_printf_i+0x11a>
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d10b      	bne.n	80048f4 <_printf_i+0x14c>
 80048dc:	6823      	ldr	r3, [r4, #0]
 80048de:	07de      	lsls	r6, r3, #31
 80048e0:	d508      	bpl.n	80048f4 <_printf_i+0x14c>
 80048e2:	6923      	ldr	r3, [r4, #16]
 80048e4:	6861      	ldr	r1, [r4, #4]
 80048e6:	4299      	cmp	r1, r3
 80048e8:	bfde      	ittt	le
 80048ea:	2330      	movle	r3, #48	; 0x30
 80048ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048f4:	1b52      	subs	r2, r2, r5
 80048f6:	6122      	str	r2, [r4, #16]
 80048f8:	f8cd a000 	str.w	sl, [sp]
 80048fc:	464b      	mov	r3, r9
 80048fe:	aa03      	add	r2, sp, #12
 8004900:	4621      	mov	r1, r4
 8004902:	4640      	mov	r0, r8
 8004904:	f7ff fee2 	bl	80046cc <_printf_common>
 8004908:	3001      	adds	r0, #1
 800490a:	d14c      	bne.n	80049a6 <_printf_i+0x1fe>
 800490c:	f04f 30ff 	mov.w	r0, #4294967295
 8004910:	b004      	add	sp, #16
 8004912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004916:	4835      	ldr	r0, [pc, #212]	; (80049ec <_printf_i+0x244>)
 8004918:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800491c:	6829      	ldr	r1, [r5, #0]
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	f851 6b04 	ldr.w	r6, [r1], #4
 8004924:	6029      	str	r1, [r5, #0]
 8004926:	061d      	lsls	r5, r3, #24
 8004928:	d514      	bpl.n	8004954 <_printf_i+0x1ac>
 800492a:	07df      	lsls	r7, r3, #31
 800492c:	bf44      	itt	mi
 800492e:	f043 0320 	orrmi.w	r3, r3, #32
 8004932:	6023      	strmi	r3, [r4, #0]
 8004934:	b91e      	cbnz	r6, 800493e <_printf_i+0x196>
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	f023 0320 	bic.w	r3, r3, #32
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	2310      	movs	r3, #16
 8004940:	e7b0      	b.n	80048a4 <_printf_i+0xfc>
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	f043 0320 	orr.w	r3, r3, #32
 8004948:	6023      	str	r3, [r4, #0]
 800494a:	2378      	movs	r3, #120	; 0x78
 800494c:	4828      	ldr	r0, [pc, #160]	; (80049f0 <_printf_i+0x248>)
 800494e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004952:	e7e3      	b.n	800491c <_printf_i+0x174>
 8004954:	0659      	lsls	r1, r3, #25
 8004956:	bf48      	it	mi
 8004958:	b2b6      	uxthmi	r6, r6
 800495a:	e7e6      	b.n	800492a <_printf_i+0x182>
 800495c:	4615      	mov	r5, r2
 800495e:	e7bb      	b.n	80048d8 <_printf_i+0x130>
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	6826      	ldr	r6, [r4, #0]
 8004964:	6961      	ldr	r1, [r4, #20]
 8004966:	1d18      	adds	r0, r3, #4
 8004968:	6028      	str	r0, [r5, #0]
 800496a:	0635      	lsls	r5, r6, #24
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	d501      	bpl.n	8004974 <_printf_i+0x1cc>
 8004970:	6019      	str	r1, [r3, #0]
 8004972:	e002      	b.n	800497a <_printf_i+0x1d2>
 8004974:	0670      	lsls	r0, r6, #25
 8004976:	d5fb      	bpl.n	8004970 <_printf_i+0x1c8>
 8004978:	8019      	strh	r1, [r3, #0]
 800497a:	2300      	movs	r3, #0
 800497c:	6123      	str	r3, [r4, #16]
 800497e:	4615      	mov	r5, r2
 8004980:	e7ba      	b.n	80048f8 <_printf_i+0x150>
 8004982:	682b      	ldr	r3, [r5, #0]
 8004984:	1d1a      	adds	r2, r3, #4
 8004986:	602a      	str	r2, [r5, #0]
 8004988:	681d      	ldr	r5, [r3, #0]
 800498a:	6862      	ldr	r2, [r4, #4]
 800498c:	2100      	movs	r1, #0
 800498e:	4628      	mov	r0, r5
 8004990:	f7fb fc26 	bl	80001e0 <memchr>
 8004994:	b108      	cbz	r0, 800499a <_printf_i+0x1f2>
 8004996:	1b40      	subs	r0, r0, r5
 8004998:	6060      	str	r0, [r4, #4]
 800499a:	6863      	ldr	r3, [r4, #4]
 800499c:	6123      	str	r3, [r4, #16]
 800499e:	2300      	movs	r3, #0
 80049a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049a4:	e7a8      	b.n	80048f8 <_printf_i+0x150>
 80049a6:	6923      	ldr	r3, [r4, #16]
 80049a8:	462a      	mov	r2, r5
 80049aa:	4649      	mov	r1, r9
 80049ac:	4640      	mov	r0, r8
 80049ae:	47d0      	blx	sl
 80049b0:	3001      	adds	r0, #1
 80049b2:	d0ab      	beq.n	800490c <_printf_i+0x164>
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	079b      	lsls	r3, r3, #30
 80049b8:	d413      	bmi.n	80049e2 <_printf_i+0x23a>
 80049ba:	68e0      	ldr	r0, [r4, #12]
 80049bc:	9b03      	ldr	r3, [sp, #12]
 80049be:	4298      	cmp	r0, r3
 80049c0:	bfb8      	it	lt
 80049c2:	4618      	movlt	r0, r3
 80049c4:	e7a4      	b.n	8004910 <_printf_i+0x168>
 80049c6:	2301      	movs	r3, #1
 80049c8:	4632      	mov	r2, r6
 80049ca:	4649      	mov	r1, r9
 80049cc:	4640      	mov	r0, r8
 80049ce:	47d0      	blx	sl
 80049d0:	3001      	adds	r0, #1
 80049d2:	d09b      	beq.n	800490c <_printf_i+0x164>
 80049d4:	3501      	adds	r5, #1
 80049d6:	68e3      	ldr	r3, [r4, #12]
 80049d8:	9903      	ldr	r1, [sp, #12]
 80049da:	1a5b      	subs	r3, r3, r1
 80049dc:	42ab      	cmp	r3, r5
 80049de:	dcf2      	bgt.n	80049c6 <_printf_i+0x21e>
 80049e0:	e7eb      	b.n	80049ba <_printf_i+0x212>
 80049e2:	2500      	movs	r5, #0
 80049e4:	f104 0619 	add.w	r6, r4, #25
 80049e8:	e7f5      	b.n	80049d6 <_printf_i+0x22e>
 80049ea:	bf00      	nop
 80049ec:	08006f66 	.word	0x08006f66
 80049f0:	08006f77 	.word	0x08006f77

080049f4 <iprintf>:
 80049f4:	b40f      	push	{r0, r1, r2, r3}
 80049f6:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <iprintf+0x2c>)
 80049f8:	b513      	push	{r0, r1, r4, lr}
 80049fa:	681c      	ldr	r4, [r3, #0]
 80049fc:	b124      	cbz	r4, 8004a08 <iprintf+0x14>
 80049fe:	69a3      	ldr	r3, [r4, #24]
 8004a00:	b913      	cbnz	r3, 8004a08 <iprintf+0x14>
 8004a02:	4620      	mov	r0, r4
 8004a04:	f001 f9a8 	bl	8005d58 <__sinit>
 8004a08:	ab05      	add	r3, sp, #20
 8004a0a:	9a04      	ldr	r2, [sp, #16]
 8004a0c:	68a1      	ldr	r1, [r4, #8]
 8004a0e:	9301      	str	r3, [sp, #4]
 8004a10:	4620      	mov	r0, r4
 8004a12:	f001 ff65 	bl	80068e0 <_vfiprintf_r>
 8004a16:	b002      	add	sp, #8
 8004a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a1c:	b004      	add	sp, #16
 8004a1e:	4770      	bx	lr
 8004a20:	2000000c 	.word	0x2000000c

08004a24 <_puts_r>:
 8004a24:	b570      	push	{r4, r5, r6, lr}
 8004a26:	460e      	mov	r6, r1
 8004a28:	4605      	mov	r5, r0
 8004a2a:	b118      	cbz	r0, 8004a34 <_puts_r+0x10>
 8004a2c:	6983      	ldr	r3, [r0, #24]
 8004a2e:	b90b      	cbnz	r3, 8004a34 <_puts_r+0x10>
 8004a30:	f001 f992 	bl	8005d58 <__sinit>
 8004a34:	69ab      	ldr	r3, [r5, #24]
 8004a36:	68ac      	ldr	r4, [r5, #8]
 8004a38:	b913      	cbnz	r3, 8004a40 <_puts_r+0x1c>
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	f001 f98c 	bl	8005d58 <__sinit>
 8004a40:	4b2c      	ldr	r3, [pc, #176]	; (8004af4 <_puts_r+0xd0>)
 8004a42:	429c      	cmp	r4, r3
 8004a44:	d120      	bne.n	8004a88 <_puts_r+0x64>
 8004a46:	686c      	ldr	r4, [r5, #4]
 8004a48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a4a:	07db      	lsls	r3, r3, #31
 8004a4c:	d405      	bmi.n	8004a5a <_puts_r+0x36>
 8004a4e:	89a3      	ldrh	r3, [r4, #12]
 8004a50:	0598      	lsls	r0, r3, #22
 8004a52:	d402      	bmi.n	8004a5a <_puts_r+0x36>
 8004a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a56:	f001 fa22 	bl	8005e9e <__retarget_lock_acquire_recursive>
 8004a5a:	89a3      	ldrh	r3, [r4, #12]
 8004a5c:	0719      	lsls	r1, r3, #28
 8004a5e:	d51d      	bpl.n	8004a9c <_puts_r+0x78>
 8004a60:	6923      	ldr	r3, [r4, #16]
 8004a62:	b1db      	cbz	r3, 8004a9c <_puts_r+0x78>
 8004a64:	3e01      	subs	r6, #1
 8004a66:	68a3      	ldr	r3, [r4, #8]
 8004a68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	60a3      	str	r3, [r4, #8]
 8004a70:	bb39      	cbnz	r1, 8004ac2 <_puts_r+0x9e>
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	da38      	bge.n	8004ae8 <_puts_r+0xc4>
 8004a76:	4622      	mov	r2, r4
 8004a78:	210a      	movs	r1, #10
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	f000 f916 	bl	8004cac <__swbuf_r>
 8004a80:	3001      	adds	r0, #1
 8004a82:	d011      	beq.n	8004aa8 <_puts_r+0x84>
 8004a84:	250a      	movs	r5, #10
 8004a86:	e011      	b.n	8004aac <_puts_r+0x88>
 8004a88:	4b1b      	ldr	r3, [pc, #108]	; (8004af8 <_puts_r+0xd4>)
 8004a8a:	429c      	cmp	r4, r3
 8004a8c:	d101      	bne.n	8004a92 <_puts_r+0x6e>
 8004a8e:	68ac      	ldr	r4, [r5, #8]
 8004a90:	e7da      	b.n	8004a48 <_puts_r+0x24>
 8004a92:	4b1a      	ldr	r3, [pc, #104]	; (8004afc <_puts_r+0xd8>)
 8004a94:	429c      	cmp	r4, r3
 8004a96:	bf08      	it	eq
 8004a98:	68ec      	ldreq	r4, [r5, #12]
 8004a9a:	e7d5      	b.n	8004a48 <_puts_r+0x24>
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	f000 f956 	bl	8004d50 <__swsetup_r>
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	d0dd      	beq.n	8004a64 <_puts_r+0x40>
 8004aa8:	f04f 35ff 	mov.w	r5, #4294967295
 8004aac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004aae:	07da      	lsls	r2, r3, #31
 8004ab0:	d405      	bmi.n	8004abe <_puts_r+0x9a>
 8004ab2:	89a3      	ldrh	r3, [r4, #12]
 8004ab4:	059b      	lsls	r3, r3, #22
 8004ab6:	d402      	bmi.n	8004abe <_puts_r+0x9a>
 8004ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aba:	f001 f9f1 	bl	8005ea0 <__retarget_lock_release_recursive>
 8004abe:	4628      	mov	r0, r5
 8004ac0:	bd70      	pop	{r4, r5, r6, pc}
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	da04      	bge.n	8004ad0 <_puts_r+0xac>
 8004ac6:	69a2      	ldr	r2, [r4, #24]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	dc06      	bgt.n	8004ada <_puts_r+0xb6>
 8004acc:	290a      	cmp	r1, #10
 8004ace:	d004      	beq.n	8004ada <_puts_r+0xb6>
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	6022      	str	r2, [r4, #0]
 8004ad6:	7019      	strb	r1, [r3, #0]
 8004ad8:	e7c5      	b.n	8004a66 <_puts_r+0x42>
 8004ada:	4622      	mov	r2, r4
 8004adc:	4628      	mov	r0, r5
 8004ade:	f000 f8e5 	bl	8004cac <__swbuf_r>
 8004ae2:	3001      	adds	r0, #1
 8004ae4:	d1bf      	bne.n	8004a66 <_puts_r+0x42>
 8004ae6:	e7df      	b.n	8004aa8 <_puts_r+0x84>
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	250a      	movs	r5, #10
 8004aec:	1c5a      	adds	r2, r3, #1
 8004aee:	6022      	str	r2, [r4, #0]
 8004af0:	701d      	strb	r5, [r3, #0]
 8004af2:	e7db      	b.n	8004aac <_puts_r+0x88>
 8004af4:	08007038 	.word	0x08007038
 8004af8:	08007058 	.word	0x08007058
 8004afc:	08007018 	.word	0x08007018

08004b00 <puts>:
 8004b00:	4b02      	ldr	r3, [pc, #8]	; (8004b0c <puts+0xc>)
 8004b02:	4601      	mov	r1, r0
 8004b04:	6818      	ldr	r0, [r3, #0]
 8004b06:	f7ff bf8d 	b.w	8004a24 <_puts_r>
 8004b0a:	bf00      	nop
 8004b0c:	2000000c 	.word	0x2000000c

08004b10 <setbuf>:
 8004b10:	2900      	cmp	r1, #0
 8004b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b16:	bf0c      	ite	eq
 8004b18:	2202      	moveq	r2, #2
 8004b1a:	2200      	movne	r2, #0
 8004b1c:	f000 b800 	b.w	8004b20 <setvbuf>

08004b20 <setvbuf>:
 8004b20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004b24:	461d      	mov	r5, r3
 8004b26:	4b5d      	ldr	r3, [pc, #372]	; (8004c9c <setvbuf+0x17c>)
 8004b28:	681f      	ldr	r7, [r3, #0]
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	460e      	mov	r6, r1
 8004b2e:	4690      	mov	r8, r2
 8004b30:	b127      	cbz	r7, 8004b3c <setvbuf+0x1c>
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	b913      	cbnz	r3, 8004b3c <setvbuf+0x1c>
 8004b36:	4638      	mov	r0, r7
 8004b38:	f001 f90e 	bl	8005d58 <__sinit>
 8004b3c:	4b58      	ldr	r3, [pc, #352]	; (8004ca0 <setvbuf+0x180>)
 8004b3e:	429c      	cmp	r4, r3
 8004b40:	d167      	bne.n	8004c12 <setvbuf+0xf2>
 8004b42:	687c      	ldr	r4, [r7, #4]
 8004b44:	f1b8 0f02 	cmp.w	r8, #2
 8004b48:	d006      	beq.n	8004b58 <setvbuf+0x38>
 8004b4a:	f1b8 0f01 	cmp.w	r8, #1
 8004b4e:	f200 809f 	bhi.w	8004c90 <setvbuf+0x170>
 8004b52:	2d00      	cmp	r5, #0
 8004b54:	f2c0 809c 	blt.w	8004c90 <setvbuf+0x170>
 8004b58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b5a:	07db      	lsls	r3, r3, #31
 8004b5c:	d405      	bmi.n	8004b6a <setvbuf+0x4a>
 8004b5e:	89a3      	ldrh	r3, [r4, #12]
 8004b60:	0598      	lsls	r0, r3, #22
 8004b62:	d402      	bmi.n	8004b6a <setvbuf+0x4a>
 8004b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b66:	f001 f99a 	bl	8005e9e <__retarget_lock_acquire_recursive>
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	4638      	mov	r0, r7
 8004b6e:	f001 f85f 	bl	8005c30 <_fflush_r>
 8004b72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b74:	b141      	cbz	r1, 8004b88 <setvbuf+0x68>
 8004b76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b7a:	4299      	cmp	r1, r3
 8004b7c:	d002      	beq.n	8004b84 <setvbuf+0x64>
 8004b7e:	4638      	mov	r0, r7
 8004b80:	f001 fda4 	bl	80066cc <_free_r>
 8004b84:	2300      	movs	r3, #0
 8004b86:	6363      	str	r3, [r4, #52]	; 0x34
 8004b88:	2300      	movs	r3, #0
 8004b8a:	61a3      	str	r3, [r4, #24]
 8004b8c:	6063      	str	r3, [r4, #4]
 8004b8e:	89a3      	ldrh	r3, [r4, #12]
 8004b90:	0619      	lsls	r1, r3, #24
 8004b92:	d503      	bpl.n	8004b9c <setvbuf+0x7c>
 8004b94:	6921      	ldr	r1, [r4, #16]
 8004b96:	4638      	mov	r0, r7
 8004b98:	f001 fd98 	bl	80066cc <_free_r>
 8004b9c:	89a3      	ldrh	r3, [r4, #12]
 8004b9e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004ba2:	f023 0303 	bic.w	r3, r3, #3
 8004ba6:	f1b8 0f02 	cmp.w	r8, #2
 8004baa:	81a3      	strh	r3, [r4, #12]
 8004bac:	d06c      	beq.n	8004c88 <setvbuf+0x168>
 8004bae:	ab01      	add	r3, sp, #4
 8004bb0:	466a      	mov	r2, sp
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	4638      	mov	r0, r7
 8004bb6:	f001 f974 	bl	8005ea2 <__swhatbuf_r>
 8004bba:	89a3      	ldrh	r3, [r4, #12]
 8004bbc:	4318      	orrs	r0, r3
 8004bbe:	81a0      	strh	r0, [r4, #12]
 8004bc0:	2d00      	cmp	r5, #0
 8004bc2:	d130      	bne.n	8004c26 <setvbuf+0x106>
 8004bc4:	9d00      	ldr	r5, [sp, #0]
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	f001 f9d0 	bl	8005f6c <malloc>
 8004bcc:	4606      	mov	r6, r0
 8004bce:	2800      	cmp	r0, #0
 8004bd0:	d155      	bne.n	8004c7e <setvbuf+0x15e>
 8004bd2:	f8dd 9000 	ldr.w	r9, [sp]
 8004bd6:	45a9      	cmp	r9, r5
 8004bd8:	d14a      	bne.n	8004c70 <setvbuf+0x150>
 8004bda:	f04f 35ff 	mov.w	r5, #4294967295
 8004bde:	2200      	movs	r2, #0
 8004be0:	60a2      	str	r2, [r4, #8]
 8004be2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004be6:	6022      	str	r2, [r4, #0]
 8004be8:	6122      	str	r2, [r4, #16]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bf0:	6162      	str	r2, [r4, #20]
 8004bf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004bf4:	f043 0302 	orr.w	r3, r3, #2
 8004bf8:	07d2      	lsls	r2, r2, #31
 8004bfa:	81a3      	strh	r3, [r4, #12]
 8004bfc:	d405      	bmi.n	8004c0a <setvbuf+0xea>
 8004bfe:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004c02:	d102      	bne.n	8004c0a <setvbuf+0xea>
 8004c04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c06:	f001 f94b 	bl	8005ea0 <__retarget_lock_release_recursive>
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	b003      	add	sp, #12
 8004c0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c12:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <setvbuf+0x184>)
 8004c14:	429c      	cmp	r4, r3
 8004c16:	d101      	bne.n	8004c1c <setvbuf+0xfc>
 8004c18:	68bc      	ldr	r4, [r7, #8]
 8004c1a:	e793      	b.n	8004b44 <setvbuf+0x24>
 8004c1c:	4b22      	ldr	r3, [pc, #136]	; (8004ca8 <setvbuf+0x188>)
 8004c1e:	429c      	cmp	r4, r3
 8004c20:	bf08      	it	eq
 8004c22:	68fc      	ldreq	r4, [r7, #12]
 8004c24:	e78e      	b.n	8004b44 <setvbuf+0x24>
 8004c26:	2e00      	cmp	r6, #0
 8004c28:	d0cd      	beq.n	8004bc6 <setvbuf+0xa6>
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	b913      	cbnz	r3, 8004c34 <setvbuf+0x114>
 8004c2e:	4638      	mov	r0, r7
 8004c30:	f001 f892 	bl	8005d58 <__sinit>
 8004c34:	f1b8 0f01 	cmp.w	r8, #1
 8004c38:	bf08      	it	eq
 8004c3a:	89a3      	ldrheq	r3, [r4, #12]
 8004c3c:	6026      	str	r6, [r4, #0]
 8004c3e:	bf04      	itt	eq
 8004c40:	f043 0301 	orreq.w	r3, r3, #1
 8004c44:	81a3      	strheq	r3, [r4, #12]
 8004c46:	89a2      	ldrh	r2, [r4, #12]
 8004c48:	f012 0308 	ands.w	r3, r2, #8
 8004c4c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004c50:	d01c      	beq.n	8004c8c <setvbuf+0x16c>
 8004c52:	07d3      	lsls	r3, r2, #31
 8004c54:	bf41      	itttt	mi
 8004c56:	2300      	movmi	r3, #0
 8004c58:	426d      	negmi	r5, r5
 8004c5a:	60a3      	strmi	r3, [r4, #8]
 8004c5c:	61a5      	strmi	r5, [r4, #24]
 8004c5e:	bf58      	it	pl
 8004c60:	60a5      	strpl	r5, [r4, #8]
 8004c62:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004c64:	f015 0501 	ands.w	r5, r5, #1
 8004c68:	d115      	bne.n	8004c96 <setvbuf+0x176>
 8004c6a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004c6e:	e7c8      	b.n	8004c02 <setvbuf+0xe2>
 8004c70:	4648      	mov	r0, r9
 8004c72:	f001 f97b 	bl	8005f6c <malloc>
 8004c76:	4606      	mov	r6, r0
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	d0ae      	beq.n	8004bda <setvbuf+0xba>
 8004c7c:	464d      	mov	r5, r9
 8004c7e:	89a3      	ldrh	r3, [r4, #12]
 8004c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c84:	81a3      	strh	r3, [r4, #12]
 8004c86:	e7d0      	b.n	8004c2a <setvbuf+0x10a>
 8004c88:	2500      	movs	r5, #0
 8004c8a:	e7a8      	b.n	8004bde <setvbuf+0xbe>
 8004c8c:	60a3      	str	r3, [r4, #8]
 8004c8e:	e7e8      	b.n	8004c62 <setvbuf+0x142>
 8004c90:	f04f 35ff 	mov.w	r5, #4294967295
 8004c94:	e7b9      	b.n	8004c0a <setvbuf+0xea>
 8004c96:	2500      	movs	r5, #0
 8004c98:	e7b7      	b.n	8004c0a <setvbuf+0xea>
 8004c9a:	bf00      	nop
 8004c9c:	2000000c 	.word	0x2000000c
 8004ca0:	08007038 	.word	0x08007038
 8004ca4:	08007058 	.word	0x08007058
 8004ca8:	08007018 	.word	0x08007018

08004cac <__swbuf_r>:
 8004cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cae:	460e      	mov	r6, r1
 8004cb0:	4614      	mov	r4, r2
 8004cb2:	4605      	mov	r5, r0
 8004cb4:	b118      	cbz	r0, 8004cbe <__swbuf_r+0x12>
 8004cb6:	6983      	ldr	r3, [r0, #24]
 8004cb8:	b90b      	cbnz	r3, 8004cbe <__swbuf_r+0x12>
 8004cba:	f001 f84d 	bl	8005d58 <__sinit>
 8004cbe:	4b21      	ldr	r3, [pc, #132]	; (8004d44 <__swbuf_r+0x98>)
 8004cc0:	429c      	cmp	r4, r3
 8004cc2:	d12b      	bne.n	8004d1c <__swbuf_r+0x70>
 8004cc4:	686c      	ldr	r4, [r5, #4]
 8004cc6:	69a3      	ldr	r3, [r4, #24]
 8004cc8:	60a3      	str	r3, [r4, #8]
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	071a      	lsls	r2, r3, #28
 8004cce:	d52f      	bpl.n	8004d30 <__swbuf_r+0x84>
 8004cd0:	6923      	ldr	r3, [r4, #16]
 8004cd2:	b36b      	cbz	r3, 8004d30 <__swbuf_r+0x84>
 8004cd4:	6923      	ldr	r3, [r4, #16]
 8004cd6:	6820      	ldr	r0, [r4, #0]
 8004cd8:	1ac0      	subs	r0, r0, r3
 8004cda:	6963      	ldr	r3, [r4, #20]
 8004cdc:	b2f6      	uxtb	r6, r6
 8004cde:	4283      	cmp	r3, r0
 8004ce0:	4637      	mov	r7, r6
 8004ce2:	dc04      	bgt.n	8004cee <__swbuf_r+0x42>
 8004ce4:	4621      	mov	r1, r4
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	f000 ffa2 	bl	8005c30 <_fflush_r>
 8004cec:	bb30      	cbnz	r0, 8004d3c <__swbuf_r+0x90>
 8004cee:	68a3      	ldr	r3, [r4, #8]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	60a3      	str	r3, [r4, #8]
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	6022      	str	r2, [r4, #0]
 8004cfa:	701e      	strb	r6, [r3, #0]
 8004cfc:	6963      	ldr	r3, [r4, #20]
 8004cfe:	3001      	adds	r0, #1
 8004d00:	4283      	cmp	r3, r0
 8004d02:	d004      	beq.n	8004d0e <__swbuf_r+0x62>
 8004d04:	89a3      	ldrh	r3, [r4, #12]
 8004d06:	07db      	lsls	r3, r3, #31
 8004d08:	d506      	bpl.n	8004d18 <__swbuf_r+0x6c>
 8004d0a:	2e0a      	cmp	r6, #10
 8004d0c:	d104      	bne.n	8004d18 <__swbuf_r+0x6c>
 8004d0e:	4621      	mov	r1, r4
 8004d10:	4628      	mov	r0, r5
 8004d12:	f000 ff8d 	bl	8005c30 <_fflush_r>
 8004d16:	b988      	cbnz	r0, 8004d3c <__swbuf_r+0x90>
 8004d18:	4638      	mov	r0, r7
 8004d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d1c:	4b0a      	ldr	r3, [pc, #40]	; (8004d48 <__swbuf_r+0x9c>)
 8004d1e:	429c      	cmp	r4, r3
 8004d20:	d101      	bne.n	8004d26 <__swbuf_r+0x7a>
 8004d22:	68ac      	ldr	r4, [r5, #8]
 8004d24:	e7cf      	b.n	8004cc6 <__swbuf_r+0x1a>
 8004d26:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <__swbuf_r+0xa0>)
 8004d28:	429c      	cmp	r4, r3
 8004d2a:	bf08      	it	eq
 8004d2c:	68ec      	ldreq	r4, [r5, #12]
 8004d2e:	e7ca      	b.n	8004cc6 <__swbuf_r+0x1a>
 8004d30:	4621      	mov	r1, r4
 8004d32:	4628      	mov	r0, r5
 8004d34:	f000 f80c 	bl	8004d50 <__swsetup_r>
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	d0cb      	beq.n	8004cd4 <__swbuf_r+0x28>
 8004d3c:	f04f 37ff 	mov.w	r7, #4294967295
 8004d40:	e7ea      	b.n	8004d18 <__swbuf_r+0x6c>
 8004d42:	bf00      	nop
 8004d44:	08007038 	.word	0x08007038
 8004d48:	08007058 	.word	0x08007058
 8004d4c:	08007018 	.word	0x08007018

08004d50 <__swsetup_r>:
 8004d50:	4b32      	ldr	r3, [pc, #200]	; (8004e1c <__swsetup_r+0xcc>)
 8004d52:	b570      	push	{r4, r5, r6, lr}
 8004d54:	681d      	ldr	r5, [r3, #0]
 8004d56:	4606      	mov	r6, r0
 8004d58:	460c      	mov	r4, r1
 8004d5a:	b125      	cbz	r5, 8004d66 <__swsetup_r+0x16>
 8004d5c:	69ab      	ldr	r3, [r5, #24]
 8004d5e:	b913      	cbnz	r3, 8004d66 <__swsetup_r+0x16>
 8004d60:	4628      	mov	r0, r5
 8004d62:	f000 fff9 	bl	8005d58 <__sinit>
 8004d66:	4b2e      	ldr	r3, [pc, #184]	; (8004e20 <__swsetup_r+0xd0>)
 8004d68:	429c      	cmp	r4, r3
 8004d6a:	d10f      	bne.n	8004d8c <__swsetup_r+0x3c>
 8004d6c:	686c      	ldr	r4, [r5, #4]
 8004d6e:	89a3      	ldrh	r3, [r4, #12]
 8004d70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d74:	0719      	lsls	r1, r3, #28
 8004d76:	d42c      	bmi.n	8004dd2 <__swsetup_r+0x82>
 8004d78:	06dd      	lsls	r5, r3, #27
 8004d7a:	d411      	bmi.n	8004da0 <__swsetup_r+0x50>
 8004d7c:	2309      	movs	r3, #9
 8004d7e:	6033      	str	r3, [r6, #0]
 8004d80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d84:	81a3      	strh	r3, [r4, #12]
 8004d86:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8a:	e03e      	b.n	8004e0a <__swsetup_r+0xba>
 8004d8c:	4b25      	ldr	r3, [pc, #148]	; (8004e24 <__swsetup_r+0xd4>)
 8004d8e:	429c      	cmp	r4, r3
 8004d90:	d101      	bne.n	8004d96 <__swsetup_r+0x46>
 8004d92:	68ac      	ldr	r4, [r5, #8]
 8004d94:	e7eb      	b.n	8004d6e <__swsetup_r+0x1e>
 8004d96:	4b24      	ldr	r3, [pc, #144]	; (8004e28 <__swsetup_r+0xd8>)
 8004d98:	429c      	cmp	r4, r3
 8004d9a:	bf08      	it	eq
 8004d9c:	68ec      	ldreq	r4, [r5, #12]
 8004d9e:	e7e6      	b.n	8004d6e <__swsetup_r+0x1e>
 8004da0:	0758      	lsls	r0, r3, #29
 8004da2:	d512      	bpl.n	8004dca <__swsetup_r+0x7a>
 8004da4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004da6:	b141      	cbz	r1, 8004dba <__swsetup_r+0x6a>
 8004da8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dac:	4299      	cmp	r1, r3
 8004dae:	d002      	beq.n	8004db6 <__swsetup_r+0x66>
 8004db0:	4630      	mov	r0, r6
 8004db2:	f001 fc8b 	bl	80066cc <_free_r>
 8004db6:	2300      	movs	r3, #0
 8004db8:	6363      	str	r3, [r4, #52]	; 0x34
 8004dba:	89a3      	ldrh	r3, [r4, #12]
 8004dbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004dc0:	81a3      	strh	r3, [r4, #12]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	6063      	str	r3, [r4, #4]
 8004dc6:	6923      	ldr	r3, [r4, #16]
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	89a3      	ldrh	r3, [r4, #12]
 8004dcc:	f043 0308 	orr.w	r3, r3, #8
 8004dd0:	81a3      	strh	r3, [r4, #12]
 8004dd2:	6923      	ldr	r3, [r4, #16]
 8004dd4:	b94b      	cbnz	r3, 8004dea <__swsetup_r+0x9a>
 8004dd6:	89a3      	ldrh	r3, [r4, #12]
 8004dd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004de0:	d003      	beq.n	8004dea <__swsetup_r+0x9a>
 8004de2:	4621      	mov	r1, r4
 8004de4:	4630      	mov	r0, r6
 8004de6:	f001 f881 	bl	8005eec <__smakebuf_r>
 8004dea:	89a0      	ldrh	r0, [r4, #12]
 8004dec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004df0:	f010 0301 	ands.w	r3, r0, #1
 8004df4:	d00a      	beq.n	8004e0c <__swsetup_r+0xbc>
 8004df6:	2300      	movs	r3, #0
 8004df8:	60a3      	str	r3, [r4, #8]
 8004dfa:	6963      	ldr	r3, [r4, #20]
 8004dfc:	425b      	negs	r3, r3
 8004dfe:	61a3      	str	r3, [r4, #24]
 8004e00:	6923      	ldr	r3, [r4, #16]
 8004e02:	b943      	cbnz	r3, 8004e16 <__swsetup_r+0xc6>
 8004e04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e08:	d1ba      	bne.n	8004d80 <__swsetup_r+0x30>
 8004e0a:	bd70      	pop	{r4, r5, r6, pc}
 8004e0c:	0781      	lsls	r1, r0, #30
 8004e0e:	bf58      	it	pl
 8004e10:	6963      	ldrpl	r3, [r4, #20]
 8004e12:	60a3      	str	r3, [r4, #8]
 8004e14:	e7f4      	b.n	8004e00 <__swsetup_r+0xb0>
 8004e16:	2000      	movs	r0, #0
 8004e18:	e7f7      	b.n	8004e0a <__swsetup_r+0xba>
 8004e1a:	bf00      	nop
 8004e1c:	2000000c 	.word	0x2000000c
 8004e20:	08007038 	.word	0x08007038
 8004e24:	08007058 	.word	0x08007058
 8004e28:	08007018 	.word	0x08007018

08004e2c <quorem>:
 8004e2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e30:	6903      	ldr	r3, [r0, #16]
 8004e32:	690c      	ldr	r4, [r1, #16]
 8004e34:	42a3      	cmp	r3, r4
 8004e36:	4607      	mov	r7, r0
 8004e38:	f2c0 8081 	blt.w	8004f3e <quorem+0x112>
 8004e3c:	3c01      	subs	r4, #1
 8004e3e:	f101 0814 	add.w	r8, r1, #20
 8004e42:	f100 0514 	add.w	r5, r0, #20
 8004e46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e4a:	9301      	str	r3, [sp, #4]
 8004e4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e54:	3301      	adds	r3, #1
 8004e56:	429a      	cmp	r2, r3
 8004e58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e60:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e64:	d331      	bcc.n	8004eca <quorem+0x9e>
 8004e66:	f04f 0e00 	mov.w	lr, #0
 8004e6a:	4640      	mov	r0, r8
 8004e6c:	46ac      	mov	ip, r5
 8004e6e:	46f2      	mov	sl, lr
 8004e70:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e74:	b293      	uxth	r3, r2
 8004e76:	fb06 e303 	mla	r3, r6, r3, lr
 8004e7a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	ebaa 0303 	sub.w	r3, sl, r3
 8004e84:	f8dc a000 	ldr.w	sl, [ip]
 8004e88:	0c12      	lsrs	r2, r2, #16
 8004e8a:	fa13 f38a 	uxtah	r3, r3, sl
 8004e8e:	fb06 e202 	mla	r2, r6, r2, lr
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	9b00      	ldr	r3, [sp, #0]
 8004e96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e9a:	b292      	uxth	r2, r2
 8004e9c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004ea0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ea4:	f8bd 3000 	ldrh.w	r3, [sp]
 8004ea8:	4581      	cmp	r9, r0
 8004eaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004eae:	f84c 3b04 	str.w	r3, [ip], #4
 8004eb2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004eb6:	d2db      	bcs.n	8004e70 <quorem+0x44>
 8004eb8:	f855 300b 	ldr.w	r3, [r5, fp]
 8004ebc:	b92b      	cbnz	r3, 8004eca <quorem+0x9e>
 8004ebe:	9b01      	ldr	r3, [sp, #4]
 8004ec0:	3b04      	subs	r3, #4
 8004ec2:	429d      	cmp	r5, r3
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	d32e      	bcc.n	8004f26 <quorem+0xfa>
 8004ec8:	613c      	str	r4, [r7, #16]
 8004eca:	4638      	mov	r0, r7
 8004ecc:	f001 fae6 	bl	800649c <__mcmp>
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	db24      	blt.n	8004f1e <quorem+0xf2>
 8004ed4:	3601      	adds	r6, #1
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	f04f 0c00 	mov.w	ip, #0
 8004edc:	f858 2b04 	ldr.w	r2, [r8], #4
 8004ee0:	f8d0 e000 	ldr.w	lr, [r0]
 8004ee4:	b293      	uxth	r3, r2
 8004ee6:	ebac 0303 	sub.w	r3, ip, r3
 8004eea:	0c12      	lsrs	r2, r2, #16
 8004eec:	fa13 f38e 	uxtah	r3, r3, lr
 8004ef0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ef4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004efe:	45c1      	cmp	r9, r8
 8004f00:	f840 3b04 	str.w	r3, [r0], #4
 8004f04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f08:	d2e8      	bcs.n	8004edc <quorem+0xb0>
 8004f0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f12:	b922      	cbnz	r2, 8004f1e <quorem+0xf2>
 8004f14:	3b04      	subs	r3, #4
 8004f16:	429d      	cmp	r5, r3
 8004f18:	461a      	mov	r2, r3
 8004f1a:	d30a      	bcc.n	8004f32 <quorem+0x106>
 8004f1c:	613c      	str	r4, [r7, #16]
 8004f1e:	4630      	mov	r0, r6
 8004f20:	b003      	add	sp, #12
 8004f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f26:	6812      	ldr	r2, [r2, #0]
 8004f28:	3b04      	subs	r3, #4
 8004f2a:	2a00      	cmp	r2, #0
 8004f2c:	d1cc      	bne.n	8004ec8 <quorem+0x9c>
 8004f2e:	3c01      	subs	r4, #1
 8004f30:	e7c7      	b.n	8004ec2 <quorem+0x96>
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	3b04      	subs	r3, #4
 8004f36:	2a00      	cmp	r2, #0
 8004f38:	d1f0      	bne.n	8004f1c <quorem+0xf0>
 8004f3a:	3c01      	subs	r4, #1
 8004f3c:	e7eb      	b.n	8004f16 <quorem+0xea>
 8004f3e:	2000      	movs	r0, #0
 8004f40:	e7ee      	b.n	8004f20 <quorem+0xf4>
 8004f42:	0000      	movs	r0, r0
 8004f44:	0000      	movs	r0, r0
	...

08004f48 <_dtoa_r>:
 8004f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f4c:	ed2d 8b04 	vpush	{d8-d9}
 8004f50:	ec57 6b10 	vmov	r6, r7, d0
 8004f54:	b093      	sub	sp, #76	; 0x4c
 8004f56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004f5c:	9106      	str	r1, [sp, #24]
 8004f5e:	ee10 aa10 	vmov	sl, s0
 8004f62:	4604      	mov	r4, r0
 8004f64:	9209      	str	r2, [sp, #36]	; 0x24
 8004f66:	930c      	str	r3, [sp, #48]	; 0x30
 8004f68:	46bb      	mov	fp, r7
 8004f6a:	b975      	cbnz	r5, 8004f8a <_dtoa_r+0x42>
 8004f6c:	2010      	movs	r0, #16
 8004f6e:	f000 fffd 	bl	8005f6c <malloc>
 8004f72:	4602      	mov	r2, r0
 8004f74:	6260      	str	r0, [r4, #36]	; 0x24
 8004f76:	b920      	cbnz	r0, 8004f82 <_dtoa_r+0x3a>
 8004f78:	4ba7      	ldr	r3, [pc, #668]	; (8005218 <_dtoa_r+0x2d0>)
 8004f7a:	21ea      	movs	r1, #234	; 0xea
 8004f7c:	48a7      	ldr	r0, [pc, #668]	; (800521c <_dtoa_r+0x2d4>)
 8004f7e:	f001 fe45 	bl	8006c0c <__assert_func>
 8004f82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f86:	6005      	str	r5, [r0, #0]
 8004f88:	60c5      	str	r5, [r0, #12]
 8004f8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f8c:	6819      	ldr	r1, [r3, #0]
 8004f8e:	b151      	cbz	r1, 8004fa6 <_dtoa_r+0x5e>
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	604a      	str	r2, [r1, #4]
 8004f94:	2301      	movs	r3, #1
 8004f96:	4093      	lsls	r3, r2
 8004f98:	608b      	str	r3, [r1, #8]
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	f001 f83c 	bl	8006018 <_Bfree>
 8004fa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	1e3b      	subs	r3, r7, #0
 8004fa8:	bfaa      	itet	ge
 8004faa:	2300      	movge	r3, #0
 8004fac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004fb0:	f8c8 3000 	strge.w	r3, [r8]
 8004fb4:	4b9a      	ldr	r3, [pc, #616]	; (8005220 <_dtoa_r+0x2d8>)
 8004fb6:	bfbc      	itt	lt
 8004fb8:	2201      	movlt	r2, #1
 8004fba:	f8c8 2000 	strlt.w	r2, [r8]
 8004fbe:	ea33 030b 	bics.w	r3, r3, fp
 8004fc2:	d11b      	bne.n	8004ffc <_dtoa_r+0xb4>
 8004fc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fc6:	f242 730f 	movw	r3, #9999	; 0x270f
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004fd0:	4333      	orrs	r3, r6
 8004fd2:	f000 8592 	beq.w	8005afa <_dtoa_r+0xbb2>
 8004fd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fd8:	b963      	cbnz	r3, 8004ff4 <_dtoa_r+0xac>
 8004fda:	4b92      	ldr	r3, [pc, #584]	; (8005224 <_dtoa_r+0x2dc>)
 8004fdc:	e022      	b.n	8005024 <_dtoa_r+0xdc>
 8004fde:	4b92      	ldr	r3, [pc, #584]	; (8005228 <_dtoa_r+0x2e0>)
 8004fe0:	9301      	str	r3, [sp, #4]
 8004fe2:	3308      	adds	r3, #8
 8004fe4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	9801      	ldr	r0, [sp, #4]
 8004fea:	b013      	add	sp, #76	; 0x4c
 8004fec:	ecbd 8b04 	vpop	{d8-d9}
 8004ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff4:	4b8b      	ldr	r3, [pc, #556]	; (8005224 <_dtoa_r+0x2dc>)
 8004ff6:	9301      	str	r3, [sp, #4]
 8004ff8:	3303      	adds	r3, #3
 8004ffa:	e7f3      	b.n	8004fe4 <_dtoa_r+0x9c>
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	2300      	movs	r3, #0
 8005000:	4650      	mov	r0, sl
 8005002:	4659      	mov	r1, fp
 8005004:	f7fb fd60 	bl	8000ac8 <__aeabi_dcmpeq>
 8005008:	ec4b ab19 	vmov	d9, sl, fp
 800500c:	4680      	mov	r8, r0
 800500e:	b158      	cbz	r0, 8005028 <_dtoa_r+0xe0>
 8005010:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005012:	2301      	movs	r3, #1
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 856b 	beq.w	8005af4 <_dtoa_r+0xbac>
 800501e:	4883      	ldr	r0, [pc, #524]	; (800522c <_dtoa_r+0x2e4>)
 8005020:	6018      	str	r0, [r3, #0]
 8005022:	1e43      	subs	r3, r0, #1
 8005024:	9301      	str	r3, [sp, #4]
 8005026:	e7df      	b.n	8004fe8 <_dtoa_r+0xa0>
 8005028:	ec4b ab10 	vmov	d0, sl, fp
 800502c:	aa10      	add	r2, sp, #64	; 0x40
 800502e:	a911      	add	r1, sp, #68	; 0x44
 8005030:	4620      	mov	r0, r4
 8005032:	f001 fad9 	bl	80065e8 <__d2b>
 8005036:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800503a:	ee08 0a10 	vmov	s16, r0
 800503e:	2d00      	cmp	r5, #0
 8005040:	f000 8084 	beq.w	800514c <_dtoa_r+0x204>
 8005044:	ee19 3a90 	vmov	r3, s19
 8005048:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800504c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005050:	4656      	mov	r6, sl
 8005052:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005056:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800505a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800505e:	4b74      	ldr	r3, [pc, #464]	; (8005230 <_dtoa_r+0x2e8>)
 8005060:	2200      	movs	r2, #0
 8005062:	4630      	mov	r0, r6
 8005064:	4639      	mov	r1, r7
 8005066:	f7fb f90f 	bl	8000288 <__aeabi_dsub>
 800506a:	a365      	add	r3, pc, #404	; (adr r3, 8005200 <_dtoa_r+0x2b8>)
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	f7fb fac2 	bl	80005f8 <__aeabi_dmul>
 8005074:	a364      	add	r3, pc, #400	; (adr r3, 8005208 <_dtoa_r+0x2c0>)
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	f7fb f907 	bl	800028c <__adddf3>
 800507e:	4606      	mov	r6, r0
 8005080:	4628      	mov	r0, r5
 8005082:	460f      	mov	r7, r1
 8005084:	f7fb fa4e 	bl	8000524 <__aeabi_i2d>
 8005088:	a361      	add	r3, pc, #388	; (adr r3, 8005210 <_dtoa_r+0x2c8>)
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	f7fb fab3 	bl	80005f8 <__aeabi_dmul>
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	4630      	mov	r0, r6
 8005098:	4639      	mov	r1, r7
 800509a:	f7fb f8f7 	bl	800028c <__adddf3>
 800509e:	4606      	mov	r6, r0
 80050a0:	460f      	mov	r7, r1
 80050a2:	f7fb fd59 	bl	8000b58 <__aeabi_d2iz>
 80050a6:	2200      	movs	r2, #0
 80050a8:	9000      	str	r0, [sp, #0]
 80050aa:	2300      	movs	r3, #0
 80050ac:	4630      	mov	r0, r6
 80050ae:	4639      	mov	r1, r7
 80050b0:	f7fb fd14 	bl	8000adc <__aeabi_dcmplt>
 80050b4:	b150      	cbz	r0, 80050cc <_dtoa_r+0x184>
 80050b6:	9800      	ldr	r0, [sp, #0]
 80050b8:	f7fb fa34 	bl	8000524 <__aeabi_i2d>
 80050bc:	4632      	mov	r2, r6
 80050be:	463b      	mov	r3, r7
 80050c0:	f7fb fd02 	bl	8000ac8 <__aeabi_dcmpeq>
 80050c4:	b910      	cbnz	r0, 80050cc <_dtoa_r+0x184>
 80050c6:	9b00      	ldr	r3, [sp, #0]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	9b00      	ldr	r3, [sp, #0]
 80050ce:	2b16      	cmp	r3, #22
 80050d0:	d85a      	bhi.n	8005188 <_dtoa_r+0x240>
 80050d2:	9a00      	ldr	r2, [sp, #0]
 80050d4:	4b57      	ldr	r3, [pc, #348]	; (8005234 <_dtoa_r+0x2ec>)
 80050d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050de:	ec51 0b19 	vmov	r0, r1, d9
 80050e2:	f7fb fcfb 	bl	8000adc <__aeabi_dcmplt>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	d050      	beq.n	800518c <_dtoa_r+0x244>
 80050ea:	9b00      	ldr	r3, [sp, #0]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	2300      	movs	r3, #0
 80050f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80050f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050f6:	1b5d      	subs	r5, r3, r5
 80050f8:	1e6b      	subs	r3, r5, #1
 80050fa:	9305      	str	r3, [sp, #20]
 80050fc:	bf45      	ittet	mi
 80050fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8005102:	9304      	strmi	r3, [sp, #16]
 8005104:	2300      	movpl	r3, #0
 8005106:	2300      	movmi	r3, #0
 8005108:	bf4c      	ite	mi
 800510a:	9305      	strmi	r3, [sp, #20]
 800510c:	9304      	strpl	r3, [sp, #16]
 800510e:	9b00      	ldr	r3, [sp, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	db3d      	blt.n	8005190 <_dtoa_r+0x248>
 8005114:	9b05      	ldr	r3, [sp, #20]
 8005116:	9a00      	ldr	r2, [sp, #0]
 8005118:	920a      	str	r2, [sp, #40]	; 0x28
 800511a:	4413      	add	r3, r2
 800511c:	9305      	str	r3, [sp, #20]
 800511e:	2300      	movs	r3, #0
 8005120:	9307      	str	r3, [sp, #28]
 8005122:	9b06      	ldr	r3, [sp, #24]
 8005124:	2b09      	cmp	r3, #9
 8005126:	f200 8089 	bhi.w	800523c <_dtoa_r+0x2f4>
 800512a:	2b05      	cmp	r3, #5
 800512c:	bfc4      	itt	gt
 800512e:	3b04      	subgt	r3, #4
 8005130:	9306      	strgt	r3, [sp, #24]
 8005132:	9b06      	ldr	r3, [sp, #24]
 8005134:	f1a3 0302 	sub.w	r3, r3, #2
 8005138:	bfcc      	ite	gt
 800513a:	2500      	movgt	r5, #0
 800513c:	2501      	movle	r5, #1
 800513e:	2b03      	cmp	r3, #3
 8005140:	f200 8087 	bhi.w	8005252 <_dtoa_r+0x30a>
 8005144:	e8df f003 	tbb	[pc, r3]
 8005148:	59383a2d 	.word	0x59383a2d
 800514c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005150:	441d      	add	r5, r3
 8005152:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005156:	2b20      	cmp	r3, #32
 8005158:	bfc1      	itttt	gt
 800515a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800515e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005162:	fa0b f303 	lslgt.w	r3, fp, r3
 8005166:	fa26 f000 	lsrgt.w	r0, r6, r0
 800516a:	bfda      	itte	le
 800516c:	f1c3 0320 	rsble	r3, r3, #32
 8005170:	fa06 f003 	lslle.w	r0, r6, r3
 8005174:	4318      	orrgt	r0, r3
 8005176:	f7fb f9c5 	bl	8000504 <__aeabi_ui2d>
 800517a:	2301      	movs	r3, #1
 800517c:	4606      	mov	r6, r0
 800517e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005182:	3d01      	subs	r5, #1
 8005184:	930e      	str	r3, [sp, #56]	; 0x38
 8005186:	e76a      	b.n	800505e <_dtoa_r+0x116>
 8005188:	2301      	movs	r3, #1
 800518a:	e7b2      	b.n	80050f2 <_dtoa_r+0x1aa>
 800518c:	900b      	str	r0, [sp, #44]	; 0x2c
 800518e:	e7b1      	b.n	80050f4 <_dtoa_r+0x1ac>
 8005190:	9b04      	ldr	r3, [sp, #16]
 8005192:	9a00      	ldr	r2, [sp, #0]
 8005194:	1a9b      	subs	r3, r3, r2
 8005196:	9304      	str	r3, [sp, #16]
 8005198:	4253      	negs	r3, r2
 800519a:	9307      	str	r3, [sp, #28]
 800519c:	2300      	movs	r3, #0
 800519e:	930a      	str	r3, [sp, #40]	; 0x28
 80051a0:	e7bf      	b.n	8005122 <_dtoa_r+0x1da>
 80051a2:	2300      	movs	r3, #0
 80051a4:	9308      	str	r3, [sp, #32]
 80051a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	dc55      	bgt.n	8005258 <_dtoa_r+0x310>
 80051ac:	2301      	movs	r3, #1
 80051ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80051b2:	461a      	mov	r2, r3
 80051b4:	9209      	str	r2, [sp, #36]	; 0x24
 80051b6:	e00c      	b.n	80051d2 <_dtoa_r+0x28a>
 80051b8:	2301      	movs	r3, #1
 80051ba:	e7f3      	b.n	80051a4 <_dtoa_r+0x25c>
 80051bc:	2300      	movs	r3, #0
 80051be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051c0:	9308      	str	r3, [sp, #32]
 80051c2:	9b00      	ldr	r3, [sp, #0]
 80051c4:	4413      	add	r3, r2
 80051c6:	9302      	str	r3, [sp, #8]
 80051c8:	3301      	adds	r3, #1
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	9303      	str	r3, [sp, #12]
 80051ce:	bfb8      	it	lt
 80051d0:	2301      	movlt	r3, #1
 80051d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80051d4:	2200      	movs	r2, #0
 80051d6:	6042      	str	r2, [r0, #4]
 80051d8:	2204      	movs	r2, #4
 80051da:	f102 0614 	add.w	r6, r2, #20
 80051de:	429e      	cmp	r6, r3
 80051e0:	6841      	ldr	r1, [r0, #4]
 80051e2:	d93d      	bls.n	8005260 <_dtoa_r+0x318>
 80051e4:	4620      	mov	r0, r4
 80051e6:	f000 fed7 	bl	8005f98 <_Balloc>
 80051ea:	9001      	str	r0, [sp, #4]
 80051ec:	2800      	cmp	r0, #0
 80051ee:	d13b      	bne.n	8005268 <_dtoa_r+0x320>
 80051f0:	4b11      	ldr	r3, [pc, #68]	; (8005238 <_dtoa_r+0x2f0>)
 80051f2:	4602      	mov	r2, r0
 80051f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80051f8:	e6c0      	b.n	8004f7c <_dtoa_r+0x34>
 80051fa:	2301      	movs	r3, #1
 80051fc:	e7df      	b.n	80051be <_dtoa_r+0x276>
 80051fe:	bf00      	nop
 8005200:	636f4361 	.word	0x636f4361
 8005204:	3fd287a7 	.word	0x3fd287a7
 8005208:	8b60c8b3 	.word	0x8b60c8b3
 800520c:	3fc68a28 	.word	0x3fc68a28
 8005210:	509f79fb 	.word	0x509f79fb
 8005214:	3fd34413 	.word	0x3fd34413
 8005218:	08006f95 	.word	0x08006f95
 800521c:	08006fac 	.word	0x08006fac
 8005220:	7ff00000 	.word	0x7ff00000
 8005224:	08006f91 	.word	0x08006f91
 8005228:	08006f88 	.word	0x08006f88
 800522c:	08006f65 	.word	0x08006f65
 8005230:	3ff80000 	.word	0x3ff80000
 8005234:	08007100 	.word	0x08007100
 8005238:	08007007 	.word	0x08007007
 800523c:	2501      	movs	r5, #1
 800523e:	2300      	movs	r3, #0
 8005240:	9306      	str	r3, [sp, #24]
 8005242:	9508      	str	r5, [sp, #32]
 8005244:	f04f 33ff 	mov.w	r3, #4294967295
 8005248:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800524c:	2200      	movs	r2, #0
 800524e:	2312      	movs	r3, #18
 8005250:	e7b0      	b.n	80051b4 <_dtoa_r+0x26c>
 8005252:	2301      	movs	r3, #1
 8005254:	9308      	str	r3, [sp, #32]
 8005256:	e7f5      	b.n	8005244 <_dtoa_r+0x2fc>
 8005258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800525a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800525e:	e7b8      	b.n	80051d2 <_dtoa_r+0x28a>
 8005260:	3101      	adds	r1, #1
 8005262:	6041      	str	r1, [r0, #4]
 8005264:	0052      	lsls	r2, r2, #1
 8005266:	e7b8      	b.n	80051da <_dtoa_r+0x292>
 8005268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800526a:	9a01      	ldr	r2, [sp, #4]
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	9b03      	ldr	r3, [sp, #12]
 8005270:	2b0e      	cmp	r3, #14
 8005272:	f200 809d 	bhi.w	80053b0 <_dtoa_r+0x468>
 8005276:	2d00      	cmp	r5, #0
 8005278:	f000 809a 	beq.w	80053b0 <_dtoa_r+0x468>
 800527c:	9b00      	ldr	r3, [sp, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	dd32      	ble.n	80052e8 <_dtoa_r+0x3a0>
 8005282:	4ab7      	ldr	r2, [pc, #732]	; (8005560 <_dtoa_r+0x618>)
 8005284:	f003 030f 	and.w	r3, r3, #15
 8005288:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800528c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005290:	9b00      	ldr	r3, [sp, #0]
 8005292:	05d8      	lsls	r0, r3, #23
 8005294:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005298:	d516      	bpl.n	80052c8 <_dtoa_r+0x380>
 800529a:	4bb2      	ldr	r3, [pc, #712]	; (8005564 <_dtoa_r+0x61c>)
 800529c:	ec51 0b19 	vmov	r0, r1, d9
 80052a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052a4:	f7fb fad2 	bl	800084c <__aeabi_ddiv>
 80052a8:	f007 070f 	and.w	r7, r7, #15
 80052ac:	4682      	mov	sl, r0
 80052ae:	468b      	mov	fp, r1
 80052b0:	2503      	movs	r5, #3
 80052b2:	4eac      	ldr	r6, [pc, #688]	; (8005564 <_dtoa_r+0x61c>)
 80052b4:	b957      	cbnz	r7, 80052cc <_dtoa_r+0x384>
 80052b6:	4642      	mov	r2, r8
 80052b8:	464b      	mov	r3, r9
 80052ba:	4650      	mov	r0, sl
 80052bc:	4659      	mov	r1, fp
 80052be:	f7fb fac5 	bl	800084c <__aeabi_ddiv>
 80052c2:	4682      	mov	sl, r0
 80052c4:	468b      	mov	fp, r1
 80052c6:	e028      	b.n	800531a <_dtoa_r+0x3d2>
 80052c8:	2502      	movs	r5, #2
 80052ca:	e7f2      	b.n	80052b2 <_dtoa_r+0x36a>
 80052cc:	07f9      	lsls	r1, r7, #31
 80052ce:	d508      	bpl.n	80052e2 <_dtoa_r+0x39a>
 80052d0:	4640      	mov	r0, r8
 80052d2:	4649      	mov	r1, r9
 80052d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80052d8:	f7fb f98e 	bl	80005f8 <__aeabi_dmul>
 80052dc:	3501      	adds	r5, #1
 80052de:	4680      	mov	r8, r0
 80052e0:	4689      	mov	r9, r1
 80052e2:	107f      	asrs	r7, r7, #1
 80052e4:	3608      	adds	r6, #8
 80052e6:	e7e5      	b.n	80052b4 <_dtoa_r+0x36c>
 80052e8:	f000 809b 	beq.w	8005422 <_dtoa_r+0x4da>
 80052ec:	9b00      	ldr	r3, [sp, #0]
 80052ee:	4f9d      	ldr	r7, [pc, #628]	; (8005564 <_dtoa_r+0x61c>)
 80052f0:	425e      	negs	r6, r3
 80052f2:	4b9b      	ldr	r3, [pc, #620]	; (8005560 <_dtoa_r+0x618>)
 80052f4:	f006 020f 	and.w	r2, r6, #15
 80052f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005300:	ec51 0b19 	vmov	r0, r1, d9
 8005304:	f7fb f978 	bl	80005f8 <__aeabi_dmul>
 8005308:	1136      	asrs	r6, r6, #4
 800530a:	4682      	mov	sl, r0
 800530c:	468b      	mov	fp, r1
 800530e:	2300      	movs	r3, #0
 8005310:	2502      	movs	r5, #2
 8005312:	2e00      	cmp	r6, #0
 8005314:	d17a      	bne.n	800540c <_dtoa_r+0x4c4>
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1d3      	bne.n	80052c2 <_dtoa_r+0x37a>
 800531a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 8082 	beq.w	8005426 <_dtoa_r+0x4de>
 8005322:	4b91      	ldr	r3, [pc, #580]	; (8005568 <_dtoa_r+0x620>)
 8005324:	2200      	movs	r2, #0
 8005326:	4650      	mov	r0, sl
 8005328:	4659      	mov	r1, fp
 800532a:	f7fb fbd7 	bl	8000adc <__aeabi_dcmplt>
 800532e:	2800      	cmp	r0, #0
 8005330:	d079      	beq.n	8005426 <_dtoa_r+0x4de>
 8005332:	9b03      	ldr	r3, [sp, #12]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d076      	beq.n	8005426 <_dtoa_r+0x4de>
 8005338:	9b02      	ldr	r3, [sp, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	dd36      	ble.n	80053ac <_dtoa_r+0x464>
 800533e:	9b00      	ldr	r3, [sp, #0]
 8005340:	4650      	mov	r0, sl
 8005342:	4659      	mov	r1, fp
 8005344:	1e5f      	subs	r7, r3, #1
 8005346:	2200      	movs	r2, #0
 8005348:	4b88      	ldr	r3, [pc, #544]	; (800556c <_dtoa_r+0x624>)
 800534a:	f7fb f955 	bl	80005f8 <__aeabi_dmul>
 800534e:	9e02      	ldr	r6, [sp, #8]
 8005350:	4682      	mov	sl, r0
 8005352:	468b      	mov	fp, r1
 8005354:	3501      	adds	r5, #1
 8005356:	4628      	mov	r0, r5
 8005358:	f7fb f8e4 	bl	8000524 <__aeabi_i2d>
 800535c:	4652      	mov	r2, sl
 800535e:	465b      	mov	r3, fp
 8005360:	f7fb f94a 	bl	80005f8 <__aeabi_dmul>
 8005364:	4b82      	ldr	r3, [pc, #520]	; (8005570 <_dtoa_r+0x628>)
 8005366:	2200      	movs	r2, #0
 8005368:	f7fa ff90 	bl	800028c <__adddf3>
 800536c:	46d0      	mov	r8, sl
 800536e:	46d9      	mov	r9, fp
 8005370:	4682      	mov	sl, r0
 8005372:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005376:	2e00      	cmp	r6, #0
 8005378:	d158      	bne.n	800542c <_dtoa_r+0x4e4>
 800537a:	4b7e      	ldr	r3, [pc, #504]	; (8005574 <_dtoa_r+0x62c>)
 800537c:	2200      	movs	r2, #0
 800537e:	4640      	mov	r0, r8
 8005380:	4649      	mov	r1, r9
 8005382:	f7fa ff81 	bl	8000288 <__aeabi_dsub>
 8005386:	4652      	mov	r2, sl
 8005388:	465b      	mov	r3, fp
 800538a:	4680      	mov	r8, r0
 800538c:	4689      	mov	r9, r1
 800538e:	f7fb fbc3 	bl	8000b18 <__aeabi_dcmpgt>
 8005392:	2800      	cmp	r0, #0
 8005394:	f040 8295 	bne.w	80058c2 <_dtoa_r+0x97a>
 8005398:	4652      	mov	r2, sl
 800539a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800539e:	4640      	mov	r0, r8
 80053a0:	4649      	mov	r1, r9
 80053a2:	f7fb fb9b 	bl	8000adc <__aeabi_dcmplt>
 80053a6:	2800      	cmp	r0, #0
 80053a8:	f040 8289 	bne.w	80058be <_dtoa_r+0x976>
 80053ac:	ec5b ab19 	vmov	sl, fp, d9
 80053b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f2c0 8148 	blt.w	8005648 <_dtoa_r+0x700>
 80053b8:	9a00      	ldr	r2, [sp, #0]
 80053ba:	2a0e      	cmp	r2, #14
 80053bc:	f300 8144 	bgt.w	8005648 <_dtoa_r+0x700>
 80053c0:	4b67      	ldr	r3, [pc, #412]	; (8005560 <_dtoa_r+0x618>)
 80053c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f280 80d5 	bge.w	800557c <_dtoa_r+0x634>
 80053d2:	9b03      	ldr	r3, [sp, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f300 80d1 	bgt.w	800557c <_dtoa_r+0x634>
 80053da:	f040 826f 	bne.w	80058bc <_dtoa_r+0x974>
 80053de:	4b65      	ldr	r3, [pc, #404]	; (8005574 <_dtoa_r+0x62c>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	4640      	mov	r0, r8
 80053e4:	4649      	mov	r1, r9
 80053e6:	f7fb f907 	bl	80005f8 <__aeabi_dmul>
 80053ea:	4652      	mov	r2, sl
 80053ec:	465b      	mov	r3, fp
 80053ee:	f7fb fb89 	bl	8000b04 <__aeabi_dcmpge>
 80053f2:	9e03      	ldr	r6, [sp, #12]
 80053f4:	4637      	mov	r7, r6
 80053f6:	2800      	cmp	r0, #0
 80053f8:	f040 8245 	bne.w	8005886 <_dtoa_r+0x93e>
 80053fc:	9d01      	ldr	r5, [sp, #4]
 80053fe:	2331      	movs	r3, #49	; 0x31
 8005400:	f805 3b01 	strb.w	r3, [r5], #1
 8005404:	9b00      	ldr	r3, [sp, #0]
 8005406:	3301      	adds	r3, #1
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	e240      	b.n	800588e <_dtoa_r+0x946>
 800540c:	07f2      	lsls	r2, r6, #31
 800540e:	d505      	bpl.n	800541c <_dtoa_r+0x4d4>
 8005410:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005414:	f7fb f8f0 	bl	80005f8 <__aeabi_dmul>
 8005418:	3501      	adds	r5, #1
 800541a:	2301      	movs	r3, #1
 800541c:	1076      	asrs	r6, r6, #1
 800541e:	3708      	adds	r7, #8
 8005420:	e777      	b.n	8005312 <_dtoa_r+0x3ca>
 8005422:	2502      	movs	r5, #2
 8005424:	e779      	b.n	800531a <_dtoa_r+0x3d2>
 8005426:	9f00      	ldr	r7, [sp, #0]
 8005428:	9e03      	ldr	r6, [sp, #12]
 800542a:	e794      	b.n	8005356 <_dtoa_r+0x40e>
 800542c:	9901      	ldr	r1, [sp, #4]
 800542e:	4b4c      	ldr	r3, [pc, #304]	; (8005560 <_dtoa_r+0x618>)
 8005430:	4431      	add	r1, r6
 8005432:	910d      	str	r1, [sp, #52]	; 0x34
 8005434:	9908      	ldr	r1, [sp, #32]
 8005436:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800543a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800543e:	2900      	cmp	r1, #0
 8005440:	d043      	beq.n	80054ca <_dtoa_r+0x582>
 8005442:	494d      	ldr	r1, [pc, #308]	; (8005578 <_dtoa_r+0x630>)
 8005444:	2000      	movs	r0, #0
 8005446:	f7fb fa01 	bl	800084c <__aeabi_ddiv>
 800544a:	4652      	mov	r2, sl
 800544c:	465b      	mov	r3, fp
 800544e:	f7fa ff1b 	bl	8000288 <__aeabi_dsub>
 8005452:	9d01      	ldr	r5, [sp, #4]
 8005454:	4682      	mov	sl, r0
 8005456:	468b      	mov	fp, r1
 8005458:	4649      	mov	r1, r9
 800545a:	4640      	mov	r0, r8
 800545c:	f7fb fb7c 	bl	8000b58 <__aeabi_d2iz>
 8005460:	4606      	mov	r6, r0
 8005462:	f7fb f85f 	bl	8000524 <__aeabi_i2d>
 8005466:	4602      	mov	r2, r0
 8005468:	460b      	mov	r3, r1
 800546a:	4640      	mov	r0, r8
 800546c:	4649      	mov	r1, r9
 800546e:	f7fa ff0b 	bl	8000288 <__aeabi_dsub>
 8005472:	3630      	adds	r6, #48	; 0x30
 8005474:	f805 6b01 	strb.w	r6, [r5], #1
 8005478:	4652      	mov	r2, sl
 800547a:	465b      	mov	r3, fp
 800547c:	4680      	mov	r8, r0
 800547e:	4689      	mov	r9, r1
 8005480:	f7fb fb2c 	bl	8000adc <__aeabi_dcmplt>
 8005484:	2800      	cmp	r0, #0
 8005486:	d163      	bne.n	8005550 <_dtoa_r+0x608>
 8005488:	4642      	mov	r2, r8
 800548a:	464b      	mov	r3, r9
 800548c:	4936      	ldr	r1, [pc, #216]	; (8005568 <_dtoa_r+0x620>)
 800548e:	2000      	movs	r0, #0
 8005490:	f7fa fefa 	bl	8000288 <__aeabi_dsub>
 8005494:	4652      	mov	r2, sl
 8005496:	465b      	mov	r3, fp
 8005498:	f7fb fb20 	bl	8000adc <__aeabi_dcmplt>
 800549c:	2800      	cmp	r0, #0
 800549e:	f040 80b5 	bne.w	800560c <_dtoa_r+0x6c4>
 80054a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054a4:	429d      	cmp	r5, r3
 80054a6:	d081      	beq.n	80053ac <_dtoa_r+0x464>
 80054a8:	4b30      	ldr	r3, [pc, #192]	; (800556c <_dtoa_r+0x624>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	4650      	mov	r0, sl
 80054ae:	4659      	mov	r1, fp
 80054b0:	f7fb f8a2 	bl	80005f8 <__aeabi_dmul>
 80054b4:	4b2d      	ldr	r3, [pc, #180]	; (800556c <_dtoa_r+0x624>)
 80054b6:	4682      	mov	sl, r0
 80054b8:	468b      	mov	fp, r1
 80054ba:	4640      	mov	r0, r8
 80054bc:	4649      	mov	r1, r9
 80054be:	2200      	movs	r2, #0
 80054c0:	f7fb f89a 	bl	80005f8 <__aeabi_dmul>
 80054c4:	4680      	mov	r8, r0
 80054c6:	4689      	mov	r9, r1
 80054c8:	e7c6      	b.n	8005458 <_dtoa_r+0x510>
 80054ca:	4650      	mov	r0, sl
 80054cc:	4659      	mov	r1, fp
 80054ce:	f7fb f893 	bl	80005f8 <__aeabi_dmul>
 80054d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054d4:	9d01      	ldr	r5, [sp, #4]
 80054d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80054d8:	4682      	mov	sl, r0
 80054da:	468b      	mov	fp, r1
 80054dc:	4649      	mov	r1, r9
 80054de:	4640      	mov	r0, r8
 80054e0:	f7fb fb3a 	bl	8000b58 <__aeabi_d2iz>
 80054e4:	4606      	mov	r6, r0
 80054e6:	f7fb f81d 	bl	8000524 <__aeabi_i2d>
 80054ea:	3630      	adds	r6, #48	; 0x30
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4640      	mov	r0, r8
 80054f2:	4649      	mov	r1, r9
 80054f4:	f7fa fec8 	bl	8000288 <__aeabi_dsub>
 80054f8:	f805 6b01 	strb.w	r6, [r5], #1
 80054fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054fe:	429d      	cmp	r5, r3
 8005500:	4680      	mov	r8, r0
 8005502:	4689      	mov	r9, r1
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	d124      	bne.n	8005554 <_dtoa_r+0x60c>
 800550a:	4b1b      	ldr	r3, [pc, #108]	; (8005578 <_dtoa_r+0x630>)
 800550c:	4650      	mov	r0, sl
 800550e:	4659      	mov	r1, fp
 8005510:	f7fa febc 	bl	800028c <__adddf3>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	4640      	mov	r0, r8
 800551a:	4649      	mov	r1, r9
 800551c:	f7fb fafc 	bl	8000b18 <__aeabi_dcmpgt>
 8005520:	2800      	cmp	r0, #0
 8005522:	d173      	bne.n	800560c <_dtoa_r+0x6c4>
 8005524:	4652      	mov	r2, sl
 8005526:	465b      	mov	r3, fp
 8005528:	4913      	ldr	r1, [pc, #76]	; (8005578 <_dtoa_r+0x630>)
 800552a:	2000      	movs	r0, #0
 800552c:	f7fa feac 	bl	8000288 <__aeabi_dsub>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4640      	mov	r0, r8
 8005536:	4649      	mov	r1, r9
 8005538:	f7fb fad0 	bl	8000adc <__aeabi_dcmplt>
 800553c:	2800      	cmp	r0, #0
 800553e:	f43f af35 	beq.w	80053ac <_dtoa_r+0x464>
 8005542:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005544:	1e6b      	subs	r3, r5, #1
 8005546:	930f      	str	r3, [sp, #60]	; 0x3c
 8005548:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800554c:	2b30      	cmp	r3, #48	; 0x30
 800554e:	d0f8      	beq.n	8005542 <_dtoa_r+0x5fa>
 8005550:	9700      	str	r7, [sp, #0]
 8005552:	e049      	b.n	80055e8 <_dtoa_r+0x6a0>
 8005554:	4b05      	ldr	r3, [pc, #20]	; (800556c <_dtoa_r+0x624>)
 8005556:	f7fb f84f 	bl	80005f8 <__aeabi_dmul>
 800555a:	4680      	mov	r8, r0
 800555c:	4689      	mov	r9, r1
 800555e:	e7bd      	b.n	80054dc <_dtoa_r+0x594>
 8005560:	08007100 	.word	0x08007100
 8005564:	080070d8 	.word	0x080070d8
 8005568:	3ff00000 	.word	0x3ff00000
 800556c:	40240000 	.word	0x40240000
 8005570:	401c0000 	.word	0x401c0000
 8005574:	40140000 	.word	0x40140000
 8005578:	3fe00000 	.word	0x3fe00000
 800557c:	9d01      	ldr	r5, [sp, #4]
 800557e:	4656      	mov	r6, sl
 8005580:	465f      	mov	r7, fp
 8005582:	4642      	mov	r2, r8
 8005584:	464b      	mov	r3, r9
 8005586:	4630      	mov	r0, r6
 8005588:	4639      	mov	r1, r7
 800558a:	f7fb f95f 	bl	800084c <__aeabi_ddiv>
 800558e:	f7fb fae3 	bl	8000b58 <__aeabi_d2iz>
 8005592:	4682      	mov	sl, r0
 8005594:	f7fa ffc6 	bl	8000524 <__aeabi_i2d>
 8005598:	4642      	mov	r2, r8
 800559a:	464b      	mov	r3, r9
 800559c:	f7fb f82c 	bl	80005f8 <__aeabi_dmul>
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	4630      	mov	r0, r6
 80055a6:	4639      	mov	r1, r7
 80055a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80055ac:	f7fa fe6c 	bl	8000288 <__aeabi_dsub>
 80055b0:	f805 6b01 	strb.w	r6, [r5], #1
 80055b4:	9e01      	ldr	r6, [sp, #4]
 80055b6:	9f03      	ldr	r7, [sp, #12]
 80055b8:	1bae      	subs	r6, r5, r6
 80055ba:	42b7      	cmp	r7, r6
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	d135      	bne.n	800562e <_dtoa_r+0x6e6>
 80055c2:	f7fa fe63 	bl	800028c <__adddf3>
 80055c6:	4642      	mov	r2, r8
 80055c8:	464b      	mov	r3, r9
 80055ca:	4606      	mov	r6, r0
 80055cc:	460f      	mov	r7, r1
 80055ce:	f7fb faa3 	bl	8000b18 <__aeabi_dcmpgt>
 80055d2:	b9d0      	cbnz	r0, 800560a <_dtoa_r+0x6c2>
 80055d4:	4642      	mov	r2, r8
 80055d6:	464b      	mov	r3, r9
 80055d8:	4630      	mov	r0, r6
 80055da:	4639      	mov	r1, r7
 80055dc:	f7fb fa74 	bl	8000ac8 <__aeabi_dcmpeq>
 80055e0:	b110      	cbz	r0, 80055e8 <_dtoa_r+0x6a0>
 80055e2:	f01a 0f01 	tst.w	sl, #1
 80055e6:	d110      	bne.n	800560a <_dtoa_r+0x6c2>
 80055e8:	4620      	mov	r0, r4
 80055ea:	ee18 1a10 	vmov	r1, s16
 80055ee:	f000 fd13 	bl	8006018 <_Bfree>
 80055f2:	2300      	movs	r3, #0
 80055f4:	9800      	ldr	r0, [sp, #0]
 80055f6:	702b      	strb	r3, [r5, #0]
 80055f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055fa:	3001      	adds	r0, #1
 80055fc:	6018      	str	r0, [r3, #0]
 80055fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005600:	2b00      	cmp	r3, #0
 8005602:	f43f acf1 	beq.w	8004fe8 <_dtoa_r+0xa0>
 8005606:	601d      	str	r5, [r3, #0]
 8005608:	e4ee      	b.n	8004fe8 <_dtoa_r+0xa0>
 800560a:	9f00      	ldr	r7, [sp, #0]
 800560c:	462b      	mov	r3, r5
 800560e:	461d      	mov	r5, r3
 8005610:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005614:	2a39      	cmp	r2, #57	; 0x39
 8005616:	d106      	bne.n	8005626 <_dtoa_r+0x6de>
 8005618:	9a01      	ldr	r2, [sp, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	d1f7      	bne.n	800560e <_dtoa_r+0x6c6>
 800561e:	9901      	ldr	r1, [sp, #4]
 8005620:	2230      	movs	r2, #48	; 0x30
 8005622:	3701      	adds	r7, #1
 8005624:	700a      	strb	r2, [r1, #0]
 8005626:	781a      	ldrb	r2, [r3, #0]
 8005628:	3201      	adds	r2, #1
 800562a:	701a      	strb	r2, [r3, #0]
 800562c:	e790      	b.n	8005550 <_dtoa_r+0x608>
 800562e:	4ba6      	ldr	r3, [pc, #664]	; (80058c8 <_dtoa_r+0x980>)
 8005630:	2200      	movs	r2, #0
 8005632:	f7fa ffe1 	bl	80005f8 <__aeabi_dmul>
 8005636:	2200      	movs	r2, #0
 8005638:	2300      	movs	r3, #0
 800563a:	4606      	mov	r6, r0
 800563c:	460f      	mov	r7, r1
 800563e:	f7fb fa43 	bl	8000ac8 <__aeabi_dcmpeq>
 8005642:	2800      	cmp	r0, #0
 8005644:	d09d      	beq.n	8005582 <_dtoa_r+0x63a>
 8005646:	e7cf      	b.n	80055e8 <_dtoa_r+0x6a0>
 8005648:	9a08      	ldr	r2, [sp, #32]
 800564a:	2a00      	cmp	r2, #0
 800564c:	f000 80d7 	beq.w	80057fe <_dtoa_r+0x8b6>
 8005650:	9a06      	ldr	r2, [sp, #24]
 8005652:	2a01      	cmp	r2, #1
 8005654:	f300 80ba 	bgt.w	80057cc <_dtoa_r+0x884>
 8005658:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800565a:	2a00      	cmp	r2, #0
 800565c:	f000 80b2 	beq.w	80057c4 <_dtoa_r+0x87c>
 8005660:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005664:	9e07      	ldr	r6, [sp, #28]
 8005666:	9d04      	ldr	r5, [sp, #16]
 8005668:	9a04      	ldr	r2, [sp, #16]
 800566a:	441a      	add	r2, r3
 800566c:	9204      	str	r2, [sp, #16]
 800566e:	9a05      	ldr	r2, [sp, #20]
 8005670:	2101      	movs	r1, #1
 8005672:	441a      	add	r2, r3
 8005674:	4620      	mov	r0, r4
 8005676:	9205      	str	r2, [sp, #20]
 8005678:	f000 fd86 	bl	8006188 <__i2b>
 800567c:	4607      	mov	r7, r0
 800567e:	2d00      	cmp	r5, #0
 8005680:	dd0c      	ble.n	800569c <_dtoa_r+0x754>
 8005682:	9b05      	ldr	r3, [sp, #20]
 8005684:	2b00      	cmp	r3, #0
 8005686:	dd09      	ble.n	800569c <_dtoa_r+0x754>
 8005688:	42ab      	cmp	r3, r5
 800568a:	9a04      	ldr	r2, [sp, #16]
 800568c:	bfa8      	it	ge
 800568e:	462b      	movge	r3, r5
 8005690:	1ad2      	subs	r2, r2, r3
 8005692:	9204      	str	r2, [sp, #16]
 8005694:	9a05      	ldr	r2, [sp, #20]
 8005696:	1aed      	subs	r5, r5, r3
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	9305      	str	r3, [sp, #20]
 800569c:	9b07      	ldr	r3, [sp, #28]
 800569e:	b31b      	cbz	r3, 80056e8 <_dtoa_r+0x7a0>
 80056a0:	9b08      	ldr	r3, [sp, #32]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f000 80af 	beq.w	8005806 <_dtoa_r+0x8be>
 80056a8:	2e00      	cmp	r6, #0
 80056aa:	dd13      	ble.n	80056d4 <_dtoa_r+0x78c>
 80056ac:	4639      	mov	r1, r7
 80056ae:	4632      	mov	r2, r6
 80056b0:	4620      	mov	r0, r4
 80056b2:	f000 fe29 	bl	8006308 <__pow5mult>
 80056b6:	ee18 2a10 	vmov	r2, s16
 80056ba:	4601      	mov	r1, r0
 80056bc:	4607      	mov	r7, r0
 80056be:	4620      	mov	r0, r4
 80056c0:	f000 fd78 	bl	80061b4 <__multiply>
 80056c4:	ee18 1a10 	vmov	r1, s16
 80056c8:	4680      	mov	r8, r0
 80056ca:	4620      	mov	r0, r4
 80056cc:	f000 fca4 	bl	8006018 <_Bfree>
 80056d0:	ee08 8a10 	vmov	s16, r8
 80056d4:	9b07      	ldr	r3, [sp, #28]
 80056d6:	1b9a      	subs	r2, r3, r6
 80056d8:	d006      	beq.n	80056e8 <_dtoa_r+0x7a0>
 80056da:	ee18 1a10 	vmov	r1, s16
 80056de:	4620      	mov	r0, r4
 80056e0:	f000 fe12 	bl	8006308 <__pow5mult>
 80056e4:	ee08 0a10 	vmov	s16, r0
 80056e8:	2101      	movs	r1, #1
 80056ea:	4620      	mov	r0, r4
 80056ec:	f000 fd4c 	bl	8006188 <__i2b>
 80056f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	4606      	mov	r6, r0
 80056f6:	f340 8088 	ble.w	800580a <_dtoa_r+0x8c2>
 80056fa:	461a      	mov	r2, r3
 80056fc:	4601      	mov	r1, r0
 80056fe:	4620      	mov	r0, r4
 8005700:	f000 fe02 	bl	8006308 <__pow5mult>
 8005704:	9b06      	ldr	r3, [sp, #24]
 8005706:	2b01      	cmp	r3, #1
 8005708:	4606      	mov	r6, r0
 800570a:	f340 8081 	ble.w	8005810 <_dtoa_r+0x8c8>
 800570e:	f04f 0800 	mov.w	r8, #0
 8005712:	6933      	ldr	r3, [r6, #16]
 8005714:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005718:	6918      	ldr	r0, [r3, #16]
 800571a:	f000 fce5 	bl	80060e8 <__hi0bits>
 800571e:	f1c0 0020 	rsb	r0, r0, #32
 8005722:	9b05      	ldr	r3, [sp, #20]
 8005724:	4418      	add	r0, r3
 8005726:	f010 001f 	ands.w	r0, r0, #31
 800572a:	f000 8092 	beq.w	8005852 <_dtoa_r+0x90a>
 800572e:	f1c0 0320 	rsb	r3, r0, #32
 8005732:	2b04      	cmp	r3, #4
 8005734:	f340 808a 	ble.w	800584c <_dtoa_r+0x904>
 8005738:	f1c0 001c 	rsb	r0, r0, #28
 800573c:	9b04      	ldr	r3, [sp, #16]
 800573e:	4403      	add	r3, r0
 8005740:	9304      	str	r3, [sp, #16]
 8005742:	9b05      	ldr	r3, [sp, #20]
 8005744:	4403      	add	r3, r0
 8005746:	4405      	add	r5, r0
 8005748:	9305      	str	r3, [sp, #20]
 800574a:	9b04      	ldr	r3, [sp, #16]
 800574c:	2b00      	cmp	r3, #0
 800574e:	dd07      	ble.n	8005760 <_dtoa_r+0x818>
 8005750:	ee18 1a10 	vmov	r1, s16
 8005754:	461a      	mov	r2, r3
 8005756:	4620      	mov	r0, r4
 8005758:	f000 fe30 	bl	80063bc <__lshift>
 800575c:	ee08 0a10 	vmov	s16, r0
 8005760:	9b05      	ldr	r3, [sp, #20]
 8005762:	2b00      	cmp	r3, #0
 8005764:	dd05      	ble.n	8005772 <_dtoa_r+0x82a>
 8005766:	4631      	mov	r1, r6
 8005768:	461a      	mov	r2, r3
 800576a:	4620      	mov	r0, r4
 800576c:	f000 fe26 	bl	80063bc <__lshift>
 8005770:	4606      	mov	r6, r0
 8005772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005774:	2b00      	cmp	r3, #0
 8005776:	d06e      	beq.n	8005856 <_dtoa_r+0x90e>
 8005778:	ee18 0a10 	vmov	r0, s16
 800577c:	4631      	mov	r1, r6
 800577e:	f000 fe8d 	bl	800649c <__mcmp>
 8005782:	2800      	cmp	r0, #0
 8005784:	da67      	bge.n	8005856 <_dtoa_r+0x90e>
 8005786:	9b00      	ldr	r3, [sp, #0]
 8005788:	3b01      	subs	r3, #1
 800578a:	ee18 1a10 	vmov	r1, s16
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	220a      	movs	r2, #10
 8005792:	2300      	movs	r3, #0
 8005794:	4620      	mov	r0, r4
 8005796:	f000 fc61 	bl	800605c <__multadd>
 800579a:	9b08      	ldr	r3, [sp, #32]
 800579c:	ee08 0a10 	vmov	s16, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 81b1 	beq.w	8005b08 <_dtoa_r+0xbc0>
 80057a6:	2300      	movs	r3, #0
 80057a8:	4639      	mov	r1, r7
 80057aa:	220a      	movs	r2, #10
 80057ac:	4620      	mov	r0, r4
 80057ae:	f000 fc55 	bl	800605c <__multadd>
 80057b2:	9b02      	ldr	r3, [sp, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	4607      	mov	r7, r0
 80057b8:	f300 808e 	bgt.w	80058d8 <_dtoa_r+0x990>
 80057bc:	9b06      	ldr	r3, [sp, #24]
 80057be:	2b02      	cmp	r3, #2
 80057c0:	dc51      	bgt.n	8005866 <_dtoa_r+0x91e>
 80057c2:	e089      	b.n	80058d8 <_dtoa_r+0x990>
 80057c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80057ca:	e74b      	b.n	8005664 <_dtoa_r+0x71c>
 80057cc:	9b03      	ldr	r3, [sp, #12]
 80057ce:	1e5e      	subs	r6, r3, #1
 80057d0:	9b07      	ldr	r3, [sp, #28]
 80057d2:	42b3      	cmp	r3, r6
 80057d4:	bfbf      	itttt	lt
 80057d6:	9b07      	ldrlt	r3, [sp, #28]
 80057d8:	9607      	strlt	r6, [sp, #28]
 80057da:	1af2      	sublt	r2, r6, r3
 80057dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80057de:	bfb6      	itet	lt
 80057e0:	189b      	addlt	r3, r3, r2
 80057e2:	1b9e      	subge	r6, r3, r6
 80057e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80057e6:	9b03      	ldr	r3, [sp, #12]
 80057e8:	bfb8      	it	lt
 80057ea:	2600      	movlt	r6, #0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	bfb7      	itett	lt
 80057f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80057f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80057f8:	1a9d      	sublt	r5, r3, r2
 80057fa:	2300      	movlt	r3, #0
 80057fc:	e734      	b.n	8005668 <_dtoa_r+0x720>
 80057fe:	9e07      	ldr	r6, [sp, #28]
 8005800:	9d04      	ldr	r5, [sp, #16]
 8005802:	9f08      	ldr	r7, [sp, #32]
 8005804:	e73b      	b.n	800567e <_dtoa_r+0x736>
 8005806:	9a07      	ldr	r2, [sp, #28]
 8005808:	e767      	b.n	80056da <_dtoa_r+0x792>
 800580a:	9b06      	ldr	r3, [sp, #24]
 800580c:	2b01      	cmp	r3, #1
 800580e:	dc18      	bgt.n	8005842 <_dtoa_r+0x8fa>
 8005810:	f1ba 0f00 	cmp.w	sl, #0
 8005814:	d115      	bne.n	8005842 <_dtoa_r+0x8fa>
 8005816:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800581a:	b993      	cbnz	r3, 8005842 <_dtoa_r+0x8fa>
 800581c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005820:	0d1b      	lsrs	r3, r3, #20
 8005822:	051b      	lsls	r3, r3, #20
 8005824:	b183      	cbz	r3, 8005848 <_dtoa_r+0x900>
 8005826:	9b04      	ldr	r3, [sp, #16]
 8005828:	3301      	adds	r3, #1
 800582a:	9304      	str	r3, [sp, #16]
 800582c:	9b05      	ldr	r3, [sp, #20]
 800582e:	3301      	adds	r3, #1
 8005830:	9305      	str	r3, [sp, #20]
 8005832:	f04f 0801 	mov.w	r8, #1
 8005836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005838:	2b00      	cmp	r3, #0
 800583a:	f47f af6a 	bne.w	8005712 <_dtoa_r+0x7ca>
 800583e:	2001      	movs	r0, #1
 8005840:	e76f      	b.n	8005722 <_dtoa_r+0x7da>
 8005842:	f04f 0800 	mov.w	r8, #0
 8005846:	e7f6      	b.n	8005836 <_dtoa_r+0x8ee>
 8005848:	4698      	mov	r8, r3
 800584a:	e7f4      	b.n	8005836 <_dtoa_r+0x8ee>
 800584c:	f43f af7d 	beq.w	800574a <_dtoa_r+0x802>
 8005850:	4618      	mov	r0, r3
 8005852:	301c      	adds	r0, #28
 8005854:	e772      	b.n	800573c <_dtoa_r+0x7f4>
 8005856:	9b03      	ldr	r3, [sp, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	dc37      	bgt.n	80058cc <_dtoa_r+0x984>
 800585c:	9b06      	ldr	r3, [sp, #24]
 800585e:	2b02      	cmp	r3, #2
 8005860:	dd34      	ble.n	80058cc <_dtoa_r+0x984>
 8005862:	9b03      	ldr	r3, [sp, #12]
 8005864:	9302      	str	r3, [sp, #8]
 8005866:	9b02      	ldr	r3, [sp, #8]
 8005868:	b96b      	cbnz	r3, 8005886 <_dtoa_r+0x93e>
 800586a:	4631      	mov	r1, r6
 800586c:	2205      	movs	r2, #5
 800586e:	4620      	mov	r0, r4
 8005870:	f000 fbf4 	bl	800605c <__multadd>
 8005874:	4601      	mov	r1, r0
 8005876:	4606      	mov	r6, r0
 8005878:	ee18 0a10 	vmov	r0, s16
 800587c:	f000 fe0e 	bl	800649c <__mcmp>
 8005880:	2800      	cmp	r0, #0
 8005882:	f73f adbb 	bgt.w	80053fc <_dtoa_r+0x4b4>
 8005886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005888:	9d01      	ldr	r5, [sp, #4]
 800588a:	43db      	mvns	r3, r3
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	f04f 0800 	mov.w	r8, #0
 8005892:	4631      	mov	r1, r6
 8005894:	4620      	mov	r0, r4
 8005896:	f000 fbbf 	bl	8006018 <_Bfree>
 800589a:	2f00      	cmp	r7, #0
 800589c:	f43f aea4 	beq.w	80055e8 <_dtoa_r+0x6a0>
 80058a0:	f1b8 0f00 	cmp.w	r8, #0
 80058a4:	d005      	beq.n	80058b2 <_dtoa_r+0x96a>
 80058a6:	45b8      	cmp	r8, r7
 80058a8:	d003      	beq.n	80058b2 <_dtoa_r+0x96a>
 80058aa:	4641      	mov	r1, r8
 80058ac:	4620      	mov	r0, r4
 80058ae:	f000 fbb3 	bl	8006018 <_Bfree>
 80058b2:	4639      	mov	r1, r7
 80058b4:	4620      	mov	r0, r4
 80058b6:	f000 fbaf 	bl	8006018 <_Bfree>
 80058ba:	e695      	b.n	80055e8 <_dtoa_r+0x6a0>
 80058bc:	2600      	movs	r6, #0
 80058be:	4637      	mov	r7, r6
 80058c0:	e7e1      	b.n	8005886 <_dtoa_r+0x93e>
 80058c2:	9700      	str	r7, [sp, #0]
 80058c4:	4637      	mov	r7, r6
 80058c6:	e599      	b.n	80053fc <_dtoa_r+0x4b4>
 80058c8:	40240000 	.word	0x40240000
 80058cc:	9b08      	ldr	r3, [sp, #32]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 80ca 	beq.w	8005a68 <_dtoa_r+0xb20>
 80058d4:	9b03      	ldr	r3, [sp, #12]
 80058d6:	9302      	str	r3, [sp, #8]
 80058d8:	2d00      	cmp	r5, #0
 80058da:	dd05      	ble.n	80058e8 <_dtoa_r+0x9a0>
 80058dc:	4639      	mov	r1, r7
 80058de:	462a      	mov	r2, r5
 80058e0:	4620      	mov	r0, r4
 80058e2:	f000 fd6b 	bl	80063bc <__lshift>
 80058e6:	4607      	mov	r7, r0
 80058e8:	f1b8 0f00 	cmp.w	r8, #0
 80058ec:	d05b      	beq.n	80059a6 <_dtoa_r+0xa5e>
 80058ee:	6879      	ldr	r1, [r7, #4]
 80058f0:	4620      	mov	r0, r4
 80058f2:	f000 fb51 	bl	8005f98 <_Balloc>
 80058f6:	4605      	mov	r5, r0
 80058f8:	b928      	cbnz	r0, 8005906 <_dtoa_r+0x9be>
 80058fa:	4b87      	ldr	r3, [pc, #540]	; (8005b18 <_dtoa_r+0xbd0>)
 80058fc:	4602      	mov	r2, r0
 80058fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005902:	f7ff bb3b 	b.w	8004f7c <_dtoa_r+0x34>
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	3202      	adds	r2, #2
 800590a:	0092      	lsls	r2, r2, #2
 800590c:	f107 010c 	add.w	r1, r7, #12
 8005910:	300c      	adds	r0, #12
 8005912:	f000 fb33 	bl	8005f7c <memcpy>
 8005916:	2201      	movs	r2, #1
 8005918:	4629      	mov	r1, r5
 800591a:	4620      	mov	r0, r4
 800591c:	f000 fd4e 	bl	80063bc <__lshift>
 8005920:	9b01      	ldr	r3, [sp, #4]
 8005922:	f103 0901 	add.w	r9, r3, #1
 8005926:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800592a:	4413      	add	r3, r2
 800592c:	9305      	str	r3, [sp, #20]
 800592e:	f00a 0301 	and.w	r3, sl, #1
 8005932:	46b8      	mov	r8, r7
 8005934:	9304      	str	r3, [sp, #16]
 8005936:	4607      	mov	r7, r0
 8005938:	4631      	mov	r1, r6
 800593a:	ee18 0a10 	vmov	r0, s16
 800593e:	f7ff fa75 	bl	8004e2c <quorem>
 8005942:	4641      	mov	r1, r8
 8005944:	9002      	str	r0, [sp, #8]
 8005946:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800594a:	ee18 0a10 	vmov	r0, s16
 800594e:	f000 fda5 	bl	800649c <__mcmp>
 8005952:	463a      	mov	r2, r7
 8005954:	9003      	str	r0, [sp, #12]
 8005956:	4631      	mov	r1, r6
 8005958:	4620      	mov	r0, r4
 800595a:	f000 fdbb 	bl	80064d4 <__mdiff>
 800595e:	68c2      	ldr	r2, [r0, #12]
 8005960:	f109 3bff 	add.w	fp, r9, #4294967295
 8005964:	4605      	mov	r5, r0
 8005966:	bb02      	cbnz	r2, 80059aa <_dtoa_r+0xa62>
 8005968:	4601      	mov	r1, r0
 800596a:	ee18 0a10 	vmov	r0, s16
 800596e:	f000 fd95 	bl	800649c <__mcmp>
 8005972:	4602      	mov	r2, r0
 8005974:	4629      	mov	r1, r5
 8005976:	4620      	mov	r0, r4
 8005978:	9207      	str	r2, [sp, #28]
 800597a:	f000 fb4d 	bl	8006018 <_Bfree>
 800597e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005982:	ea43 0102 	orr.w	r1, r3, r2
 8005986:	9b04      	ldr	r3, [sp, #16]
 8005988:	430b      	orrs	r3, r1
 800598a:	464d      	mov	r5, r9
 800598c:	d10f      	bne.n	80059ae <_dtoa_r+0xa66>
 800598e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005992:	d02a      	beq.n	80059ea <_dtoa_r+0xaa2>
 8005994:	9b03      	ldr	r3, [sp, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	dd02      	ble.n	80059a0 <_dtoa_r+0xa58>
 800599a:	9b02      	ldr	r3, [sp, #8]
 800599c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80059a0:	f88b a000 	strb.w	sl, [fp]
 80059a4:	e775      	b.n	8005892 <_dtoa_r+0x94a>
 80059a6:	4638      	mov	r0, r7
 80059a8:	e7ba      	b.n	8005920 <_dtoa_r+0x9d8>
 80059aa:	2201      	movs	r2, #1
 80059ac:	e7e2      	b.n	8005974 <_dtoa_r+0xa2c>
 80059ae:	9b03      	ldr	r3, [sp, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	db04      	blt.n	80059be <_dtoa_r+0xa76>
 80059b4:	9906      	ldr	r1, [sp, #24]
 80059b6:	430b      	orrs	r3, r1
 80059b8:	9904      	ldr	r1, [sp, #16]
 80059ba:	430b      	orrs	r3, r1
 80059bc:	d122      	bne.n	8005a04 <_dtoa_r+0xabc>
 80059be:	2a00      	cmp	r2, #0
 80059c0:	ddee      	ble.n	80059a0 <_dtoa_r+0xa58>
 80059c2:	ee18 1a10 	vmov	r1, s16
 80059c6:	2201      	movs	r2, #1
 80059c8:	4620      	mov	r0, r4
 80059ca:	f000 fcf7 	bl	80063bc <__lshift>
 80059ce:	4631      	mov	r1, r6
 80059d0:	ee08 0a10 	vmov	s16, r0
 80059d4:	f000 fd62 	bl	800649c <__mcmp>
 80059d8:	2800      	cmp	r0, #0
 80059da:	dc03      	bgt.n	80059e4 <_dtoa_r+0xa9c>
 80059dc:	d1e0      	bne.n	80059a0 <_dtoa_r+0xa58>
 80059de:	f01a 0f01 	tst.w	sl, #1
 80059e2:	d0dd      	beq.n	80059a0 <_dtoa_r+0xa58>
 80059e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80059e8:	d1d7      	bne.n	800599a <_dtoa_r+0xa52>
 80059ea:	2339      	movs	r3, #57	; 0x39
 80059ec:	f88b 3000 	strb.w	r3, [fp]
 80059f0:	462b      	mov	r3, r5
 80059f2:	461d      	mov	r5, r3
 80059f4:	3b01      	subs	r3, #1
 80059f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80059fa:	2a39      	cmp	r2, #57	; 0x39
 80059fc:	d071      	beq.n	8005ae2 <_dtoa_r+0xb9a>
 80059fe:	3201      	adds	r2, #1
 8005a00:	701a      	strb	r2, [r3, #0]
 8005a02:	e746      	b.n	8005892 <_dtoa_r+0x94a>
 8005a04:	2a00      	cmp	r2, #0
 8005a06:	dd07      	ble.n	8005a18 <_dtoa_r+0xad0>
 8005a08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005a0c:	d0ed      	beq.n	80059ea <_dtoa_r+0xaa2>
 8005a0e:	f10a 0301 	add.w	r3, sl, #1
 8005a12:	f88b 3000 	strb.w	r3, [fp]
 8005a16:	e73c      	b.n	8005892 <_dtoa_r+0x94a>
 8005a18:	9b05      	ldr	r3, [sp, #20]
 8005a1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005a1e:	4599      	cmp	r9, r3
 8005a20:	d047      	beq.n	8005ab2 <_dtoa_r+0xb6a>
 8005a22:	ee18 1a10 	vmov	r1, s16
 8005a26:	2300      	movs	r3, #0
 8005a28:	220a      	movs	r2, #10
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f000 fb16 	bl	800605c <__multadd>
 8005a30:	45b8      	cmp	r8, r7
 8005a32:	ee08 0a10 	vmov	s16, r0
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	f04f 020a 	mov.w	r2, #10
 8005a3e:	4641      	mov	r1, r8
 8005a40:	4620      	mov	r0, r4
 8005a42:	d106      	bne.n	8005a52 <_dtoa_r+0xb0a>
 8005a44:	f000 fb0a 	bl	800605c <__multadd>
 8005a48:	4680      	mov	r8, r0
 8005a4a:	4607      	mov	r7, r0
 8005a4c:	f109 0901 	add.w	r9, r9, #1
 8005a50:	e772      	b.n	8005938 <_dtoa_r+0x9f0>
 8005a52:	f000 fb03 	bl	800605c <__multadd>
 8005a56:	4639      	mov	r1, r7
 8005a58:	4680      	mov	r8, r0
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	220a      	movs	r2, #10
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f000 fafc 	bl	800605c <__multadd>
 8005a64:	4607      	mov	r7, r0
 8005a66:	e7f1      	b.n	8005a4c <_dtoa_r+0xb04>
 8005a68:	9b03      	ldr	r3, [sp, #12]
 8005a6a:	9302      	str	r3, [sp, #8]
 8005a6c:	9d01      	ldr	r5, [sp, #4]
 8005a6e:	ee18 0a10 	vmov	r0, s16
 8005a72:	4631      	mov	r1, r6
 8005a74:	f7ff f9da 	bl	8004e2c <quorem>
 8005a78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005a7c:	9b01      	ldr	r3, [sp, #4]
 8005a7e:	f805 ab01 	strb.w	sl, [r5], #1
 8005a82:	1aea      	subs	r2, r5, r3
 8005a84:	9b02      	ldr	r3, [sp, #8]
 8005a86:	4293      	cmp	r3, r2
 8005a88:	dd09      	ble.n	8005a9e <_dtoa_r+0xb56>
 8005a8a:	ee18 1a10 	vmov	r1, s16
 8005a8e:	2300      	movs	r3, #0
 8005a90:	220a      	movs	r2, #10
 8005a92:	4620      	mov	r0, r4
 8005a94:	f000 fae2 	bl	800605c <__multadd>
 8005a98:	ee08 0a10 	vmov	s16, r0
 8005a9c:	e7e7      	b.n	8005a6e <_dtoa_r+0xb26>
 8005a9e:	9b02      	ldr	r3, [sp, #8]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	bfc8      	it	gt
 8005aa4:	461d      	movgt	r5, r3
 8005aa6:	9b01      	ldr	r3, [sp, #4]
 8005aa8:	bfd8      	it	le
 8005aaa:	2501      	movle	r5, #1
 8005aac:	441d      	add	r5, r3
 8005aae:	f04f 0800 	mov.w	r8, #0
 8005ab2:	ee18 1a10 	vmov	r1, s16
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f000 fc7f 	bl	80063bc <__lshift>
 8005abe:	4631      	mov	r1, r6
 8005ac0:	ee08 0a10 	vmov	s16, r0
 8005ac4:	f000 fcea 	bl	800649c <__mcmp>
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	dc91      	bgt.n	80059f0 <_dtoa_r+0xaa8>
 8005acc:	d102      	bne.n	8005ad4 <_dtoa_r+0xb8c>
 8005ace:	f01a 0f01 	tst.w	sl, #1
 8005ad2:	d18d      	bne.n	80059f0 <_dtoa_r+0xaa8>
 8005ad4:	462b      	mov	r3, r5
 8005ad6:	461d      	mov	r5, r3
 8005ad8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005adc:	2a30      	cmp	r2, #48	; 0x30
 8005ade:	d0fa      	beq.n	8005ad6 <_dtoa_r+0xb8e>
 8005ae0:	e6d7      	b.n	8005892 <_dtoa_r+0x94a>
 8005ae2:	9a01      	ldr	r2, [sp, #4]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d184      	bne.n	80059f2 <_dtoa_r+0xaaa>
 8005ae8:	9b00      	ldr	r3, [sp, #0]
 8005aea:	3301      	adds	r3, #1
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	2331      	movs	r3, #49	; 0x31
 8005af0:	7013      	strb	r3, [r2, #0]
 8005af2:	e6ce      	b.n	8005892 <_dtoa_r+0x94a>
 8005af4:	4b09      	ldr	r3, [pc, #36]	; (8005b1c <_dtoa_r+0xbd4>)
 8005af6:	f7ff ba95 	b.w	8005024 <_dtoa_r+0xdc>
 8005afa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f47f aa6e 	bne.w	8004fde <_dtoa_r+0x96>
 8005b02:	4b07      	ldr	r3, [pc, #28]	; (8005b20 <_dtoa_r+0xbd8>)
 8005b04:	f7ff ba8e 	b.w	8005024 <_dtoa_r+0xdc>
 8005b08:	9b02      	ldr	r3, [sp, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	dcae      	bgt.n	8005a6c <_dtoa_r+0xb24>
 8005b0e:	9b06      	ldr	r3, [sp, #24]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	f73f aea8 	bgt.w	8005866 <_dtoa_r+0x91e>
 8005b16:	e7a9      	b.n	8005a6c <_dtoa_r+0xb24>
 8005b18:	08007007 	.word	0x08007007
 8005b1c:	08006f64 	.word	0x08006f64
 8005b20:	08006f88 	.word	0x08006f88

08005b24 <__sflush_r>:
 8005b24:	898a      	ldrh	r2, [r1, #12]
 8005b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2a:	4605      	mov	r5, r0
 8005b2c:	0710      	lsls	r0, r2, #28
 8005b2e:	460c      	mov	r4, r1
 8005b30:	d458      	bmi.n	8005be4 <__sflush_r+0xc0>
 8005b32:	684b      	ldr	r3, [r1, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	dc05      	bgt.n	8005b44 <__sflush_r+0x20>
 8005b38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	dc02      	bgt.n	8005b44 <__sflush_r+0x20>
 8005b3e:	2000      	movs	r0, #0
 8005b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b46:	2e00      	cmp	r6, #0
 8005b48:	d0f9      	beq.n	8005b3e <__sflush_r+0x1a>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b50:	682f      	ldr	r7, [r5, #0]
 8005b52:	602b      	str	r3, [r5, #0]
 8005b54:	d032      	beq.n	8005bbc <__sflush_r+0x98>
 8005b56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b58:	89a3      	ldrh	r3, [r4, #12]
 8005b5a:	075a      	lsls	r2, r3, #29
 8005b5c:	d505      	bpl.n	8005b6a <__sflush_r+0x46>
 8005b5e:	6863      	ldr	r3, [r4, #4]
 8005b60:	1ac0      	subs	r0, r0, r3
 8005b62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b64:	b10b      	cbz	r3, 8005b6a <__sflush_r+0x46>
 8005b66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b68:	1ac0      	subs	r0, r0, r3
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b70:	6a21      	ldr	r1, [r4, #32]
 8005b72:	4628      	mov	r0, r5
 8005b74:	47b0      	blx	r6
 8005b76:	1c43      	adds	r3, r0, #1
 8005b78:	89a3      	ldrh	r3, [r4, #12]
 8005b7a:	d106      	bne.n	8005b8a <__sflush_r+0x66>
 8005b7c:	6829      	ldr	r1, [r5, #0]
 8005b7e:	291d      	cmp	r1, #29
 8005b80:	d82c      	bhi.n	8005bdc <__sflush_r+0xb8>
 8005b82:	4a2a      	ldr	r2, [pc, #168]	; (8005c2c <__sflush_r+0x108>)
 8005b84:	40ca      	lsrs	r2, r1
 8005b86:	07d6      	lsls	r6, r2, #31
 8005b88:	d528      	bpl.n	8005bdc <__sflush_r+0xb8>
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	6062      	str	r2, [r4, #4]
 8005b8e:	04d9      	lsls	r1, r3, #19
 8005b90:	6922      	ldr	r2, [r4, #16]
 8005b92:	6022      	str	r2, [r4, #0]
 8005b94:	d504      	bpl.n	8005ba0 <__sflush_r+0x7c>
 8005b96:	1c42      	adds	r2, r0, #1
 8005b98:	d101      	bne.n	8005b9e <__sflush_r+0x7a>
 8005b9a:	682b      	ldr	r3, [r5, #0]
 8005b9c:	b903      	cbnz	r3, 8005ba0 <__sflush_r+0x7c>
 8005b9e:	6560      	str	r0, [r4, #84]	; 0x54
 8005ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ba2:	602f      	str	r7, [r5, #0]
 8005ba4:	2900      	cmp	r1, #0
 8005ba6:	d0ca      	beq.n	8005b3e <__sflush_r+0x1a>
 8005ba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bac:	4299      	cmp	r1, r3
 8005bae:	d002      	beq.n	8005bb6 <__sflush_r+0x92>
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	f000 fd8b 	bl	80066cc <_free_r>
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	6360      	str	r0, [r4, #52]	; 0x34
 8005bba:	e7c1      	b.n	8005b40 <__sflush_r+0x1c>
 8005bbc:	6a21      	ldr	r1, [r4, #32]
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	47b0      	blx	r6
 8005bc4:	1c41      	adds	r1, r0, #1
 8005bc6:	d1c7      	bne.n	8005b58 <__sflush_r+0x34>
 8005bc8:	682b      	ldr	r3, [r5, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d0c4      	beq.n	8005b58 <__sflush_r+0x34>
 8005bce:	2b1d      	cmp	r3, #29
 8005bd0:	d001      	beq.n	8005bd6 <__sflush_r+0xb2>
 8005bd2:	2b16      	cmp	r3, #22
 8005bd4:	d101      	bne.n	8005bda <__sflush_r+0xb6>
 8005bd6:	602f      	str	r7, [r5, #0]
 8005bd8:	e7b1      	b.n	8005b3e <__sflush_r+0x1a>
 8005bda:	89a3      	ldrh	r3, [r4, #12]
 8005bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005be0:	81a3      	strh	r3, [r4, #12]
 8005be2:	e7ad      	b.n	8005b40 <__sflush_r+0x1c>
 8005be4:	690f      	ldr	r7, [r1, #16]
 8005be6:	2f00      	cmp	r7, #0
 8005be8:	d0a9      	beq.n	8005b3e <__sflush_r+0x1a>
 8005bea:	0793      	lsls	r3, r2, #30
 8005bec:	680e      	ldr	r6, [r1, #0]
 8005bee:	bf08      	it	eq
 8005bf0:	694b      	ldreq	r3, [r1, #20]
 8005bf2:	600f      	str	r7, [r1, #0]
 8005bf4:	bf18      	it	ne
 8005bf6:	2300      	movne	r3, #0
 8005bf8:	eba6 0807 	sub.w	r8, r6, r7
 8005bfc:	608b      	str	r3, [r1, #8]
 8005bfe:	f1b8 0f00 	cmp.w	r8, #0
 8005c02:	dd9c      	ble.n	8005b3e <__sflush_r+0x1a>
 8005c04:	6a21      	ldr	r1, [r4, #32]
 8005c06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c08:	4643      	mov	r3, r8
 8005c0a:	463a      	mov	r2, r7
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	47b0      	blx	r6
 8005c10:	2800      	cmp	r0, #0
 8005c12:	dc06      	bgt.n	8005c22 <__sflush_r+0xfe>
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c1a:	81a3      	strh	r3, [r4, #12]
 8005c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c20:	e78e      	b.n	8005b40 <__sflush_r+0x1c>
 8005c22:	4407      	add	r7, r0
 8005c24:	eba8 0800 	sub.w	r8, r8, r0
 8005c28:	e7e9      	b.n	8005bfe <__sflush_r+0xda>
 8005c2a:	bf00      	nop
 8005c2c:	20400001 	.word	0x20400001

08005c30 <_fflush_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	690b      	ldr	r3, [r1, #16]
 8005c34:	4605      	mov	r5, r0
 8005c36:	460c      	mov	r4, r1
 8005c38:	b913      	cbnz	r3, 8005c40 <_fflush_r+0x10>
 8005c3a:	2500      	movs	r5, #0
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	bd38      	pop	{r3, r4, r5, pc}
 8005c40:	b118      	cbz	r0, 8005c4a <_fflush_r+0x1a>
 8005c42:	6983      	ldr	r3, [r0, #24]
 8005c44:	b90b      	cbnz	r3, 8005c4a <_fflush_r+0x1a>
 8005c46:	f000 f887 	bl	8005d58 <__sinit>
 8005c4a:	4b14      	ldr	r3, [pc, #80]	; (8005c9c <_fflush_r+0x6c>)
 8005c4c:	429c      	cmp	r4, r3
 8005c4e:	d11b      	bne.n	8005c88 <_fflush_r+0x58>
 8005c50:	686c      	ldr	r4, [r5, #4]
 8005c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d0ef      	beq.n	8005c3a <_fflush_r+0xa>
 8005c5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c5c:	07d0      	lsls	r0, r2, #31
 8005c5e:	d404      	bmi.n	8005c6a <_fflush_r+0x3a>
 8005c60:	0599      	lsls	r1, r3, #22
 8005c62:	d402      	bmi.n	8005c6a <_fflush_r+0x3a>
 8005c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c66:	f000 f91a 	bl	8005e9e <__retarget_lock_acquire_recursive>
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	f7ff ff59 	bl	8005b24 <__sflush_r>
 8005c72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c74:	07da      	lsls	r2, r3, #31
 8005c76:	4605      	mov	r5, r0
 8005c78:	d4e0      	bmi.n	8005c3c <_fflush_r+0xc>
 8005c7a:	89a3      	ldrh	r3, [r4, #12]
 8005c7c:	059b      	lsls	r3, r3, #22
 8005c7e:	d4dd      	bmi.n	8005c3c <_fflush_r+0xc>
 8005c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c82:	f000 f90d 	bl	8005ea0 <__retarget_lock_release_recursive>
 8005c86:	e7d9      	b.n	8005c3c <_fflush_r+0xc>
 8005c88:	4b05      	ldr	r3, [pc, #20]	; (8005ca0 <_fflush_r+0x70>)
 8005c8a:	429c      	cmp	r4, r3
 8005c8c:	d101      	bne.n	8005c92 <_fflush_r+0x62>
 8005c8e:	68ac      	ldr	r4, [r5, #8]
 8005c90:	e7df      	b.n	8005c52 <_fflush_r+0x22>
 8005c92:	4b04      	ldr	r3, [pc, #16]	; (8005ca4 <_fflush_r+0x74>)
 8005c94:	429c      	cmp	r4, r3
 8005c96:	bf08      	it	eq
 8005c98:	68ec      	ldreq	r4, [r5, #12]
 8005c9a:	e7da      	b.n	8005c52 <_fflush_r+0x22>
 8005c9c:	08007038 	.word	0x08007038
 8005ca0:	08007058 	.word	0x08007058
 8005ca4:	08007018 	.word	0x08007018

08005ca8 <std>:
 8005ca8:	2300      	movs	r3, #0
 8005caa:	b510      	push	{r4, lr}
 8005cac:	4604      	mov	r4, r0
 8005cae:	e9c0 3300 	strd	r3, r3, [r0]
 8005cb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cb6:	6083      	str	r3, [r0, #8]
 8005cb8:	8181      	strh	r1, [r0, #12]
 8005cba:	6643      	str	r3, [r0, #100]	; 0x64
 8005cbc:	81c2      	strh	r2, [r0, #14]
 8005cbe:	6183      	str	r3, [r0, #24]
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	2208      	movs	r2, #8
 8005cc4:	305c      	adds	r0, #92	; 0x5c
 8005cc6:	f7fe fa23 	bl	8004110 <memset>
 8005cca:	4b05      	ldr	r3, [pc, #20]	; (8005ce0 <std+0x38>)
 8005ccc:	6263      	str	r3, [r4, #36]	; 0x24
 8005cce:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <std+0x3c>)
 8005cd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005cd2:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <std+0x40>)
 8005cd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cd6:	4b05      	ldr	r3, [pc, #20]	; (8005cec <std+0x44>)
 8005cd8:	6224      	str	r4, [r4, #32]
 8005cda:	6323      	str	r3, [r4, #48]	; 0x30
 8005cdc:	bd10      	pop	{r4, pc}
 8005cde:	bf00      	nop
 8005ce0:	08006b61 	.word	0x08006b61
 8005ce4:	08006b83 	.word	0x08006b83
 8005ce8:	08006bbb 	.word	0x08006bbb
 8005cec:	08006bdf 	.word	0x08006bdf

08005cf0 <_cleanup_r>:
 8005cf0:	4901      	ldr	r1, [pc, #4]	; (8005cf8 <_cleanup_r+0x8>)
 8005cf2:	f000 b8af 	b.w	8005e54 <_fwalk_reent>
 8005cf6:	bf00      	nop
 8005cf8:	08005c31 	.word	0x08005c31

08005cfc <__sfmoreglue>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	2268      	movs	r2, #104	; 0x68
 8005d00:	1e4d      	subs	r5, r1, #1
 8005d02:	4355      	muls	r5, r2
 8005d04:	460e      	mov	r6, r1
 8005d06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d0a:	f000 fd4b 	bl	80067a4 <_malloc_r>
 8005d0e:	4604      	mov	r4, r0
 8005d10:	b140      	cbz	r0, 8005d24 <__sfmoreglue+0x28>
 8005d12:	2100      	movs	r1, #0
 8005d14:	e9c0 1600 	strd	r1, r6, [r0]
 8005d18:	300c      	adds	r0, #12
 8005d1a:	60a0      	str	r0, [r4, #8]
 8005d1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d20:	f7fe f9f6 	bl	8004110 <memset>
 8005d24:	4620      	mov	r0, r4
 8005d26:	bd70      	pop	{r4, r5, r6, pc}

08005d28 <__sfp_lock_acquire>:
 8005d28:	4801      	ldr	r0, [pc, #4]	; (8005d30 <__sfp_lock_acquire+0x8>)
 8005d2a:	f000 b8b8 	b.w	8005e9e <__retarget_lock_acquire_recursive>
 8005d2e:	bf00      	nop
 8005d30:	2000035d 	.word	0x2000035d

08005d34 <__sfp_lock_release>:
 8005d34:	4801      	ldr	r0, [pc, #4]	; (8005d3c <__sfp_lock_release+0x8>)
 8005d36:	f000 b8b3 	b.w	8005ea0 <__retarget_lock_release_recursive>
 8005d3a:	bf00      	nop
 8005d3c:	2000035d 	.word	0x2000035d

08005d40 <__sinit_lock_acquire>:
 8005d40:	4801      	ldr	r0, [pc, #4]	; (8005d48 <__sinit_lock_acquire+0x8>)
 8005d42:	f000 b8ac 	b.w	8005e9e <__retarget_lock_acquire_recursive>
 8005d46:	bf00      	nop
 8005d48:	2000035e 	.word	0x2000035e

08005d4c <__sinit_lock_release>:
 8005d4c:	4801      	ldr	r0, [pc, #4]	; (8005d54 <__sinit_lock_release+0x8>)
 8005d4e:	f000 b8a7 	b.w	8005ea0 <__retarget_lock_release_recursive>
 8005d52:	bf00      	nop
 8005d54:	2000035e 	.word	0x2000035e

08005d58 <__sinit>:
 8005d58:	b510      	push	{r4, lr}
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	f7ff fff0 	bl	8005d40 <__sinit_lock_acquire>
 8005d60:	69a3      	ldr	r3, [r4, #24]
 8005d62:	b11b      	cbz	r3, 8005d6c <__sinit+0x14>
 8005d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d68:	f7ff bff0 	b.w	8005d4c <__sinit_lock_release>
 8005d6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005d70:	6523      	str	r3, [r4, #80]	; 0x50
 8005d72:	4b13      	ldr	r3, [pc, #76]	; (8005dc0 <__sinit+0x68>)
 8005d74:	4a13      	ldr	r2, [pc, #76]	; (8005dc4 <__sinit+0x6c>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	62a2      	str	r2, [r4, #40]	; 0x28
 8005d7a:	42a3      	cmp	r3, r4
 8005d7c:	bf04      	itt	eq
 8005d7e:	2301      	moveq	r3, #1
 8005d80:	61a3      	streq	r3, [r4, #24]
 8005d82:	4620      	mov	r0, r4
 8005d84:	f000 f820 	bl	8005dc8 <__sfp>
 8005d88:	6060      	str	r0, [r4, #4]
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	f000 f81c 	bl	8005dc8 <__sfp>
 8005d90:	60a0      	str	r0, [r4, #8]
 8005d92:	4620      	mov	r0, r4
 8005d94:	f000 f818 	bl	8005dc8 <__sfp>
 8005d98:	2200      	movs	r2, #0
 8005d9a:	60e0      	str	r0, [r4, #12]
 8005d9c:	2104      	movs	r1, #4
 8005d9e:	6860      	ldr	r0, [r4, #4]
 8005da0:	f7ff ff82 	bl	8005ca8 <std>
 8005da4:	68a0      	ldr	r0, [r4, #8]
 8005da6:	2201      	movs	r2, #1
 8005da8:	2109      	movs	r1, #9
 8005daa:	f7ff ff7d 	bl	8005ca8 <std>
 8005dae:	68e0      	ldr	r0, [r4, #12]
 8005db0:	2202      	movs	r2, #2
 8005db2:	2112      	movs	r1, #18
 8005db4:	f7ff ff78 	bl	8005ca8 <std>
 8005db8:	2301      	movs	r3, #1
 8005dba:	61a3      	str	r3, [r4, #24]
 8005dbc:	e7d2      	b.n	8005d64 <__sinit+0xc>
 8005dbe:	bf00      	nop
 8005dc0:	08006f50 	.word	0x08006f50
 8005dc4:	08005cf1 	.word	0x08005cf1

08005dc8 <__sfp>:
 8005dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dca:	4607      	mov	r7, r0
 8005dcc:	f7ff ffac 	bl	8005d28 <__sfp_lock_acquire>
 8005dd0:	4b1e      	ldr	r3, [pc, #120]	; (8005e4c <__sfp+0x84>)
 8005dd2:	681e      	ldr	r6, [r3, #0]
 8005dd4:	69b3      	ldr	r3, [r6, #24]
 8005dd6:	b913      	cbnz	r3, 8005dde <__sfp+0x16>
 8005dd8:	4630      	mov	r0, r6
 8005dda:	f7ff ffbd 	bl	8005d58 <__sinit>
 8005dde:	3648      	adds	r6, #72	; 0x48
 8005de0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	d503      	bpl.n	8005df0 <__sfp+0x28>
 8005de8:	6833      	ldr	r3, [r6, #0]
 8005dea:	b30b      	cbz	r3, 8005e30 <__sfp+0x68>
 8005dec:	6836      	ldr	r6, [r6, #0]
 8005dee:	e7f7      	b.n	8005de0 <__sfp+0x18>
 8005df0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005df4:	b9d5      	cbnz	r5, 8005e2c <__sfp+0x64>
 8005df6:	4b16      	ldr	r3, [pc, #88]	; (8005e50 <__sfp+0x88>)
 8005df8:	60e3      	str	r3, [r4, #12]
 8005dfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005dfe:	6665      	str	r5, [r4, #100]	; 0x64
 8005e00:	f000 f84c 	bl	8005e9c <__retarget_lock_init_recursive>
 8005e04:	f7ff ff96 	bl	8005d34 <__sfp_lock_release>
 8005e08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005e0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005e10:	6025      	str	r5, [r4, #0]
 8005e12:	61a5      	str	r5, [r4, #24]
 8005e14:	2208      	movs	r2, #8
 8005e16:	4629      	mov	r1, r5
 8005e18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e1c:	f7fe f978 	bl	8004110 <memset>
 8005e20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e28:	4620      	mov	r0, r4
 8005e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e2c:	3468      	adds	r4, #104	; 0x68
 8005e2e:	e7d9      	b.n	8005de4 <__sfp+0x1c>
 8005e30:	2104      	movs	r1, #4
 8005e32:	4638      	mov	r0, r7
 8005e34:	f7ff ff62 	bl	8005cfc <__sfmoreglue>
 8005e38:	4604      	mov	r4, r0
 8005e3a:	6030      	str	r0, [r6, #0]
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d1d5      	bne.n	8005dec <__sfp+0x24>
 8005e40:	f7ff ff78 	bl	8005d34 <__sfp_lock_release>
 8005e44:	230c      	movs	r3, #12
 8005e46:	603b      	str	r3, [r7, #0]
 8005e48:	e7ee      	b.n	8005e28 <__sfp+0x60>
 8005e4a:	bf00      	nop
 8005e4c:	08006f50 	.word	0x08006f50
 8005e50:	ffff0001 	.word	0xffff0001

08005e54 <_fwalk_reent>:
 8005e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e58:	4606      	mov	r6, r0
 8005e5a:	4688      	mov	r8, r1
 8005e5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e60:	2700      	movs	r7, #0
 8005e62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e66:	f1b9 0901 	subs.w	r9, r9, #1
 8005e6a:	d505      	bpl.n	8005e78 <_fwalk_reent+0x24>
 8005e6c:	6824      	ldr	r4, [r4, #0]
 8005e6e:	2c00      	cmp	r4, #0
 8005e70:	d1f7      	bne.n	8005e62 <_fwalk_reent+0xe>
 8005e72:	4638      	mov	r0, r7
 8005e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e78:	89ab      	ldrh	r3, [r5, #12]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d907      	bls.n	8005e8e <_fwalk_reent+0x3a>
 8005e7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e82:	3301      	adds	r3, #1
 8005e84:	d003      	beq.n	8005e8e <_fwalk_reent+0x3a>
 8005e86:	4629      	mov	r1, r5
 8005e88:	4630      	mov	r0, r6
 8005e8a:	47c0      	blx	r8
 8005e8c:	4307      	orrs	r7, r0
 8005e8e:	3568      	adds	r5, #104	; 0x68
 8005e90:	e7e9      	b.n	8005e66 <_fwalk_reent+0x12>
	...

08005e94 <_localeconv_r>:
 8005e94:	4800      	ldr	r0, [pc, #0]	; (8005e98 <_localeconv_r+0x4>)
 8005e96:	4770      	bx	lr
 8005e98:	20000160 	.word	0x20000160

08005e9c <__retarget_lock_init_recursive>:
 8005e9c:	4770      	bx	lr

08005e9e <__retarget_lock_acquire_recursive>:
 8005e9e:	4770      	bx	lr

08005ea0 <__retarget_lock_release_recursive>:
 8005ea0:	4770      	bx	lr

08005ea2 <__swhatbuf_r>:
 8005ea2:	b570      	push	{r4, r5, r6, lr}
 8005ea4:	460e      	mov	r6, r1
 8005ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eaa:	2900      	cmp	r1, #0
 8005eac:	b096      	sub	sp, #88	; 0x58
 8005eae:	4614      	mov	r4, r2
 8005eb0:	461d      	mov	r5, r3
 8005eb2:	da08      	bge.n	8005ec6 <__swhatbuf_r+0x24>
 8005eb4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	602a      	str	r2, [r5, #0]
 8005ebc:	061a      	lsls	r2, r3, #24
 8005ebe:	d410      	bmi.n	8005ee2 <__swhatbuf_r+0x40>
 8005ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ec4:	e00e      	b.n	8005ee4 <__swhatbuf_r+0x42>
 8005ec6:	466a      	mov	r2, sp
 8005ec8:	f000 fee0 	bl	8006c8c <_fstat_r>
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	dbf1      	blt.n	8005eb4 <__swhatbuf_r+0x12>
 8005ed0:	9a01      	ldr	r2, [sp, #4]
 8005ed2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ed6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005eda:	425a      	negs	r2, r3
 8005edc:	415a      	adcs	r2, r3
 8005ede:	602a      	str	r2, [r5, #0]
 8005ee0:	e7ee      	b.n	8005ec0 <__swhatbuf_r+0x1e>
 8005ee2:	2340      	movs	r3, #64	; 0x40
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	6023      	str	r3, [r4, #0]
 8005ee8:	b016      	add	sp, #88	; 0x58
 8005eea:	bd70      	pop	{r4, r5, r6, pc}

08005eec <__smakebuf_r>:
 8005eec:	898b      	ldrh	r3, [r1, #12]
 8005eee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ef0:	079d      	lsls	r5, r3, #30
 8005ef2:	4606      	mov	r6, r0
 8005ef4:	460c      	mov	r4, r1
 8005ef6:	d507      	bpl.n	8005f08 <__smakebuf_r+0x1c>
 8005ef8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	6123      	str	r3, [r4, #16]
 8005f00:	2301      	movs	r3, #1
 8005f02:	6163      	str	r3, [r4, #20]
 8005f04:	b002      	add	sp, #8
 8005f06:	bd70      	pop	{r4, r5, r6, pc}
 8005f08:	ab01      	add	r3, sp, #4
 8005f0a:	466a      	mov	r2, sp
 8005f0c:	f7ff ffc9 	bl	8005ea2 <__swhatbuf_r>
 8005f10:	9900      	ldr	r1, [sp, #0]
 8005f12:	4605      	mov	r5, r0
 8005f14:	4630      	mov	r0, r6
 8005f16:	f000 fc45 	bl	80067a4 <_malloc_r>
 8005f1a:	b948      	cbnz	r0, 8005f30 <__smakebuf_r+0x44>
 8005f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f20:	059a      	lsls	r2, r3, #22
 8005f22:	d4ef      	bmi.n	8005f04 <__smakebuf_r+0x18>
 8005f24:	f023 0303 	bic.w	r3, r3, #3
 8005f28:	f043 0302 	orr.w	r3, r3, #2
 8005f2c:	81a3      	strh	r3, [r4, #12]
 8005f2e:	e7e3      	b.n	8005ef8 <__smakebuf_r+0xc>
 8005f30:	4b0d      	ldr	r3, [pc, #52]	; (8005f68 <__smakebuf_r+0x7c>)
 8005f32:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f34:	89a3      	ldrh	r3, [r4, #12]
 8005f36:	6020      	str	r0, [r4, #0]
 8005f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f3c:	81a3      	strh	r3, [r4, #12]
 8005f3e:	9b00      	ldr	r3, [sp, #0]
 8005f40:	6163      	str	r3, [r4, #20]
 8005f42:	9b01      	ldr	r3, [sp, #4]
 8005f44:	6120      	str	r0, [r4, #16]
 8005f46:	b15b      	cbz	r3, 8005f60 <__smakebuf_r+0x74>
 8005f48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	f000 feaf 	bl	8006cb0 <_isatty_r>
 8005f52:	b128      	cbz	r0, 8005f60 <__smakebuf_r+0x74>
 8005f54:	89a3      	ldrh	r3, [r4, #12]
 8005f56:	f023 0303 	bic.w	r3, r3, #3
 8005f5a:	f043 0301 	orr.w	r3, r3, #1
 8005f5e:	81a3      	strh	r3, [r4, #12]
 8005f60:	89a0      	ldrh	r0, [r4, #12]
 8005f62:	4305      	orrs	r5, r0
 8005f64:	81a5      	strh	r5, [r4, #12]
 8005f66:	e7cd      	b.n	8005f04 <__smakebuf_r+0x18>
 8005f68:	08005cf1 	.word	0x08005cf1

08005f6c <malloc>:
 8005f6c:	4b02      	ldr	r3, [pc, #8]	; (8005f78 <malloc+0xc>)
 8005f6e:	4601      	mov	r1, r0
 8005f70:	6818      	ldr	r0, [r3, #0]
 8005f72:	f000 bc17 	b.w	80067a4 <_malloc_r>
 8005f76:	bf00      	nop
 8005f78:	2000000c 	.word	0x2000000c

08005f7c <memcpy>:
 8005f7c:	440a      	add	r2, r1
 8005f7e:	4291      	cmp	r1, r2
 8005f80:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f84:	d100      	bne.n	8005f88 <memcpy+0xc>
 8005f86:	4770      	bx	lr
 8005f88:	b510      	push	{r4, lr}
 8005f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f92:	4291      	cmp	r1, r2
 8005f94:	d1f9      	bne.n	8005f8a <memcpy+0xe>
 8005f96:	bd10      	pop	{r4, pc}

08005f98 <_Balloc>:
 8005f98:	b570      	push	{r4, r5, r6, lr}
 8005f9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	460d      	mov	r5, r1
 8005fa0:	b976      	cbnz	r6, 8005fc0 <_Balloc+0x28>
 8005fa2:	2010      	movs	r0, #16
 8005fa4:	f7ff ffe2 	bl	8005f6c <malloc>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	6260      	str	r0, [r4, #36]	; 0x24
 8005fac:	b920      	cbnz	r0, 8005fb8 <_Balloc+0x20>
 8005fae:	4b18      	ldr	r3, [pc, #96]	; (8006010 <_Balloc+0x78>)
 8005fb0:	4818      	ldr	r0, [pc, #96]	; (8006014 <_Balloc+0x7c>)
 8005fb2:	2166      	movs	r1, #102	; 0x66
 8005fb4:	f000 fe2a 	bl	8006c0c <__assert_func>
 8005fb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fbc:	6006      	str	r6, [r0, #0]
 8005fbe:	60c6      	str	r6, [r0, #12]
 8005fc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005fc2:	68f3      	ldr	r3, [r6, #12]
 8005fc4:	b183      	cbz	r3, 8005fe8 <_Balloc+0x50>
 8005fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005fce:	b9b8      	cbnz	r0, 8006000 <_Balloc+0x68>
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	fa01 f605 	lsl.w	r6, r1, r5
 8005fd6:	1d72      	adds	r2, r6, #5
 8005fd8:	0092      	lsls	r2, r2, #2
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f000 fb60 	bl	80066a0 <_calloc_r>
 8005fe0:	b160      	cbz	r0, 8005ffc <_Balloc+0x64>
 8005fe2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005fe6:	e00e      	b.n	8006006 <_Balloc+0x6e>
 8005fe8:	2221      	movs	r2, #33	; 0x21
 8005fea:	2104      	movs	r1, #4
 8005fec:	4620      	mov	r0, r4
 8005fee:	f000 fb57 	bl	80066a0 <_calloc_r>
 8005ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ff4:	60f0      	str	r0, [r6, #12]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1e4      	bne.n	8005fc6 <_Balloc+0x2e>
 8005ffc:	2000      	movs	r0, #0
 8005ffe:	bd70      	pop	{r4, r5, r6, pc}
 8006000:	6802      	ldr	r2, [r0, #0]
 8006002:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006006:	2300      	movs	r3, #0
 8006008:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800600c:	e7f7      	b.n	8005ffe <_Balloc+0x66>
 800600e:	bf00      	nop
 8006010:	08006f95 	.word	0x08006f95
 8006014:	08007078 	.word	0x08007078

08006018 <_Bfree>:
 8006018:	b570      	push	{r4, r5, r6, lr}
 800601a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800601c:	4605      	mov	r5, r0
 800601e:	460c      	mov	r4, r1
 8006020:	b976      	cbnz	r6, 8006040 <_Bfree+0x28>
 8006022:	2010      	movs	r0, #16
 8006024:	f7ff ffa2 	bl	8005f6c <malloc>
 8006028:	4602      	mov	r2, r0
 800602a:	6268      	str	r0, [r5, #36]	; 0x24
 800602c:	b920      	cbnz	r0, 8006038 <_Bfree+0x20>
 800602e:	4b09      	ldr	r3, [pc, #36]	; (8006054 <_Bfree+0x3c>)
 8006030:	4809      	ldr	r0, [pc, #36]	; (8006058 <_Bfree+0x40>)
 8006032:	218a      	movs	r1, #138	; 0x8a
 8006034:	f000 fdea 	bl	8006c0c <__assert_func>
 8006038:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800603c:	6006      	str	r6, [r0, #0]
 800603e:	60c6      	str	r6, [r0, #12]
 8006040:	b13c      	cbz	r4, 8006052 <_Bfree+0x3a>
 8006042:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006044:	6862      	ldr	r2, [r4, #4]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800604c:	6021      	str	r1, [r4, #0]
 800604e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006052:	bd70      	pop	{r4, r5, r6, pc}
 8006054:	08006f95 	.word	0x08006f95
 8006058:	08007078 	.word	0x08007078

0800605c <__multadd>:
 800605c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006060:	690d      	ldr	r5, [r1, #16]
 8006062:	4607      	mov	r7, r0
 8006064:	460c      	mov	r4, r1
 8006066:	461e      	mov	r6, r3
 8006068:	f101 0c14 	add.w	ip, r1, #20
 800606c:	2000      	movs	r0, #0
 800606e:	f8dc 3000 	ldr.w	r3, [ip]
 8006072:	b299      	uxth	r1, r3
 8006074:	fb02 6101 	mla	r1, r2, r1, r6
 8006078:	0c1e      	lsrs	r6, r3, #16
 800607a:	0c0b      	lsrs	r3, r1, #16
 800607c:	fb02 3306 	mla	r3, r2, r6, r3
 8006080:	b289      	uxth	r1, r1
 8006082:	3001      	adds	r0, #1
 8006084:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006088:	4285      	cmp	r5, r0
 800608a:	f84c 1b04 	str.w	r1, [ip], #4
 800608e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006092:	dcec      	bgt.n	800606e <__multadd+0x12>
 8006094:	b30e      	cbz	r6, 80060da <__multadd+0x7e>
 8006096:	68a3      	ldr	r3, [r4, #8]
 8006098:	42ab      	cmp	r3, r5
 800609a:	dc19      	bgt.n	80060d0 <__multadd+0x74>
 800609c:	6861      	ldr	r1, [r4, #4]
 800609e:	4638      	mov	r0, r7
 80060a0:	3101      	adds	r1, #1
 80060a2:	f7ff ff79 	bl	8005f98 <_Balloc>
 80060a6:	4680      	mov	r8, r0
 80060a8:	b928      	cbnz	r0, 80060b6 <__multadd+0x5a>
 80060aa:	4602      	mov	r2, r0
 80060ac:	4b0c      	ldr	r3, [pc, #48]	; (80060e0 <__multadd+0x84>)
 80060ae:	480d      	ldr	r0, [pc, #52]	; (80060e4 <__multadd+0x88>)
 80060b0:	21b5      	movs	r1, #181	; 0xb5
 80060b2:	f000 fdab 	bl	8006c0c <__assert_func>
 80060b6:	6922      	ldr	r2, [r4, #16]
 80060b8:	3202      	adds	r2, #2
 80060ba:	f104 010c 	add.w	r1, r4, #12
 80060be:	0092      	lsls	r2, r2, #2
 80060c0:	300c      	adds	r0, #12
 80060c2:	f7ff ff5b 	bl	8005f7c <memcpy>
 80060c6:	4621      	mov	r1, r4
 80060c8:	4638      	mov	r0, r7
 80060ca:	f7ff ffa5 	bl	8006018 <_Bfree>
 80060ce:	4644      	mov	r4, r8
 80060d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80060d4:	3501      	adds	r5, #1
 80060d6:	615e      	str	r6, [r3, #20]
 80060d8:	6125      	str	r5, [r4, #16]
 80060da:	4620      	mov	r0, r4
 80060dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060e0:	08007007 	.word	0x08007007
 80060e4:	08007078 	.word	0x08007078

080060e8 <__hi0bits>:
 80060e8:	0c03      	lsrs	r3, r0, #16
 80060ea:	041b      	lsls	r3, r3, #16
 80060ec:	b9d3      	cbnz	r3, 8006124 <__hi0bits+0x3c>
 80060ee:	0400      	lsls	r0, r0, #16
 80060f0:	2310      	movs	r3, #16
 80060f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80060f6:	bf04      	itt	eq
 80060f8:	0200      	lsleq	r0, r0, #8
 80060fa:	3308      	addeq	r3, #8
 80060fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006100:	bf04      	itt	eq
 8006102:	0100      	lsleq	r0, r0, #4
 8006104:	3304      	addeq	r3, #4
 8006106:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800610a:	bf04      	itt	eq
 800610c:	0080      	lsleq	r0, r0, #2
 800610e:	3302      	addeq	r3, #2
 8006110:	2800      	cmp	r0, #0
 8006112:	db05      	blt.n	8006120 <__hi0bits+0x38>
 8006114:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006118:	f103 0301 	add.w	r3, r3, #1
 800611c:	bf08      	it	eq
 800611e:	2320      	moveq	r3, #32
 8006120:	4618      	mov	r0, r3
 8006122:	4770      	bx	lr
 8006124:	2300      	movs	r3, #0
 8006126:	e7e4      	b.n	80060f2 <__hi0bits+0xa>

08006128 <__lo0bits>:
 8006128:	6803      	ldr	r3, [r0, #0]
 800612a:	f013 0207 	ands.w	r2, r3, #7
 800612e:	4601      	mov	r1, r0
 8006130:	d00b      	beq.n	800614a <__lo0bits+0x22>
 8006132:	07da      	lsls	r2, r3, #31
 8006134:	d423      	bmi.n	800617e <__lo0bits+0x56>
 8006136:	0798      	lsls	r0, r3, #30
 8006138:	bf49      	itett	mi
 800613a:	085b      	lsrmi	r3, r3, #1
 800613c:	089b      	lsrpl	r3, r3, #2
 800613e:	2001      	movmi	r0, #1
 8006140:	600b      	strmi	r3, [r1, #0]
 8006142:	bf5c      	itt	pl
 8006144:	600b      	strpl	r3, [r1, #0]
 8006146:	2002      	movpl	r0, #2
 8006148:	4770      	bx	lr
 800614a:	b298      	uxth	r0, r3
 800614c:	b9a8      	cbnz	r0, 800617a <__lo0bits+0x52>
 800614e:	0c1b      	lsrs	r3, r3, #16
 8006150:	2010      	movs	r0, #16
 8006152:	b2da      	uxtb	r2, r3
 8006154:	b90a      	cbnz	r2, 800615a <__lo0bits+0x32>
 8006156:	3008      	adds	r0, #8
 8006158:	0a1b      	lsrs	r3, r3, #8
 800615a:	071a      	lsls	r2, r3, #28
 800615c:	bf04      	itt	eq
 800615e:	091b      	lsreq	r3, r3, #4
 8006160:	3004      	addeq	r0, #4
 8006162:	079a      	lsls	r2, r3, #30
 8006164:	bf04      	itt	eq
 8006166:	089b      	lsreq	r3, r3, #2
 8006168:	3002      	addeq	r0, #2
 800616a:	07da      	lsls	r2, r3, #31
 800616c:	d403      	bmi.n	8006176 <__lo0bits+0x4e>
 800616e:	085b      	lsrs	r3, r3, #1
 8006170:	f100 0001 	add.w	r0, r0, #1
 8006174:	d005      	beq.n	8006182 <__lo0bits+0x5a>
 8006176:	600b      	str	r3, [r1, #0]
 8006178:	4770      	bx	lr
 800617a:	4610      	mov	r0, r2
 800617c:	e7e9      	b.n	8006152 <__lo0bits+0x2a>
 800617e:	2000      	movs	r0, #0
 8006180:	4770      	bx	lr
 8006182:	2020      	movs	r0, #32
 8006184:	4770      	bx	lr
	...

08006188 <__i2b>:
 8006188:	b510      	push	{r4, lr}
 800618a:	460c      	mov	r4, r1
 800618c:	2101      	movs	r1, #1
 800618e:	f7ff ff03 	bl	8005f98 <_Balloc>
 8006192:	4602      	mov	r2, r0
 8006194:	b928      	cbnz	r0, 80061a2 <__i2b+0x1a>
 8006196:	4b05      	ldr	r3, [pc, #20]	; (80061ac <__i2b+0x24>)
 8006198:	4805      	ldr	r0, [pc, #20]	; (80061b0 <__i2b+0x28>)
 800619a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800619e:	f000 fd35 	bl	8006c0c <__assert_func>
 80061a2:	2301      	movs	r3, #1
 80061a4:	6144      	str	r4, [r0, #20]
 80061a6:	6103      	str	r3, [r0, #16]
 80061a8:	bd10      	pop	{r4, pc}
 80061aa:	bf00      	nop
 80061ac:	08007007 	.word	0x08007007
 80061b0:	08007078 	.word	0x08007078

080061b4 <__multiply>:
 80061b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b8:	4691      	mov	r9, r2
 80061ba:	690a      	ldr	r2, [r1, #16]
 80061bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	bfb8      	it	lt
 80061c4:	460b      	movlt	r3, r1
 80061c6:	460c      	mov	r4, r1
 80061c8:	bfbc      	itt	lt
 80061ca:	464c      	movlt	r4, r9
 80061cc:	4699      	movlt	r9, r3
 80061ce:	6927      	ldr	r7, [r4, #16]
 80061d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80061d4:	68a3      	ldr	r3, [r4, #8]
 80061d6:	6861      	ldr	r1, [r4, #4]
 80061d8:	eb07 060a 	add.w	r6, r7, sl
 80061dc:	42b3      	cmp	r3, r6
 80061de:	b085      	sub	sp, #20
 80061e0:	bfb8      	it	lt
 80061e2:	3101      	addlt	r1, #1
 80061e4:	f7ff fed8 	bl	8005f98 <_Balloc>
 80061e8:	b930      	cbnz	r0, 80061f8 <__multiply+0x44>
 80061ea:	4602      	mov	r2, r0
 80061ec:	4b44      	ldr	r3, [pc, #272]	; (8006300 <__multiply+0x14c>)
 80061ee:	4845      	ldr	r0, [pc, #276]	; (8006304 <__multiply+0x150>)
 80061f0:	f240 115d 	movw	r1, #349	; 0x15d
 80061f4:	f000 fd0a 	bl	8006c0c <__assert_func>
 80061f8:	f100 0514 	add.w	r5, r0, #20
 80061fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006200:	462b      	mov	r3, r5
 8006202:	2200      	movs	r2, #0
 8006204:	4543      	cmp	r3, r8
 8006206:	d321      	bcc.n	800624c <__multiply+0x98>
 8006208:	f104 0314 	add.w	r3, r4, #20
 800620c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006210:	f109 0314 	add.w	r3, r9, #20
 8006214:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006218:	9202      	str	r2, [sp, #8]
 800621a:	1b3a      	subs	r2, r7, r4
 800621c:	3a15      	subs	r2, #21
 800621e:	f022 0203 	bic.w	r2, r2, #3
 8006222:	3204      	adds	r2, #4
 8006224:	f104 0115 	add.w	r1, r4, #21
 8006228:	428f      	cmp	r7, r1
 800622a:	bf38      	it	cc
 800622c:	2204      	movcc	r2, #4
 800622e:	9201      	str	r2, [sp, #4]
 8006230:	9a02      	ldr	r2, [sp, #8]
 8006232:	9303      	str	r3, [sp, #12]
 8006234:	429a      	cmp	r2, r3
 8006236:	d80c      	bhi.n	8006252 <__multiply+0x9e>
 8006238:	2e00      	cmp	r6, #0
 800623a:	dd03      	ble.n	8006244 <__multiply+0x90>
 800623c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006240:	2b00      	cmp	r3, #0
 8006242:	d05a      	beq.n	80062fa <__multiply+0x146>
 8006244:	6106      	str	r6, [r0, #16]
 8006246:	b005      	add	sp, #20
 8006248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800624c:	f843 2b04 	str.w	r2, [r3], #4
 8006250:	e7d8      	b.n	8006204 <__multiply+0x50>
 8006252:	f8b3 a000 	ldrh.w	sl, [r3]
 8006256:	f1ba 0f00 	cmp.w	sl, #0
 800625a:	d024      	beq.n	80062a6 <__multiply+0xf2>
 800625c:	f104 0e14 	add.w	lr, r4, #20
 8006260:	46a9      	mov	r9, r5
 8006262:	f04f 0c00 	mov.w	ip, #0
 8006266:	f85e 2b04 	ldr.w	r2, [lr], #4
 800626a:	f8d9 1000 	ldr.w	r1, [r9]
 800626e:	fa1f fb82 	uxth.w	fp, r2
 8006272:	b289      	uxth	r1, r1
 8006274:	fb0a 110b 	mla	r1, sl, fp, r1
 8006278:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800627c:	f8d9 2000 	ldr.w	r2, [r9]
 8006280:	4461      	add	r1, ip
 8006282:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006286:	fb0a c20b 	mla	r2, sl, fp, ip
 800628a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800628e:	b289      	uxth	r1, r1
 8006290:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006294:	4577      	cmp	r7, lr
 8006296:	f849 1b04 	str.w	r1, [r9], #4
 800629a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800629e:	d8e2      	bhi.n	8006266 <__multiply+0xb2>
 80062a0:	9a01      	ldr	r2, [sp, #4]
 80062a2:	f845 c002 	str.w	ip, [r5, r2]
 80062a6:	9a03      	ldr	r2, [sp, #12]
 80062a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80062ac:	3304      	adds	r3, #4
 80062ae:	f1b9 0f00 	cmp.w	r9, #0
 80062b2:	d020      	beq.n	80062f6 <__multiply+0x142>
 80062b4:	6829      	ldr	r1, [r5, #0]
 80062b6:	f104 0c14 	add.w	ip, r4, #20
 80062ba:	46ae      	mov	lr, r5
 80062bc:	f04f 0a00 	mov.w	sl, #0
 80062c0:	f8bc b000 	ldrh.w	fp, [ip]
 80062c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80062c8:	fb09 220b 	mla	r2, r9, fp, r2
 80062cc:	4492      	add	sl, r2
 80062ce:	b289      	uxth	r1, r1
 80062d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80062d4:	f84e 1b04 	str.w	r1, [lr], #4
 80062d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80062dc:	f8be 1000 	ldrh.w	r1, [lr]
 80062e0:	0c12      	lsrs	r2, r2, #16
 80062e2:	fb09 1102 	mla	r1, r9, r2, r1
 80062e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80062ea:	4567      	cmp	r7, ip
 80062ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80062f0:	d8e6      	bhi.n	80062c0 <__multiply+0x10c>
 80062f2:	9a01      	ldr	r2, [sp, #4]
 80062f4:	50a9      	str	r1, [r5, r2]
 80062f6:	3504      	adds	r5, #4
 80062f8:	e79a      	b.n	8006230 <__multiply+0x7c>
 80062fa:	3e01      	subs	r6, #1
 80062fc:	e79c      	b.n	8006238 <__multiply+0x84>
 80062fe:	bf00      	nop
 8006300:	08007007 	.word	0x08007007
 8006304:	08007078 	.word	0x08007078

08006308 <__pow5mult>:
 8006308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800630c:	4615      	mov	r5, r2
 800630e:	f012 0203 	ands.w	r2, r2, #3
 8006312:	4606      	mov	r6, r0
 8006314:	460f      	mov	r7, r1
 8006316:	d007      	beq.n	8006328 <__pow5mult+0x20>
 8006318:	4c25      	ldr	r4, [pc, #148]	; (80063b0 <__pow5mult+0xa8>)
 800631a:	3a01      	subs	r2, #1
 800631c:	2300      	movs	r3, #0
 800631e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006322:	f7ff fe9b 	bl	800605c <__multadd>
 8006326:	4607      	mov	r7, r0
 8006328:	10ad      	asrs	r5, r5, #2
 800632a:	d03d      	beq.n	80063a8 <__pow5mult+0xa0>
 800632c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800632e:	b97c      	cbnz	r4, 8006350 <__pow5mult+0x48>
 8006330:	2010      	movs	r0, #16
 8006332:	f7ff fe1b 	bl	8005f6c <malloc>
 8006336:	4602      	mov	r2, r0
 8006338:	6270      	str	r0, [r6, #36]	; 0x24
 800633a:	b928      	cbnz	r0, 8006348 <__pow5mult+0x40>
 800633c:	4b1d      	ldr	r3, [pc, #116]	; (80063b4 <__pow5mult+0xac>)
 800633e:	481e      	ldr	r0, [pc, #120]	; (80063b8 <__pow5mult+0xb0>)
 8006340:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006344:	f000 fc62 	bl	8006c0c <__assert_func>
 8006348:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800634c:	6004      	str	r4, [r0, #0]
 800634e:	60c4      	str	r4, [r0, #12]
 8006350:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006354:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006358:	b94c      	cbnz	r4, 800636e <__pow5mult+0x66>
 800635a:	f240 2171 	movw	r1, #625	; 0x271
 800635e:	4630      	mov	r0, r6
 8006360:	f7ff ff12 	bl	8006188 <__i2b>
 8006364:	2300      	movs	r3, #0
 8006366:	f8c8 0008 	str.w	r0, [r8, #8]
 800636a:	4604      	mov	r4, r0
 800636c:	6003      	str	r3, [r0, #0]
 800636e:	f04f 0900 	mov.w	r9, #0
 8006372:	07eb      	lsls	r3, r5, #31
 8006374:	d50a      	bpl.n	800638c <__pow5mult+0x84>
 8006376:	4639      	mov	r1, r7
 8006378:	4622      	mov	r2, r4
 800637a:	4630      	mov	r0, r6
 800637c:	f7ff ff1a 	bl	80061b4 <__multiply>
 8006380:	4639      	mov	r1, r7
 8006382:	4680      	mov	r8, r0
 8006384:	4630      	mov	r0, r6
 8006386:	f7ff fe47 	bl	8006018 <_Bfree>
 800638a:	4647      	mov	r7, r8
 800638c:	106d      	asrs	r5, r5, #1
 800638e:	d00b      	beq.n	80063a8 <__pow5mult+0xa0>
 8006390:	6820      	ldr	r0, [r4, #0]
 8006392:	b938      	cbnz	r0, 80063a4 <__pow5mult+0x9c>
 8006394:	4622      	mov	r2, r4
 8006396:	4621      	mov	r1, r4
 8006398:	4630      	mov	r0, r6
 800639a:	f7ff ff0b 	bl	80061b4 <__multiply>
 800639e:	6020      	str	r0, [r4, #0]
 80063a0:	f8c0 9000 	str.w	r9, [r0]
 80063a4:	4604      	mov	r4, r0
 80063a6:	e7e4      	b.n	8006372 <__pow5mult+0x6a>
 80063a8:	4638      	mov	r0, r7
 80063aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ae:	bf00      	nop
 80063b0:	080071c8 	.word	0x080071c8
 80063b4:	08006f95 	.word	0x08006f95
 80063b8:	08007078 	.word	0x08007078

080063bc <__lshift>:
 80063bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063c0:	460c      	mov	r4, r1
 80063c2:	6849      	ldr	r1, [r1, #4]
 80063c4:	6923      	ldr	r3, [r4, #16]
 80063c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80063ca:	68a3      	ldr	r3, [r4, #8]
 80063cc:	4607      	mov	r7, r0
 80063ce:	4691      	mov	r9, r2
 80063d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80063d4:	f108 0601 	add.w	r6, r8, #1
 80063d8:	42b3      	cmp	r3, r6
 80063da:	db0b      	blt.n	80063f4 <__lshift+0x38>
 80063dc:	4638      	mov	r0, r7
 80063de:	f7ff fddb 	bl	8005f98 <_Balloc>
 80063e2:	4605      	mov	r5, r0
 80063e4:	b948      	cbnz	r0, 80063fa <__lshift+0x3e>
 80063e6:	4602      	mov	r2, r0
 80063e8:	4b2a      	ldr	r3, [pc, #168]	; (8006494 <__lshift+0xd8>)
 80063ea:	482b      	ldr	r0, [pc, #172]	; (8006498 <__lshift+0xdc>)
 80063ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80063f0:	f000 fc0c 	bl	8006c0c <__assert_func>
 80063f4:	3101      	adds	r1, #1
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	e7ee      	b.n	80063d8 <__lshift+0x1c>
 80063fa:	2300      	movs	r3, #0
 80063fc:	f100 0114 	add.w	r1, r0, #20
 8006400:	f100 0210 	add.w	r2, r0, #16
 8006404:	4618      	mov	r0, r3
 8006406:	4553      	cmp	r3, sl
 8006408:	db37      	blt.n	800647a <__lshift+0xbe>
 800640a:	6920      	ldr	r0, [r4, #16]
 800640c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006410:	f104 0314 	add.w	r3, r4, #20
 8006414:	f019 091f 	ands.w	r9, r9, #31
 8006418:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800641c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006420:	d02f      	beq.n	8006482 <__lshift+0xc6>
 8006422:	f1c9 0e20 	rsb	lr, r9, #32
 8006426:	468a      	mov	sl, r1
 8006428:	f04f 0c00 	mov.w	ip, #0
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	fa02 f209 	lsl.w	r2, r2, r9
 8006432:	ea42 020c 	orr.w	r2, r2, ip
 8006436:	f84a 2b04 	str.w	r2, [sl], #4
 800643a:	f853 2b04 	ldr.w	r2, [r3], #4
 800643e:	4298      	cmp	r0, r3
 8006440:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006444:	d8f2      	bhi.n	800642c <__lshift+0x70>
 8006446:	1b03      	subs	r3, r0, r4
 8006448:	3b15      	subs	r3, #21
 800644a:	f023 0303 	bic.w	r3, r3, #3
 800644e:	3304      	adds	r3, #4
 8006450:	f104 0215 	add.w	r2, r4, #21
 8006454:	4290      	cmp	r0, r2
 8006456:	bf38      	it	cc
 8006458:	2304      	movcc	r3, #4
 800645a:	f841 c003 	str.w	ip, [r1, r3]
 800645e:	f1bc 0f00 	cmp.w	ip, #0
 8006462:	d001      	beq.n	8006468 <__lshift+0xac>
 8006464:	f108 0602 	add.w	r6, r8, #2
 8006468:	3e01      	subs	r6, #1
 800646a:	4638      	mov	r0, r7
 800646c:	612e      	str	r6, [r5, #16]
 800646e:	4621      	mov	r1, r4
 8006470:	f7ff fdd2 	bl	8006018 <_Bfree>
 8006474:	4628      	mov	r0, r5
 8006476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800647a:	f842 0f04 	str.w	r0, [r2, #4]!
 800647e:	3301      	adds	r3, #1
 8006480:	e7c1      	b.n	8006406 <__lshift+0x4a>
 8006482:	3904      	subs	r1, #4
 8006484:	f853 2b04 	ldr.w	r2, [r3], #4
 8006488:	f841 2f04 	str.w	r2, [r1, #4]!
 800648c:	4298      	cmp	r0, r3
 800648e:	d8f9      	bhi.n	8006484 <__lshift+0xc8>
 8006490:	e7ea      	b.n	8006468 <__lshift+0xac>
 8006492:	bf00      	nop
 8006494:	08007007 	.word	0x08007007
 8006498:	08007078 	.word	0x08007078

0800649c <__mcmp>:
 800649c:	b530      	push	{r4, r5, lr}
 800649e:	6902      	ldr	r2, [r0, #16]
 80064a0:	690c      	ldr	r4, [r1, #16]
 80064a2:	1b12      	subs	r2, r2, r4
 80064a4:	d10e      	bne.n	80064c4 <__mcmp+0x28>
 80064a6:	f100 0314 	add.w	r3, r0, #20
 80064aa:	3114      	adds	r1, #20
 80064ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80064b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80064b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80064b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80064bc:	42a5      	cmp	r5, r4
 80064be:	d003      	beq.n	80064c8 <__mcmp+0x2c>
 80064c0:	d305      	bcc.n	80064ce <__mcmp+0x32>
 80064c2:	2201      	movs	r2, #1
 80064c4:	4610      	mov	r0, r2
 80064c6:	bd30      	pop	{r4, r5, pc}
 80064c8:	4283      	cmp	r3, r0
 80064ca:	d3f3      	bcc.n	80064b4 <__mcmp+0x18>
 80064cc:	e7fa      	b.n	80064c4 <__mcmp+0x28>
 80064ce:	f04f 32ff 	mov.w	r2, #4294967295
 80064d2:	e7f7      	b.n	80064c4 <__mcmp+0x28>

080064d4 <__mdiff>:
 80064d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d8:	460c      	mov	r4, r1
 80064da:	4606      	mov	r6, r0
 80064dc:	4611      	mov	r1, r2
 80064de:	4620      	mov	r0, r4
 80064e0:	4690      	mov	r8, r2
 80064e2:	f7ff ffdb 	bl	800649c <__mcmp>
 80064e6:	1e05      	subs	r5, r0, #0
 80064e8:	d110      	bne.n	800650c <__mdiff+0x38>
 80064ea:	4629      	mov	r1, r5
 80064ec:	4630      	mov	r0, r6
 80064ee:	f7ff fd53 	bl	8005f98 <_Balloc>
 80064f2:	b930      	cbnz	r0, 8006502 <__mdiff+0x2e>
 80064f4:	4b3a      	ldr	r3, [pc, #232]	; (80065e0 <__mdiff+0x10c>)
 80064f6:	4602      	mov	r2, r0
 80064f8:	f240 2132 	movw	r1, #562	; 0x232
 80064fc:	4839      	ldr	r0, [pc, #228]	; (80065e4 <__mdiff+0x110>)
 80064fe:	f000 fb85 	bl	8006c0c <__assert_func>
 8006502:	2301      	movs	r3, #1
 8006504:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650c:	bfa4      	itt	ge
 800650e:	4643      	movge	r3, r8
 8006510:	46a0      	movge	r8, r4
 8006512:	4630      	mov	r0, r6
 8006514:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006518:	bfa6      	itte	ge
 800651a:	461c      	movge	r4, r3
 800651c:	2500      	movge	r5, #0
 800651e:	2501      	movlt	r5, #1
 8006520:	f7ff fd3a 	bl	8005f98 <_Balloc>
 8006524:	b920      	cbnz	r0, 8006530 <__mdiff+0x5c>
 8006526:	4b2e      	ldr	r3, [pc, #184]	; (80065e0 <__mdiff+0x10c>)
 8006528:	4602      	mov	r2, r0
 800652a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800652e:	e7e5      	b.n	80064fc <__mdiff+0x28>
 8006530:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006534:	6926      	ldr	r6, [r4, #16]
 8006536:	60c5      	str	r5, [r0, #12]
 8006538:	f104 0914 	add.w	r9, r4, #20
 800653c:	f108 0514 	add.w	r5, r8, #20
 8006540:	f100 0e14 	add.w	lr, r0, #20
 8006544:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006548:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800654c:	f108 0210 	add.w	r2, r8, #16
 8006550:	46f2      	mov	sl, lr
 8006552:	2100      	movs	r1, #0
 8006554:	f859 3b04 	ldr.w	r3, [r9], #4
 8006558:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800655c:	fa1f f883 	uxth.w	r8, r3
 8006560:	fa11 f18b 	uxtah	r1, r1, fp
 8006564:	0c1b      	lsrs	r3, r3, #16
 8006566:	eba1 0808 	sub.w	r8, r1, r8
 800656a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800656e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006572:	fa1f f888 	uxth.w	r8, r8
 8006576:	1419      	asrs	r1, r3, #16
 8006578:	454e      	cmp	r6, r9
 800657a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800657e:	f84a 3b04 	str.w	r3, [sl], #4
 8006582:	d8e7      	bhi.n	8006554 <__mdiff+0x80>
 8006584:	1b33      	subs	r3, r6, r4
 8006586:	3b15      	subs	r3, #21
 8006588:	f023 0303 	bic.w	r3, r3, #3
 800658c:	3304      	adds	r3, #4
 800658e:	3415      	adds	r4, #21
 8006590:	42a6      	cmp	r6, r4
 8006592:	bf38      	it	cc
 8006594:	2304      	movcc	r3, #4
 8006596:	441d      	add	r5, r3
 8006598:	4473      	add	r3, lr
 800659a:	469e      	mov	lr, r3
 800659c:	462e      	mov	r6, r5
 800659e:	4566      	cmp	r6, ip
 80065a0:	d30e      	bcc.n	80065c0 <__mdiff+0xec>
 80065a2:	f10c 0203 	add.w	r2, ip, #3
 80065a6:	1b52      	subs	r2, r2, r5
 80065a8:	f022 0203 	bic.w	r2, r2, #3
 80065ac:	3d03      	subs	r5, #3
 80065ae:	45ac      	cmp	ip, r5
 80065b0:	bf38      	it	cc
 80065b2:	2200      	movcc	r2, #0
 80065b4:	441a      	add	r2, r3
 80065b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80065ba:	b17b      	cbz	r3, 80065dc <__mdiff+0x108>
 80065bc:	6107      	str	r7, [r0, #16]
 80065be:	e7a3      	b.n	8006508 <__mdiff+0x34>
 80065c0:	f856 8b04 	ldr.w	r8, [r6], #4
 80065c4:	fa11 f288 	uxtah	r2, r1, r8
 80065c8:	1414      	asrs	r4, r2, #16
 80065ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80065ce:	b292      	uxth	r2, r2
 80065d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80065d4:	f84e 2b04 	str.w	r2, [lr], #4
 80065d8:	1421      	asrs	r1, r4, #16
 80065da:	e7e0      	b.n	800659e <__mdiff+0xca>
 80065dc:	3f01      	subs	r7, #1
 80065de:	e7ea      	b.n	80065b6 <__mdiff+0xe2>
 80065e0:	08007007 	.word	0x08007007
 80065e4:	08007078 	.word	0x08007078

080065e8 <__d2b>:
 80065e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80065ec:	4689      	mov	r9, r1
 80065ee:	2101      	movs	r1, #1
 80065f0:	ec57 6b10 	vmov	r6, r7, d0
 80065f4:	4690      	mov	r8, r2
 80065f6:	f7ff fccf 	bl	8005f98 <_Balloc>
 80065fa:	4604      	mov	r4, r0
 80065fc:	b930      	cbnz	r0, 800660c <__d2b+0x24>
 80065fe:	4602      	mov	r2, r0
 8006600:	4b25      	ldr	r3, [pc, #148]	; (8006698 <__d2b+0xb0>)
 8006602:	4826      	ldr	r0, [pc, #152]	; (800669c <__d2b+0xb4>)
 8006604:	f240 310a 	movw	r1, #778	; 0x30a
 8006608:	f000 fb00 	bl	8006c0c <__assert_func>
 800660c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006610:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006614:	bb35      	cbnz	r5, 8006664 <__d2b+0x7c>
 8006616:	2e00      	cmp	r6, #0
 8006618:	9301      	str	r3, [sp, #4]
 800661a:	d028      	beq.n	800666e <__d2b+0x86>
 800661c:	4668      	mov	r0, sp
 800661e:	9600      	str	r6, [sp, #0]
 8006620:	f7ff fd82 	bl	8006128 <__lo0bits>
 8006624:	9900      	ldr	r1, [sp, #0]
 8006626:	b300      	cbz	r0, 800666a <__d2b+0x82>
 8006628:	9a01      	ldr	r2, [sp, #4]
 800662a:	f1c0 0320 	rsb	r3, r0, #32
 800662e:	fa02 f303 	lsl.w	r3, r2, r3
 8006632:	430b      	orrs	r3, r1
 8006634:	40c2      	lsrs	r2, r0
 8006636:	6163      	str	r3, [r4, #20]
 8006638:	9201      	str	r2, [sp, #4]
 800663a:	9b01      	ldr	r3, [sp, #4]
 800663c:	61a3      	str	r3, [r4, #24]
 800663e:	2b00      	cmp	r3, #0
 8006640:	bf14      	ite	ne
 8006642:	2202      	movne	r2, #2
 8006644:	2201      	moveq	r2, #1
 8006646:	6122      	str	r2, [r4, #16]
 8006648:	b1d5      	cbz	r5, 8006680 <__d2b+0x98>
 800664a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800664e:	4405      	add	r5, r0
 8006650:	f8c9 5000 	str.w	r5, [r9]
 8006654:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006658:	f8c8 0000 	str.w	r0, [r8]
 800665c:	4620      	mov	r0, r4
 800665e:	b003      	add	sp, #12
 8006660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006668:	e7d5      	b.n	8006616 <__d2b+0x2e>
 800666a:	6161      	str	r1, [r4, #20]
 800666c:	e7e5      	b.n	800663a <__d2b+0x52>
 800666e:	a801      	add	r0, sp, #4
 8006670:	f7ff fd5a 	bl	8006128 <__lo0bits>
 8006674:	9b01      	ldr	r3, [sp, #4]
 8006676:	6163      	str	r3, [r4, #20]
 8006678:	2201      	movs	r2, #1
 800667a:	6122      	str	r2, [r4, #16]
 800667c:	3020      	adds	r0, #32
 800667e:	e7e3      	b.n	8006648 <__d2b+0x60>
 8006680:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006684:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006688:	f8c9 0000 	str.w	r0, [r9]
 800668c:	6918      	ldr	r0, [r3, #16]
 800668e:	f7ff fd2b 	bl	80060e8 <__hi0bits>
 8006692:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006696:	e7df      	b.n	8006658 <__d2b+0x70>
 8006698:	08007007 	.word	0x08007007
 800669c:	08007078 	.word	0x08007078

080066a0 <_calloc_r>:
 80066a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066a2:	fba1 2402 	umull	r2, r4, r1, r2
 80066a6:	b94c      	cbnz	r4, 80066bc <_calloc_r+0x1c>
 80066a8:	4611      	mov	r1, r2
 80066aa:	9201      	str	r2, [sp, #4]
 80066ac:	f000 f87a 	bl	80067a4 <_malloc_r>
 80066b0:	9a01      	ldr	r2, [sp, #4]
 80066b2:	4605      	mov	r5, r0
 80066b4:	b930      	cbnz	r0, 80066c4 <_calloc_r+0x24>
 80066b6:	4628      	mov	r0, r5
 80066b8:	b003      	add	sp, #12
 80066ba:	bd30      	pop	{r4, r5, pc}
 80066bc:	220c      	movs	r2, #12
 80066be:	6002      	str	r2, [r0, #0]
 80066c0:	2500      	movs	r5, #0
 80066c2:	e7f8      	b.n	80066b6 <_calloc_r+0x16>
 80066c4:	4621      	mov	r1, r4
 80066c6:	f7fd fd23 	bl	8004110 <memset>
 80066ca:	e7f4      	b.n	80066b6 <_calloc_r+0x16>

080066cc <_free_r>:
 80066cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066ce:	2900      	cmp	r1, #0
 80066d0:	d044      	beq.n	800675c <_free_r+0x90>
 80066d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066d6:	9001      	str	r0, [sp, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f1a1 0404 	sub.w	r4, r1, #4
 80066de:	bfb8      	it	lt
 80066e0:	18e4      	addlt	r4, r4, r3
 80066e2:	f000 fb19 	bl	8006d18 <__malloc_lock>
 80066e6:	4a1e      	ldr	r2, [pc, #120]	; (8006760 <_free_r+0x94>)
 80066e8:	9801      	ldr	r0, [sp, #4]
 80066ea:	6813      	ldr	r3, [r2, #0]
 80066ec:	b933      	cbnz	r3, 80066fc <_free_r+0x30>
 80066ee:	6063      	str	r3, [r4, #4]
 80066f0:	6014      	str	r4, [r2, #0]
 80066f2:	b003      	add	sp, #12
 80066f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066f8:	f000 bb14 	b.w	8006d24 <__malloc_unlock>
 80066fc:	42a3      	cmp	r3, r4
 80066fe:	d908      	bls.n	8006712 <_free_r+0x46>
 8006700:	6825      	ldr	r5, [r4, #0]
 8006702:	1961      	adds	r1, r4, r5
 8006704:	428b      	cmp	r3, r1
 8006706:	bf01      	itttt	eq
 8006708:	6819      	ldreq	r1, [r3, #0]
 800670a:	685b      	ldreq	r3, [r3, #4]
 800670c:	1949      	addeq	r1, r1, r5
 800670e:	6021      	streq	r1, [r4, #0]
 8006710:	e7ed      	b.n	80066ee <_free_r+0x22>
 8006712:	461a      	mov	r2, r3
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	b10b      	cbz	r3, 800671c <_free_r+0x50>
 8006718:	42a3      	cmp	r3, r4
 800671a:	d9fa      	bls.n	8006712 <_free_r+0x46>
 800671c:	6811      	ldr	r1, [r2, #0]
 800671e:	1855      	adds	r5, r2, r1
 8006720:	42a5      	cmp	r5, r4
 8006722:	d10b      	bne.n	800673c <_free_r+0x70>
 8006724:	6824      	ldr	r4, [r4, #0]
 8006726:	4421      	add	r1, r4
 8006728:	1854      	adds	r4, r2, r1
 800672a:	42a3      	cmp	r3, r4
 800672c:	6011      	str	r1, [r2, #0]
 800672e:	d1e0      	bne.n	80066f2 <_free_r+0x26>
 8006730:	681c      	ldr	r4, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	6053      	str	r3, [r2, #4]
 8006736:	4421      	add	r1, r4
 8006738:	6011      	str	r1, [r2, #0]
 800673a:	e7da      	b.n	80066f2 <_free_r+0x26>
 800673c:	d902      	bls.n	8006744 <_free_r+0x78>
 800673e:	230c      	movs	r3, #12
 8006740:	6003      	str	r3, [r0, #0]
 8006742:	e7d6      	b.n	80066f2 <_free_r+0x26>
 8006744:	6825      	ldr	r5, [r4, #0]
 8006746:	1961      	adds	r1, r4, r5
 8006748:	428b      	cmp	r3, r1
 800674a:	bf04      	itt	eq
 800674c:	6819      	ldreq	r1, [r3, #0]
 800674e:	685b      	ldreq	r3, [r3, #4]
 8006750:	6063      	str	r3, [r4, #4]
 8006752:	bf04      	itt	eq
 8006754:	1949      	addeq	r1, r1, r5
 8006756:	6021      	streq	r1, [r4, #0]
 8006758:	6054      	str	r4, [r2, #4]
 800675a:	e7ca      	b.n	80066f2 <_free_r+0x26>
 800675c:	b003      	add	sp, #12
 800675e:	bd30      	pop	{r4, r5, pc}
 8006760:	20000360 	.word	0x20000360

08006764 <sbrk_aligned>:
 8006764:	b570      	push	{r4, r5, r6, lr}
 8006766:	4e0e      	ldr	r6, [pc, #56]	; (80067a0 <sbrk_aligned+0x3c>)
 8006768:	460c      	mov	r4, r1
 800676a:	6831      	ldr	r1, [r6, #0]
 800676c:	4605      	mov	r5, r0
 800676e:	b911      	cbnz	r1, 8006776 <sbrk_aligned+0x12>
 8006770:	f000 f9e6 	bl	8006b40 <_sbrk_r>
 8006774:	6030      	str	r0, [r6, #0]
 8006776:	4621      	mov	r1, r4
 8006778:	4628      	mov	r0, r5
 800677a:	f000 f9e1 	bl	8006b40 <_sbrk_r>
 800677e:	1c43      	adds	r3, r0, #1
 8006780:	d00a      	beq.n	8006798 <sbrk_aligned+0x34>
 8006782:	1cc4      	adds	r4, r0, #3
 8006784:	f024 0403 	bic.w	r4, r4, #3
 8006788:	42a0      	cmp	r0, r4
 800678a:	d007      	beq.n	800679c <sbrk_aligned+0x38>
 800678c:	1a21      	subs	r1, r4, r0
 800678e:	4628      	mov	r0, r5
 8006790:	f000 f9d6 	bl	8006b40 <_sbrk_r>
 8006794:	3001      	adds	r0, #1
 8006796:	d101      	bne.n	800679c <sbrk_aligned+0x38>
 8006798:	f04f 34ff 	mov.w	r4, #4294967295
 800679c:	4620      	mov	r0, r4
 800679e:	bd70      	pop	{r4, r5, r6, pc}
 80067a0:	20000364 	.word	0x20000364

080067a4 <_malloc_r>:
 80067a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a8:	1ccd      	adds	r5, r1, #3
 80067aa:	f025 0503 	bic.w	r5, r5, #3
 80067ae:	3508      	adds	r5, #8
 80067b0:	2d0c      	cmp	r5, #12
 80067b2:	bf38      	it	cc
 80067b4:	250c      	movcc	r5, #12
 80067b6:	2d00      	cmp	r5, #0
 80067b8:	4607      	mov	r7, r0
 80067ba:	db01      	blt.n	80067c0 <_malloc_r+0x1c>
 80067bc:	42a9      	cmp	r1, r5
 80067be:	d905      	bls.n	80067cc <_malloc_r+0x28>
 80067c0:	230c      	movs	r3, #12
 80067c2:	603b      	str	r3, [r7, #0]
 80067c4:	2600      	movs	r6, #0
 80067c6:	4630      	mov	r0, r6
 80067c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067cc:	4e2e      	ldr	r6, [pc, #184]	; (8006888 <_malloc_r+0xe4>)
 80067ce:	f000 faa3 	bl	8006d18 <__malloc_lock>
 80067d2:	6833      	ldr	r3, [r6, #0]
 80067d4:	461c      	mov	r4, r3
 80067d6:	bb34      	cbnz	r4, 8006826 <_malloc_r+0x82>
 80067d8:	4629      	mov	r1, r5
 80067da:	4638      	mov	r0, r7
 80067dc:	f7ff ffc2 	bl	8006764 <sbrk_aligned>
 80067e0:	1c43      	adds	r3, r0, #1
 80067e2:	4604      	mov	r4, r0
 80067e4:	d14d      	bne.n	8006882 <_malloc_r+0xde>
 80067e6:	6834      	ldr	r4, [r6, #0]
 80067e8:	4626      	mov	r6, r4
 80067ea:	2e00      	cmp	r6, #0
 80067ec:	d140      	bne.n	8006870 <_malloc_r+0xcc>
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	4631      	mov	r1, r6
 80067f2:	4638      	mov	r0, r7
 80067f4:	eb04 0803 	add.w	r8, r4, r3
 80067f8:	f000 f9a2 	bl	8006b40 <_sbrk_r>
 80067fc:	4580      	cmp	r8, r0
 80067fe:	d13a      	bne.n	8006876 <_malloc_r+0xd2>
 8006800:	6821      	ldr	r1, [r4, #0]
 8006802:	3503      	adds	r5, #3
 8006804:	1a6d      	subs	r5, r5, r1
 8006806:	f025 0503 	bic.w	r5, r5, #3
 800680a:	3508      	adds	r5, #8
 800680c:	2d0c      	cmp	r5, #12
 800680e:	bf38      	it	cc
 8006810:	250c      	movcc	r5, #12
 8006812:	4629      	mov	r1, r5
 8006814:	4638      	mov	r0, r7
 8006816:	f7ff ffa5 	bl	8006764 <sbrk_aligned>
 800681a:	3001      	adds	r0, #1
 800681c:	d02b      	beq.n	8006876 <_malloc_r+0xd2>
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	442b      	add	r3, r5
 8006822:	6023      	str	r3, [r4, #0]
 8006824:	e00e      	b.n	8006844 <_malloc_r+0xa0>
 8006826:	6822      	ldr	r2, [r4, #0]
 8006828:	1b52      	subs	r2, r2, r5
 800682a:	d41e      	bmi.n	800686a <_malloc_r+0xc6>
 800682c:	2a0b      	cmp	r2, #11
 800682e:	d916      	bls.n	800685e <_malloc_r+0xba>
 8006830:	1961      	adds	r1, r4, r5
 8006832:	42a3      	cmp	r3, r4
 8006834:	6025      	str	r5, [r4, #0]
 8006836:	bf18      	it	ne
 8006838:	6059      	strne	r1, [r3, #4]
 800683a:	6863      	ldr	r3, [r4, #4]
 800683c:	bf08      	it	eq
 800683e:	6031      	streq	r1, [r6, #0]
 8006840:	5162      	str	r2, [r4, r5]
 8006842:	604b      	str	r3, [r1, #4]
 8006844:	4638      	mov	r0, r7
 8006846:	f104 060b 	add.w	r6, r4, #11
 800684a:	f000 fa6b 	bl	8006d24 <__malloc_unlock>
 800684e:	f026 0607 	bic.w	r6, r6, #7
 8006852:	1d23      	adds	r3, r4, #4
 8006854:	1af2      	subs	r2, r6, r3
 8006856:	d0b6      	beq.n	80067c6 <_malloc_r+0x22>
 8006858:	1b9b      	subs	r3, r3, r6
 800685a:	50a3      	str	r3, [r4, r2]
 800685c:	e7b3      	b.n	80067c6 <_malloc_r+0x22>
 800685e:	6862      	ldr	r2, [r4, #4]
 8006860:	42a3      	cmp	r3, r4
 8006862:	bf0c      	ite	eq
 8006864:	6032      	streq	r2, [r6, #0]
 8006866:	605a      	strne	r2, [r3, #4]
 8006868:	e7ec      	b.n	8006844 <_malloc_r+0xa0>
 800686a:	4623      	mov	r3, r4
 800686c:	6864      	ldr	r4, [r4, #4]
 800686e:	e7b2      	b.n	80067d6 <_malloc_r+0x32>
 8006870:	4634      	mov	r4, r6
 8006872:	6876      	ldr	r6, [r6, #4]
 8006874:	e7b9      	b.n	80067ea <_malloc_r+0x46>
 8006876:	230c      	movs	r3, #12
 8006878:	603b      	str	r3, [r7, #0]
 800687a:	4638      	mov	r0, r7
 800687c:	f000 fa52 	bl	8006d24 <__malloc_unlock>
 8006880:	e7a1      	b.n	80067c6 <_malloc_r+0x22>
 8006882:	6025      	str	r5, [r4, #0]
 8006884:	e7de      	b.n	8006844 <_malloc_r+0xa0>
 8006886:	bf00      	nop
 8006888:	20000360 	.word	0x20000360

0800688c <__sfputc_r>:
 800688c:	6893      	ldr	r3, [r2, #8]
 800688e:	3b01      	subs	r3, #1
 8006890:	2b00      	cmp	r3, #0
 8006892:	b410      	push	{r4}
 8006894:	6093      	str	r3, [r2, #8]
 8006896:	da08      	bge.n	80068aa <__sfputc_r+0x1e>
 8006898:	6994      	ldr	r4, [r2, #24]
 800689a:	42a3      	cmp	r3, r4
 800689c:	db01      	blt.n	80068a2 <__sfputc_r+0x16>
 800689e:	290a      	cmp	r1, #10
 80068a0:	d103      	bne.n	80068aa <__sfputc_r+0x1e>
 80068a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068a6:	f7fe ba01 	b.w	8004cac <__swbuf_r>
 80068aa:	6813      	ldr	r3, [r2, #0]
 80068ac:	1c58      	adds	r0, r3, #1
 80068ae:	6010      	str	r0, [r2, #0]
 80068b0:	7019      	strb	r1, [r3, #0]
 80068b2:	4608      	mov	r0, r1
 80068b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <__sfputs_r>:
 80068ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068bc:	4606      	mov	r6, r0
 80068be:	460f      	mov	r7, r1
 80068c0:	4614      	mov	r4, r2
 80068c2:	18d5      	adds	r5, r2, r3
 80068c4:	42ac      	cmp	r4, r5
 80068c6:	d101      	bne.n	80068cc <__sfputs_r+0x12>
 80068c8:	2000      	movs	r0, #0
 80068ca:	e007      	b.n	80068dc <__sfputs_r+0x22>
 80068cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068d0:	463a      	mov	r2, r7
 80068d2:	4630      	mov	r0, r6
 80068d4:	f7ff ffda 	bl	800688c <__sfputc_r>
 80068d8:	1c43      	adds	r3, r0, #1
 80068da:	d1f3      	bne.n	80068c4 <__sfputs_r+0xa>
 80068dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068e0 <_vfiprintf_r>:
 80068e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e4:	460d      	mov	r5, r1
 80068e6:	b09d      	sub	sp, #116	; 0x74
 80068e8:	4614      	mov	r4, r2
 80068ea:	4698      	mov	r8, r3
 80068ec:	4606      	mov	r6, r0
 80068ee:	b118      	cbz	r0, 80068f8 <_vfiprintf_r+0x18>
 80068f0:	6983      	ldr	r3, [r0, #24]
 80068f2:	b90b      	cbnz	r3, 80068f8 <_vfiprintf_r+0x18>
 80068f4:	f7ff fa30 	bl	8005d58 <__sinit>
 80068f8:	4b89      	ldr	r3, [pc, #548]	; (8006b20 <_vfiprintf_r+0x240>)
 80068fa:	429d      	cmp	r5, r3
 80068fc:	d11b      	bne.n	8006936 <_vfiprintf_r+0x56>
 80068fe:	6875      	ldr	r5, [r6, #4]
 8006900:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006902:	07d9      	lsls	r1, r3, #31
 8006904:	d405      	bmi.n	8006912 <_vfiprintf_r+0x32>
 8006906:	89ab      	ldrh	r3, [r5, #12]
 8006908:	059a      	lsls	r2, r3, #22
 800690a:	d402      	bmi.n	8006912 <_vfiprintf_r+0x32>
 800690c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800690e:	f7ff fac6 	bl	8005e9e <__retarget_lock_acquire_recursive>
 8006912:	89ab      	ldrh	r3, [r5, #12]
 8006914:	071b      	lsls	r3, r3, #28
 8006916:	d501      	bpl.n	800691c <_vfiprintf_r+0x3c>
 8006918:	692b      	ldr	r3, [r5, #16]
 800691a:	b9eb      	cbnz	r3, 8006958 <_vfiprintf_r+0x78>
 800691c:	4629      	mov	r1, r5
 800691e:	4630      	mov	r0, r6
 8006920:	f7fe fa16 	bl	8004d50 <__swsetup_r>
 8006924:	b1c0      	cbz	r0, 8006958 <_vfiprintf_r+0x78>
 8006926:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006928:	07dc      	lsls	r4, r3, #31
 800692a:	d50e      	bpl.n	800694a <_vfiprintf_r+0x6a>
 800692c:	f04f 30ff 	mov.w	r0, #4294967295
 8006930:	b01d      	add	sp, #116	; 0x74
 8006932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006936:	4b7b      	ldr	r3, [pc, #492]	; (8006b24 <_vfiprintf_r+0x244>)
 8006938:	429d      	cmp	r5, r3
 800693a:	d101      	bne.n	8006940 <_vfiprintf_r+0x60>
 800693c:	68b5      	ldr	r5, [r6, #8]
 800693e:	e7df      	b.n	8006900 <_vfiprintf_r+0x20>
 8006940:	4b79      	ldr	r3, [pc, #484]	; (8006b28 <_vfiprintf_r+0x248>)
 8006942:	429d      	cmp	r5, r3
 8006944:	bf08      	it	eq
 8006946:	68f5      	ldreq	r5, [r6, #12]
 8006948:	e7da      	b.n	8006900 <_vfiprintf_r+0x20>
 800694a:	89ab      	ldrh	r3, [r5, #12]
 800694c:	0598      	lsls	r0, r3, #22
 800694e:	d4ed      	bmi.n	800692c <_vfiprintf_r+0x4c>
 8006950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006952:	f7ff faa5 	bl	8005ea0 <__retarget_lock_release_recursive>
 8006956:	e7e9      	b.n	800692c <_vfiprintf_r+0x4c>
 8006958:	2300      	movs	r3, #0
 800695a:	9309      	str	r3, [sp, #36]	; 0x24
 800695c:	2320      	movs	r3, #32
 800695e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006962:	f8cd 800c 	str.w	r8, [sp, #12]
 8006966:	2330      	movs	r3, #48	; 0x30
 8006968:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006b2c <_vfiprintf_r+0x24c>
 800696c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006970:	f04f 0901 	mov.w	r9, #1
 8006974:	4623      	mov	r3, r4
 8006976:	469a      	mov	sl, r3
 8006978:	f813 2b01 	ldrb.w	r2, [r3], #1
 800697c:	b10a      	cbz	r2, 8006982 <_vfiprintf_r+0xa2>
 800697e:	2a25      	cmp	r2, #37	; 0x25
 8006980:	d1f9      	bne.n	8006976 <_vfiprintf_r+0x96>
 8006982:	ebba 0b04 	subs.w	fp, sl, r4
 8006986:	d00b      	beq.n	80069a0 <_vfiprintf_r+0xc0>
 8006988:	465b      	mov	r3, fp
 800698a:	4622      	mov	r2, r4
 800698c:	4629      	mov	r1, r5
 800698e:	4630      	mov	r0, r6
 8006990:	f7ff ff93 	bl	80068ba <__sfputs_r>
 8006994:	3001      	adds	r0, #1
 8006996:	f000 80aa 	beq.w	8006aee <_vfiprintf_r+0x20e>
 800699a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800699c:	445a      	add	r2, fp
 800699e:	9209      	str	r2, [sp, #36]	; 0x24
 80069a0:	f89a 3000 	ldrb.w	r3, [sl]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 80a2 	beq.w	8006aee <_vfiprintf_r+0x20e>
 80069aa:	2300      	movs	r3, #0
 80069ac:	f04f 32ff 	mov.w	r2, #4294967295
 80069b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069b4:	f10a 0a01 	add.w	sl, sl, #1
 80069b8:	9304      	str	r3, [sp, #16]
 80069ba:	9307      	str	r3, [sp, #28]
 80069bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069c0:	931a      	str	r3, [sp, #104]	; 0x68
 80069c2:	4654      	mov	r4, sl
 80069c4:	2205      	movs	r2, #5
 80069c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069ca:	4858      	ldr	r0, [pc, #352]	; (8006b2c <_vfiprintf_r+0x24c>)
 80069cc:	f7f9 fc08 	bl	80001e0 <memchr>
 80069d0:	9a04      	ldr	r2, [sp, #16]
 80069d2:	b9d8      	cbnz	r0, 8006a0c <_vfiprintf_r+0x12c>
 80069d4:	06d1      	lsls	r1, r2, #27
 80069d6:	bf44      	itt	mi
 80069d8:	2320      	movmi	r3, #32
 80069da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069de:	0713      	lsls	r3, r2, #28
 80069e0:	bf44      	itt	mi
 80069e2:	232b      	movmi	r3, #43	; 0x2b
 80069e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069e8:	f89a 3000 	ldrb.w	r3, [sl]
 80069ec:	2b2a      	cmp	r3, #42	; 0x2a
 80069ee:	d015      	beq.n	8006a1c <_vfiprintf_r+0x13c>
 80069f0:	9a07      	ldr	r2, [sp, #28]
 80069f2:	4654      	mov	r4, sl
 80069f4:	2000      	movs	r0, #0
 80069f6:	f04f 0c0a 	mov.w	ip, #10
 80069fa:	4621      	mov	r1, r4
 80069fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a00:	3b30      	subs	r3, #48	; 0x30
 8006a02:	2b09      	cmp	r3, #9
 8006a04:	d94e      	bls.n	8006aa4 <_vfiprintf_r+0x1c4>
 8006a06:	b1b0      	cbz	r0, 8006a36 <_vfiprintf_r+0x156>
 8006a08:	9207      	str	r2, [sp, #28]
 8006a0a:	e014      	b.n	8006a36 <_vfiprintf_r+0x156>
 8006a0c:	eba0 0308 	sub.w	r3, r0, r8
 8006a10:	fa09 f303 	lsl.w	r3, r9, r3
 8006a14:	4313      	orrs	r3, r2
 8006a16:	9304      	str	r3, [sp, #16]
 8006a18:	46a2      	mov	sl, r4
 8006a1a:	e7d2      	b.n	80069c2 <_vfiprintf_r+0xe2>
 8006a1c:	9b03      	ldr	r3, [sp, #12]
 8006a1e:	1d19      	adds	r1, r3, #4
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	9103      	str	r1, [sp, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	bfbb      	ittet	lt
 8006a28:	425b      	neglt	r3, r3
 8006a2a:	f042 0202 	orrlt.w	r2, r2, #2
 8006a2e:	9307      	strge	r3, [sp, #28]
 8006a30:	9307      	strlt	r3, [sp, #28]
 8006a32:	bfb8      	it	lt
 8006a34:	9204      	strlt	r2, [sp, #16]
 8006a36:	7823      	ldrb	r3, [r4, #0]
 8006a38:	2b2e      	cmp	r3, #46	; 0x2e
 8006a3a:	d10c      	bne.n	8006a56 <_vfiprintf_r+0x176>
 8006a3c:	7863      	ldrb	r3, [r4, #1]
 8006a3e:	2b2a      	cmp	r3, #42	; 0x2a
 8006a40:	d135      	bne.n	8006aae <_vfiprintf_r+0x1ce>
 8006a42:	9b03      	ldr	r3, [sp, #12]
 8006a44:	1d1a      	adds	r2, r3, #4
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	9203      	str	r2, [sp, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	bfb8      	it	lt
 8006a4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a52:	3402      	adds	r4, #2
 8006a54:	9305      	str	r3, [sp, #20]
 8006a56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b3c <_vfiprintf_r+0x25c>
 8006a5a:	7821      	ldrb	r1, [r4, #0]
 8006a5c:	2203      	movs	r2, #3
 8006a5e:	4650      	mov	r0, sl
 8006a60:	f7f9 fbbe 	bl	80001e0 <memchr>
 8006a64:	b140      	cbz	r0, 8006a78 <_vfiprintf_r+0x198>
 8006a66:	2340      	movs	r3, #64	; 0x40
 8006a68:	eba0 000a 	sub.w	r0, r0, sl
 8006a6c:	fa03 f000 	lsl.w	r0, r3, r0
 8006a70:	9b04      	ldr	r3, [sp, #16]
 8006a72:	4303      	orrs	r3, r0
 8006a74:	3401      	adds	r4, #1
 8006a76:	9304      	str	r3, [sp, #16]
 8006a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a7c:	482c      	ldr	r0, [pc, #176]	; (8006b30 <_vfiprintf_r+0x250>)
 8006a7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a82:	2206      	movs	r2, #6
 8006a84:	f7f9 fbac 	bl	80001e0 <memchr>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	d03f      	beq.n	8006b0c <_vfiprintf_r+0x22c>
 8006a8c:	4b29      	ldr	r3, [pc, #164]	; (8006b34 <_vfiprintf_r+0x254>)
 8006a8e:	bb1b      	cbnz	r3, 8006ad8 <_vfiprintf_r+0x1f8>
 8006a90:	9b03      	ldr	r3, [sp, #12]
 8006a92:	3307      	adds	r3, #7
 8006a94:	f023 0307 	bic.w	r3, r3, #7
 8006a98:	3308      	adds	r3, #8
 8006a9a:	9303      	str	r3, [sp, #12]
 8006a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a9e:	443b      	add	r3, r7
 8006aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8006aa2:	e767      	b.n	8006974 <_vfiprintf_r+0x94>
 8006aa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006aa8:	460c      	mov	r4, r1
 8006aaa:	2001      	movs	r0, #1
 8006aac:	e7a5      	b.n	80069fa <_vfiprintf_r+0x11a>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	3401      	adds	r4, #1
 8006ab2:	9305      	str	r3, [sp, #20]
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	f04f 0c0a 	mov.w	ip, #10
 8006aba:	4620      	mov	r0, r4
 8006abc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ac0:	3a30      	subs	r2, #48	; 0x30
 8006ac2:	2a09      	cmp	r2, #9
 8006ac4:	d903      	bls.n	8006ace <_vfiprintf_r+0x1ee>
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0c5      	beq.n	8006a56 <_vfiprintf_r+0x176>
 8006aca:	9105      	str	r1, [sp, #20]
 8006acc:	e7c3      	b.n	8006a56 <_vfiprintf_r+0x176>
 8006ace:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e7f0      	b.n	8006aba <_vfiprintf_r+0x1da>
 8006ad8:	ab03      	add	r3, sp, #12
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	462a      	mov	r2, r5
 8006ade:	4b16      	ldr	r3, [pc, #88]	; (8006b38 <_vfiprintf_r+0x258>)
 8006ae0:	a904      	add	r1, sp, #16
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	f7fd fbbc 	bl	8004260 <_printf_float>
 8006ae8:	4607      	mov	r7, r0
 8006aea:	1c78      	adds	r0, r7, #1
 8006aec:	d1d6      	bne.n	8006a9c <_vfiprintf_r+0x1bc>
 8006aee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006af0:	07d9      	lsls	r1, r3, #31
 8006af2:	d405      	bmi.n	8006b00 <_vfiprintf_r+0x220>
 8006af4:	89ab      	ldrh	r3, [r5, #12]
 8006af6:	059a      	lsls	r2, r3, #22
 8006af8:	d402      	bmi.n	8006b00 <_vfiprintf_r+0x220>
 8006afa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006afc:	f7ff f9d0 	bl	8005ea0 <__retarget_lock_release_recursive>
 8006b00:	89ab      	ldrh	r3, [r5, #12]
 8006b02:	065b      	lsls	r3, r3, #25
 8006b04:	f53f af12 	bmi.w	800692c <_vfiprintf_r+0x4c>
 8006b08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b0a:	e711      	b.n	8006930 <_vfiprintf_r+0x50>
 8006b0c:	ab03      	add	r3, sp, #12
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	462a      	mov	r2, r5
 8006b12:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <_vfiprintf_r+0x258>)
 8006b14:	a904      	add	r1, sp, #16
 8006b16:	4630      	mov	r0, r6
 8006b18:	f7fd fe46 	bl	80047a8 <_printf_i>
 8006b1c:	e7e4      	b.n	8006ae8 <_vfiprintf_r+0x208>
 8006b1e:	bf00      	nop
 8006b20:	08007038 	.word	0x08007038
 8006b24:	08007058 	.word	0x08007058
 8006b28:	08007018 	.word	0x08007018
 8006b2c:	080071d4 	.word	0x080071d4
 8006b30:	080071de 	.word	0x080071de
 8006b34:	08004261 	.word	0x08004261
 8006b38:	080068bb 	.word	0x080068bb
 8006b3c:	080071da 	.word	0x080071da

08006b40 <_sbrk_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4d06      	ldr	r5, [pc, #24]	; (8006b5c <_sbrk_r+0x1c>)
 8006b44:	2300      	movs	r3, #0
 8006b46:	4604      	mov	r4, r0
 8006b48:	4608      	mov	r0, r1
 8006b4a:	602b      	str	r3, [r5, #0]
 8006b4c:	f7fa fc24 	bl	8001398 <_sbrk>
 8006b50:	1c43      	adds	r3, r0, #1
 8006b52:	d102      	bne.n	8006b5a <_sbrk_r+0x1a>
 8006b54:	682b      	ldr	r3, [r5, #0]
 8006b56:	b103      	cbz	r3, 8006b5a <_sbrk_r+0x1a>
 8006b58:	6023      	str	r3, [r4, #0]
 8006b5a:	bd38      	pop	{r3, r4, r5, pc}
 8006b5c:	20000368 	.word	0x20000368

08006b60 <__sread>:
 8006b60:	b510      	push	{r4, lr}
 8006b62:	460c      	mov	r4, r1
 8006b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b68:	f000 f8e2 	bl	8006d30 <_read_r>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	bfab      	itete	ge
 8006b70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b72:	89a3      	ldrhlt	r3, [r4, #12]
 8006b74:	181b      	addge	r3, r3, r0
 8006b76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b7a:	bfac      	ite	ge
 8006b7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b7e:	81a3      	strhlt	r3, [r4, #12]
 8006b80:	bd10      	pop	{r4, pc}

08006b82 <__swrite>:
 8006b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b86:	461f      	mov	r7, r3
 8006b88:	898b      	ldrh	r3, [r1, #12]
 8006b8a:	05db      	lsls	r3, r3, #23
 8006b8c:	4605      	mov	r5, r0
 8006b8e:	460c      	mov	r4, r1
 8006b90:	4616      	mov	r6, r2
 8006b92:	d505      	bpl.n	8006ba0 <__swrite+0x1e>
 8006b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b98:	2302      	movs	r3, #2
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f000 f898 	bl	8006cd0 <_lseek_r>
 8006ba0:	89a3      	ldrh	r3, [r4, #12]
 8006ba2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ba6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006baa:	81a3      	strh	r3, [r4, #12]
 8006bac:	4632      	mov	r2, r6
 8006bae:	463b      	mov	r3, r7
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb6:	f000 b817 	b.w	8006be8 <_write_r>

08006bba <__sseek>:
 8006bba:	b510      	push	{r4, lr}
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc2:	f000 f885 	bl	8006cd0 <_lseek_r>
 8006bc6:	1c43      	adds	r3, r0, #1
 8006bc8:	89a3      	ldrh	r3, [r4, #12]
 8006bca:	bf15      	itete	ne
 8006bcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006bce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006bd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006bd6:	81a3      	strheq	r3, [r4, #12]
 8006bd8:	bf18      	it	ne
 8006bda:	81a3      	strhne	r3, [r4, #12]
 8006bdc:	bd10      	pop	{r4, pc}

08006bde <__sclose>:
 8006bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be2:	f000 b831 	b.w	8006c48 <_close_r>
	...

08006be8 <_write_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	4d07      	ldr	r5, [pc, #28]	; (8006c08 <_write_r+0x20>)
 8006bec:	4604      	mov	r4, r0
 8006bee:	4608      	mov	r0, r1
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	602a      	str	r2, [r5, #0]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	f7fa fa5e 	bl	80010b8 <_write>
 8006bfc:	1c43      	adds	r3, r0, #1
 8006bfe:	d102      	bne.n	8006c06 <_write_r+0x1e>
 8006c00:	682b      	ldr	r3, [r5, #0]
 8006c02:	b103      	cbz	r3, 8006c06 <_write_r+0x1e>
 8006c04:	6023      	str	r3, [r4, #0]
 8006c06:	bd38      	pop	{r3, r4, r5, pc}
 8006c08:	20000368 	.word	0x20000368

08006c0c <__assert_func>:
 8006c0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c0e:	4614      	mov	r4, r2
 8006c10:	461a      	mov	r2, r3
 8006c12:	4b09      	ldr	r3, [pc, #36]	; (8006c38 <__assert_func+0x2c>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4605      	mov	r5, r0
 8006c18:	68d8      	ldr	r0, [r3, #12]
 8006c1a:	b14c      	cbz	r4, 8006c30 <__assert_func+0x24>
 8006c1c:	4b07      	ldr	r3, [pc, #28]	; (8006c3c <__assert_func+0x30>)
 8006c1e:	9100      	str	r1, [sp, #0]
 8006c20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c24:	4906      	ldr	r1, [pc, #24]	; (8006c40 <__assert_func+0x34>)
 8006c26:	462b      	mov	r3, r5
 8006c28:	f000 f81e 	bl	8006c68 <fiprintf>
 8006c2c:	f000 f89f 	bl	8006d6e <abort>
 8006c30:	4b04      	ldr	r3, [pc, #16]	; (8006c44 <__assert_func+0x38>)
 8006c32:	461c      	mov	r4, r3
 8006c34:	e7f3      	b.n	8006c1e <__assert_func+0x12>
 8006c36:	bf00      	nop
 8006c38:	2000000c 	.word	0x2000000c
 8006c3c:	080071e5 	.word	0x080071e5
 8006c40:	080071f2 	.word	0x080071f2
 8006c44:	08007220 	.word	0x08007220

08006c48 <_close_r>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	4d06      	ldr	r5, [pc, #24]	; (8006c64 <_close_r+0x1c>)
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	4604      	mov	r4, r0
 8006c50:	4608      	mov	r0, r1
 8006c52:	602b      	str	r3, [r5, #0]
 8006c54:	f7fa fb6b 	bl	800132e <_close>
 8006c58:	1c43      	adds	r3, r0, #1
 8006c5a:	d102      	bne.n	8006c62 <_close_r+0x1a>
 8006c5c:	682b      	ldr	r3, [r5, #0]
 8006c5e:	b103      	cbz	r3, 8006c62 <_close_r+0x1a>
 8006c60:	6023      	str	r3, [r4, #0]
 8006c62:	bd38      	pop	{r3, r4, r5, pc}
 8006c64:	20000368 	.word	0x20000368

08006c68 <fiprintf>:
 8006c68:	b40e      	push	{r1, r2, r3}
 8006c6a:	b503      	push	{r0, r1, lr}
 8006c6c:	4601      	mov	r1, r0
 8006c6e:	ab03      	add	r3, sp, #12
 8006c70:	4805      	ldr	r0, [pc, #20]	; (8006c88 <fiprintf+0x20>)
 8006c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c76:	6800      	ldr	r0, [r0, #0]
 8006c78:	9301      	str	r3, [sp, #4]
 8006c7a:	f7ff fe31 	bl	80068e0 <_vfiprintf_r>
 8006c7e:	b002      	add	sp, #8
 8006c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c84:	b003      	add	sp, #12
 8006c86:	4770      	bx	lr
 8006c88:	2000000c 	.word	0x2000000c

08006c8c <_fstat_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	4d07      	ldr	r5, [pc, #28]	; (8006cac <_fstat_r+0x20>)
 8006c90:	2300      	movs	r3, #0
 8006c92:	4604      	mov	r4, r0
 8006c94:	4608      	mov	r0, r1
 8006c96:	4611      	mov	r1, r2
 8006c98:	602b      	str	r3, [r5, #0]
 8006c9a:	f7fa fb54 	bl	8001346 <_fstat>
 8006c9e:	1c43      	adds	r3, r0, #1
 8006ca0:	d102      	bne.n	8006ca8 <_fstat_r+0x1c>
 8006ca2:	682b      	ldr	r3, [r5, #0]
 8006ca4:	b103      	cbz	r3, 8006ca8 <_fstat_r+0x1c>
 8006ca6:	6023      	str	r3, [r4, #0]
 8006ca8:	bd38      	pop	{r3, r4, r5, pc}
 8006caa:	bf00      	nop
 8006cac:	20000368 	.word	0x20000368

08006cb0 <_isatty_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	4d06      	ldr	r5, [pc, #24]	; (8006ccc <_isatty_r+0x1c>)
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	4608      	mov	r0, r1
 8006cba:	602b      	str	r3, [r5, #0]
 8006cbc:	f7fa fb53 	bl	8001366 <_isatty>
 8006cc0:	1c43      	adds	r3, r0, #1
 8006cc2:	d102      	bne.n	8006cca <_isatty_r+0x1a>
 8006cc4:	682b      	ldr	r3, [r5, #0]
 8006cc6:	b103      	cbz	r3, 8006cca <_isatty_r+0x1a>
 8006cc8:	6023      	str	r3, [r4, #0]
 8006cca:	bd38      	pop	{r3, r4, r5, pc}
 8006ccc:	20000368 	.word	0x20000368

08006cd0 <_lseek_r>:
 8006cd0:	b538      	push	{r3, r4, r5, lr}
 8006cd2:	4d07      	ldr	r5, [pc, #28]	; (8006cf0 <_lseek_r+0x20>)
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	4608      	mov	r0, r1
 8006cd8:	4611      	mov	r1, r2
 8006cda:	2200      	movs	r2, #0
 8006cdc:	602a      	str	r2, [r5, #0]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f7fa fb4c 	bl	800137c <_lseek>
 8006ce4:	1c43      	adds	r3, r0, #1
 8006ce6:	d102      	bne.n	8006cee <_lseek_r+0x1e>
 8006ce8:	682b      	ldr	r3, [r5, #0]
 8006cea:	b103      	cbz	r3, 8006cee <_lseek_r+0x1e>
 8006cec:	6023      	str	r3, [r4, #0]
 8006cee:	bd38      	pop	{r3, r4, r5, pc}
 8006cf0:	20000368 	.word	0x20000368

08006cf4 <__ascii_mbtowc>:
 8006cf4:	b082      	sub	sp, #8
 8006cf6:	b901      	cbnz	r1, 8006cfa <__ascii_mbtowc+0x6>
 8006cf8:	a901      	add	r1, sp, #4
 8006cfa:	b142      	cbz	r2, 8006d0e <__ascii_mbtowc+0x1a>
 8006cfc:	b14b      	cbz	r3, 8006d12 <__ascii_mbtowc+0x1e>
 8006cfe:	7813      	ldrb	r3, [r2, #0]
 8006d00:	600b      	str	r3, [r1, #0]
 8006d02:	7812      	ldrb	r2, [r2, #0]
 8006d04:	1e10      	subs	r0, r2, #0
 8006d06:	bf18      	it	ne
 8006d08:	2001      	movne	r0, #1
 8006d0a:	b002      	add	sp, #8
 8006d0c:	4770      	bx	lr
 8006d0e:	4610      	mov	r0, r2
 8006d10:	e7fb      	b.n	8006d0a <__ascii_mbtowc+0x16>
 8006d12:	f06f 0001 	mvn.w	r0, #1
 8006d16:	e7f8      	b.n	8006d0a <__ascii_mbtowc+0x16>

08006d18 <__malloc_lock>:
 8006d18:	4801      	ldr	r0, [pc, #4]	; (8006d20 <__malloc_lock+0x8>)
 8006d1a:	f7ff b8c0 	b.w	8005e9e <__retarget_lock_acquire_recursive>
 8006d1e:	bf00      	nop
 8006d20:	2000035c 	.word	0x2000035c

08006d24 <__malloc_unlock>:
 8006d24:	4801      	ldr	r0, [pc, #4]	; (8006d2c <__malloc_unlock+0x8>)
 8006d26:	f7ff b8bb 	b.w	8005ea0 <__retarget_lock_release_recursive>
 8006d2a:	bf00      	nop
 8006d2c:	2000035c 	.word	0x2000035c

08006d30 <_read_r>:
 8006d30:	b538      	push	{r3, r4, r5, lr}
 8006d32:	4d07      	ldr	r5, [pc, #28]	; (8006d50 <_read_r+0x20>)
 8006d34:	4604      	mov	r4, r0
 8006d36:	4608      	mov	r0, r1
 8006d38:	4611      	mov	r1, r2
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	602a      	str	r2, [r5, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f7fa fad8 	bl	80012f4 <_read>
 8006d44:	1c43      	adds	r3, r0, #1
 8006d46:	d102      	bne.n	8006d4e <_read_r+0x1e>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	b103      	cbz	r3, 8006d4e <_read_r+0x1e>
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	bd38      	pop	{r3, r4, r5, pc}
 8006d50:	20000368 	.word	0x20000368

08006d54 <__ascii_wctomb>:
 8006d54:	b149      	cbz	r1, 8006d6a <__ascii_wctomb+0x16>
 8006d56:	2aff      	cmp	r2, #255	; 0xff
 8006d58:	bf85      	ittet	hi
 8006d5a:	238a      	movhi	r3, #138	; 0x8a
 8006d5c:	6003      	strhi	r3, [r0, #0]
 8006d5e:	700a      	strbls	r2, [r1, #0]
 8006d60:	f04f 30ff 	movhi.w	r0, #4294967295
 8006d64:	bf98      	it	ls
 8006d66:	2001      	movls	r0, #1
 8006d68:	4770      	bx	lr
 8006d6a:	4608      	mov	r0, r1
 8006d6c:	4770      	bx	lr

08006d6e <abort>:
 8006d6e:	b508      	push	{r3, lr}
 8006d70:	2006      	movs	r0, #6
 8006d72:	f000 f82b 	bl	8006dcc <raise>
 8006d76:	2001      	movs	r0, #1
 8006d78:	f7fa fab2 	bl	80012e0 <_exit>

08006d7c <_raise_r>:
 8006d7c:	291f      	cmp	r1, #31
 8006d7e:	b538      	push	{r3, r4, r5, lr}
 8006d80:	4604      	mov	r4, r0
 8006d82:	460d      	mov	r5, r1
 8006d84:	d904      	bls.n	8006d90 <_raise_r+0x14>
 8006d86:	2316      	movs	r3, #22
 8006d88:	6003      	str	r3, [r0, #0]
 8006d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8e:	bd38      	pop	{r3, r4, r5, pc}
 8006d90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006d92:	b112      	cbz	r2, 8006d9a <_raise_r+0x1e>
 8006d94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d98:	b94b      	cbnz	r3, 8006dae <_raise_r+0x32>
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f000 f830 	bl	8006e00 <_getpid_r>
 8006da0:	462a      	mov	r2, r5
 8006da2:	4601      	mov	r1, r0
 8006da4:	4620      	mov	r0, r4
 8006da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006daa:	f000 b817 	b.w	8006ddc <_kill_r>
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d00a      	beq.n	8006dc8 <_raise_r+0x4c>
 8006db2:	1c59      	adds	r1, r3, #1
 8006db4:	d103      	bne.n	8006dbe <_raise_r+0x42>
 8006db6:	2316      	movs	r3, #22
 8006db8:	6003      	str	r3, [r0, #0]
 8006dba:	2001      	movs	r0, #1
 8006dbc:	e7e7      	b.n	8006d8e <_raise_r+0x12>
 8006dbe:	2400      	movs	r4, #0
 8006dc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	4798      	blx	r3
 8006dc8:	2000      	movs	r0, #0
 8006dca:	e7e0      	b.n	8006d8e <_raise_r+0x12>

08006dcc <raise>:
 8006dcc:	4b02      	ldr	r3, [pc, #8]	; (8006dd8 <raise+0xc>)
 8006dce:	4601      	mov	r1, r0
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	f7ff bfd3 	b.w	8006d7c <_raise_r>
 8006dd6:	bf00      	nop
 8006dd8:	2000000c 	.word	0x2000000c

08006ddc <_kill_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	4d07      	ldr	r5, [pc, #28]	; (8006dfc <_kill_r+0x20>)
 8006de0:	2300      	movs	r3, #0
 8006de2:	4604      	mov	r4, r0
 8006de4:	4608      	mov	r0, r1
 8006de6:	4611      	mov	r1, r2
 8006de8:	602b      	str	r3, [r5, #0]
 8006dea:	f7fa fa69 	bl	80012c0 <_kill>
 8006dee:	1c43      	adds	r3, r0, #1
 8006df0:	d102      	bne.n	8006df8 <_kill_r+0x1c>
 8006df2:	682b      	ldr	r3, [r5, #0]
 8006df4:	b103      	cbz	r3, 8006df8 <_kill_r+0x1c>
 8006df6:	6023      	str	r3, [r4, #0]
 8006df8:	bd38      	pop	{r3, r4, r5, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20000368 	.word	0x20000368

08006e00 <_getpid_r>:
 8006e00:	f7fa ba56 	b.w	80012b0 <_getpid>

08006e04 <_init>:
 8006e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e06:	bf00      	nop
 8006e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0a:	bc08      	pop	{r3}
 8006e0c:	469e      	mov	lr, r3
 8006e0e:	4770      	bx	lr

08006e10 <_fini>:
 8006e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e12:	bf00      	nop
 8006e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e16:	bc08      	pop	{r3}
 8006e18:	469e      	mov	lr, r3
 8006e1a:	4770      	bx	lr
